
AutomaticPump.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000049dc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  08004b7c  08004b7c  00014b7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c4c  08004c4c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004c4c  08004c4c  00014c4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004c54  08004c54  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c54  08004c54  00014c54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004c58  08004c58  00014c58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004c5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000118  20000070  08004ccc  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000188  08004ccc  00020188  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f98a  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d54  00000000  00000000  0002fa2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f18  00000000  00000000  00031780  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ea8  00000000  00000000  00032698  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017241  00000000  00000000  00033540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011039  00000000  00000000  0004a781  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009109d  00000000  00000000  0005b7ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ec857  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000048ac  00000000  00000000  000ec8a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004b64 	.word	0x08004b64

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08004b64 	.word	0x08004b64

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <ReadRTCRegister>:
// Duration in milliseconds for TIM1 activation
//#define ACTIVE_DURATION 10 // Duration in minutes


uint8_t ReadRTCRegister(uint8_t register_address)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b088      	sub	sp, #32
 8000588:	af04      	add	r7, sp, #16
 800058a:	4603      	mov	r3, r0
 800058c:	71fb      	strb	r3, [r7, #7]
    uint8_t data;
    HAL_StatusTypeDef status = HAL_I2C_Mem_Read(&hi2c1, 0x68 << 1, register_address, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 800058e:	79fb      	ldrb	r3, [r7, #7]
 8000590:	b29a      	uxth	r2, r3
 8000592:	f04f 33ff 	mov.w	r3, #4294967295
 8000596:	9302      	str	r3, [sp, #8]
 8000598:	2301      	movs	r3, #1
 800059a:	9301      	str	r3, [sp, #4]
 800059c:	f107 030e 	add.w	r3, r7, #14
 80005a0:	9300      	str	r3, [sp, #0]
 80005a2:	2301      	movs	r3, #1
 80005a4:	21d0      	movs	r1, #208	; 0xd0
 80005a6:	480a      	ldr	r0, [pc, #40]	; (80005d0 <ReadRTCRegister+0x4c>)
 80005a8:	f001 f9a4 	bl	80018f4 <HAL_I2C_Mem_Read>
 80005ac:	4603      	mov	r3, r0
 80005ae:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK)
 80005b0:	7bfb      	ldrb	r3, [r7, #15]
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d006      	beq.n	80005c4 <ReadRTCRegister+0x40>
    {
        printf("Error reading register 0x%02X\n", register_address);
 80005b6:	79fb      	ldrb	r3, [r7, #7]
 80005b8:	4619      	mov	r1, r3
 80005ba:	4806      	ldr	r0, [pc, #24]	; (80005d4 <ReadRTCRegister+0x50>)
 80005bc:	f003 fb44 	bl	8003c48 <iprintf>
        return 0xFF; // Return error code
 80005c0:	23ff      	movs	r3, #255	; 0xff
 80005c2:	e000      	b.n	80005c6 <ReadRTCRegister+0x42>
    }
    return data;
 80005c4:	7bbb      	ldrb	r3, [r7, #14]
}
 80005c6:	4618      	mov	r0, r3
 80005c8:	3710      	adds	r7, #16
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	2000008c 	.word	0x2000008c
 80005d4:	08004b7c 	.word	0x08004b7c

080005d8 <ReadRTC>:

void ReadRTC(uint8_t *hours, uint8_t *minutes, uint8_t *seconds)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b086      	sub	sp, #24
 80005dc:	af00      	add	r7, sp, #0
 80005de:	60f8      	str	r0, [r7, #12]
 80005e0:	60b9      	str	r1, [r7, #8]
 80005e2:	607a      	str	r2, [r7, #4]
    // Read RTC registers
    uint8_t reg_seconds = ReadRTCRegister(0x00);
 80005e4:	2000      	movs	r0, #0
 80005e6:	f7ff ffcd 	bl	8000584 <ReadRTCRegister>
 80005ea:	4603      	mov	r3, r0
 80005ec:	75fb      	strb	r3, [r7, #23]
    uint8_t reg_minutes = ReadRTCRegister(0x01);
 80005ee:	2001      	movs	r0, #1
 80005f0:	f7ff ffc8 	bl	8000584 <ReadRTCRegister>
 80005f4:	4603      	mov	r3, r0
 80005f6:	75bb      	strb	r3, [r7, #22]
    uint8_t reg_hours = ReadRTCRegister(0x02);
 80005f8:	2002      	movs	r0, #2
 80005fa:	f7ff ffc3 	bl	8000584 <ReadRTCRegister>
 80005fe:	4603      	mov	r3, r0
 8000600:	757b      	strb	r3, [r7, #21]

    // Convert BCD to decimal
    *seconds = ((reg_seconds >> 4) * 10) + (reg_seconds & 0x0F);
 8000602:	7dfb      	ldrb	r3, [r7, #23]
 8000604:	091b      	lsrs	r3, r3, #4
 8000606:	b2db      	uxtb	r3, r3
 8000608:	461a      	mov	r2, r3
 800060a:	0092      	lsls	r2, r2, #2
 800060c:	4413      	add	r3, r2
 800060e:	005b      	lsls	r3, r3, #1
 8000610:	b2da      	uxtb	r2, r3
 8000612:	7dfb      	ldrb	r3, [r7, #23]
 8000614:	f003 030f 	and.w	r3, r3, #15
 8000618:	b2db      	uxtb	r3, r3
 800061a:	4413      	add	r3, r2
 800061c:	b2da      	uxtb	r2, r3
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	701a      	strb	r2, [r3, #0]
    *minutes = ((reg_minutes >> 4) * 10) + (reg_minutes & 0x0F);
 8000622:	7dbb      	ldrb	r3, [r7, #22]
 8000624:	091b      	lsrs	r3, r3, #4
 8000626:	b2db      	uxtb	r3, r3
 8000628:	461a      	mov	r2, r3
 800062a:	0092      	lsls	r2, r2, #2
 800062c:	4413      	add	r3, r2
 800062e:	005b      	lsls	r3, r3, #1
 8000630:	b2da      	uxtb	r2, r3
 8000632:	7dbb      	ldrb	r3, [r7, #22]
 8000634:	f003 030f 	and.w	r3, r3, #15
 8000638:	b2db      	uxtb	r3, r3
 800063a:	4413      	add	r3, r2
 800063c:	b2da      	uxtb	r2, r3
 800063e:	68bb      	ldr	r3, [r7, #8]
 8000640:	701a      	strb	r2, [r3, #0]
    *hours = ((reg_hours >> 4) * 10) + (reg_hours & 0x0F);
 8000642:	7d7b      	ldrb	r3, [r7, #21]
 8000644:	091b      	lsrs	r3, r3, #4
 8000646:	b2db      	uxtb	r3, r3
 8000648:	461a      	mov	r2, r3
 800064a:	0092      	lsls	r2, r2, #2
 800064c:	4413      	add	r3, r2
 800064e:	005b      	lsls	r3, r3, #1
 8000650:	b2da      	uxtb	r2, r3
 8000652:	7d7b      	ldrb	r3, [r7, #21]
 8000654:	f003 030f 	and.w	r3, r3, #15
 8000658:	b2db      	uxtb	r3, r3
 800065a:	4413      	add	r3, r2
 800065c:	b2da      	uxtb	r2, r3
 800065e:	68fb      	ldr	r3, [r7, #12]
 8000660:	701a      	strb	r2, [r3, #0]
}
 8000662:	bf00      	nop
 8000664:	3718      	adds	r7, #24
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
	...

0800066c <ConfigureTIM1ForPWM>:

void ConfigureTIM1ForPWM(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b088      	sub	sp, #32
 8000670:	af00      	add	r7, sp, #0
    TIM_OC_InitTypeDef sConfigOC = {0};
 8000672:	1d3b      	adds	r3, r7, #4
 8000674:	2200      	movs	r2, #0
 8000676:	601a      	str	r2, [r3, #0]
 8000678:	605a      	str	r2, [r3, #4]
 800067a:	609a      	str	r2, [r3, #8]
 800067c:	60da      	str	r2, [r3, #12]
 800067e:	611a      	str	r2, [r3, #16]
 8000680:	615a      	str	r2, [r3, #20]
 8000682:	619a      	str	r2, [r3, #24]

    // Configure TIM1 for PWM mode
    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000684:	2360      	movs	r3, #96	; 0x60
 8000686:	607b      	str	r3, [r7, #4]
    sConfigOC.Pulse = __HAL_TIM_GET_AUTORELOAD(&htim1); // Full duty cycle (match auto-reload value)
 8000688:	4b0e      	ldr	r3, [pc, #56]	; (80006c4 <ConfigureTIM1ForPWM+0x58>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800068e:	60bb      	str	r3, [r7, #8]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000690:	2300      	movs	r3, #0
 8000692:	60fb      	str	r3, [r7, #12]
    sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000694:	2300      	movs	r3, #0
 8000696:	613b      	str	r3, [r7, #16]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000698:	2300      	movs	r3, #0
 800069a:	617b      	str	r3, [r7, #20]
    sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800069c:	2300      	movs	r3, #0
 800069e:	61bb      	str	r3, [r7, #24]
    sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80006a0:	2300      	movs	r3, #0
 80006a2:	61fb      	str	r3, [r7, #28]

    // Initialize TIM1 with PWM settings
    if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80006a4:	1d3b      	adds	r3, r7, #4
 80006a6:	2200      	movs	r2, #0
 80006a8:	4619      	mov	r1, r3
 80006aa:	4806      	ldr	r0, [pc, #24]	; (80006c4 <ConfigureTIM1ForPWM+0x58>)
 80006ac:	f002 fc24 	bl	8002ef8 <HAL_TIM_PWM_ConfigChannel>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <ConfigureTIM1ForPWM+0x4e>
    {
        Error_Handler();
 80006b6:	f000 fa9b 	bl	8000bf0 <Error_Handler>
    }

}
 80006ba:	bf00      	nop
 80006bc:	3720      	adds	r7, #32
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	200000e0 	.word	0x200000e0

080006c8 <CheckAndTriggerTimer>:
//            active_interval = 0; // Reset active interval
//        }
//    }
//}
void CheckAndTriggerTimer(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b084      	sub	sp, #16
 80006cc:	af00      	add	r7, sp, #0
    uint8_t hours, minutes, seconds;
    ReadRTC(&hours, &minutes, &seconds);
 80006ce:	1c7a      	adds	r2, r7, #1
 80006d0:	1cb9      	adds	r1, r7, #2
 80006d2:	1cfb      	adds	r3, r7, #3
 80006d4:	4618      	mov	r0, r3
 80006d6:	f7ff ff7f 	bl	80005d8 <ReadRTC>

    // Determine if the current time matches any of the start times
    uint8_t is_start_time_1 = (hours == START_HOUR_1 && minutes == START_MINUTE_1);
 80006da:	78fb      	ldrb	r3, [r7, #3]
 80006dc:	2b08      	cmp	r3, #8
 80006de:	d104      	bne.n	80006ea <CheckAndTriggerTimer+0x22>
 80006e0:	78bb      	ldrb	r3, [r7, #2]
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d101      	bne.n	80006ea <CheckAndTriggerTimer+0x22>
 80006e6:	2301      	movs	r3, #1
 80006e8:	e000      	b.n	80006ec <CheckAndTriggerTimer+0x24>
 80006ea:	2300      	movs	r3, #0
 80006ec:	73fb      	strb	r3, [r7, #15]
    uint8_t is_start_time_2 = (hours == START_HOUR_2 && minutes == START_MINUTE_2);
 80006ee:	78fb      	ldrb	r3, [r7, #3]
 80006f0:	2b10      	cmp	r3, #16
 80006f2:	d104      	bne.n	80006fe <CheckAndTriggerTimer+0x36>
 80006f4:	78bb      	ldrb	r3, [r7, #2]
 80006f6:	2b1f      	cmp	r3, #31
 80006f8:	d101      	bne.n	80006fe <CheckAndTriggerTimer+0x36>
 80006fa:	2301      	movs	r3, #1
 80006fc:	e000      	b.n	8000700 <CheckAndTriggerTimer+0x38>
 80006fe:	2300      	movs	r3, #0
 8000700:	73bb      	strb	r3, [r7, #14]

    if ((is_start_time_1 || is_start_time_2) && !timer_active)
 8000702:	7bfb      	ldrb	r3, [r7, #15]
 8000704:	2b00      	cmp	r3, #0
 8000706:	d102      	bne.n	800070e <CheckAndTriggerTimer+0x46>
 8000708:	7bbb      	ldrb	r3, [r7, #14]
 800070a:	2b00      	cmp	r3, #0
 800070c:	d057      	beq.n	80007be <CheckAndTriggerTimer+0xf6>
 800070e:	4b2e      	ldr	r3, [pc, #184]	; (80007c8 <CheckAndTriggerTimer+0x100>)
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	2b00      	cmp	r3, #0
 8000714:	d153      	bne.n	80007be <CheckAndTriggerTimer+0xf6>
    {
        uint8_t start_hours = hours;
 8000716:	78fb      	ldrb	r3, [r7, #3]
 8000718:	737b      	strb	r3, [r7, #13]
        uint8_t start_minutes = minutes;
 800071a:	78bb      	ldrb	r3, [r7, #2]
 800071c:	733b      	strb	r3, [r7, #12]
        uint8_t start_seconds = seconds;
 800071e:	787b      	ldrb	r3, [r7, #1]
 8000720:	72fb      	strb	r3, [r7, #11]

        ConfigureTIM1ForPWM();
 8000722:	f7ff ffa3 	bl	800066c <ConfigureTIM1ForPWM>
        HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1); // Start PWM
 8000726:	2100      	movs	r1, #0
 8000728:	4828      	ldr	r0, [pc, #160]	; (80007cc <CheckAndTriggerTimer+0x104>)
 800072a:	f002 fa75 	bl	8002c18 <HAL_TIM_PWM_Start>

        timer_active = 1;
 800072e:	4b26      	ldr	r3, [pc, #152]	; (80007c8 <CheckAndTriggerTimer+0x100>)
 8000730:	2201      	movs	r2, #1
 8000732:	701a      	strb	r2, [r3, #0]

        if (is_start_time_1) {
 8000734:	7bfb      	ldrb	r3, [r7, #15]
 8000736:	2b00      	cmp	r3, #0
 8000738:	d003      	beq.n	8000742 <CheckAndTriggerTimer+0x7a>
            active_interval = 1;
 800073a:	4b25      	ldr	r3, [pc, #148]	; (80007d0 <CheckAndTriggerTimer+0x108>)
 800073c:	2201      	movs	r2, #1
 800073e:	701a      	strb	r2, [r3, #0]
 8000740:	e005      	b.n	800074e <CheckAndTriggerTimer+0x86>
        } else if (is_start_time_2) {
 8000742:	7bbb      	ldrb	r3, [r7, #14]
 8000744:	2b00      	cmp	r3, #0
 8000746:	d002      	beq.n	800074e <CheckAndTriggerTimer+0x86>
            active_interval = 2;
 8000748:	4b21      	ldr	r3, [pc, #132]	; (80007d0 <CheckAndTriggerTimer+0x108>)
 800074a:	2202      	movs	r2, #2
 800074c:	701a      	strb	r2, [r3, #0]
        }

        while (1)
        {
            ReadRTC(&hours, &minutes, &seconds);
 800074e:	1c7a      	adds	r2, r7, #1
 8000750:	1cb9      	adds	r1, r7, #2
 8000752:	1cfb      	adds	r3, r7, #3
 8000754:	4618      	mov	r0, r3
 8000756:	f7ff ff3f 	bl	80005d8 <ReadRTC>

            // Calculate the total elapsed minutes
            int elapsed_minutes = (hours - start_hours) * 60 + (minutes - start_minutes);
 800075a:	78fb      	ldrb	r3, [r7, #3]
 800075c:	461a      	mov	r2, r3
 800075e:	7b7b      	ldrb	r3, [r7, #13]
 8000760:	1ad2      	subs	r2, r2, r3
 8000762:	4613      	mov	r3, r2
 8000764:	011b      	lsls	r3, r3, #4
 8000766:	1a9b      	subs	r3, r3, r2
 8000768:	009b      	lsls	r3, r3, #2
 800076a:	461a      	mov	r2, r3
 800076c:	78bb      	ldrb	r3, [r7, #2]
 800076e:	4619      	mov	r1, r3
 8000770:	7b3b      	ldrb	r3, [r7, #12]
 8000772:	1acb      	subs	r3, r1, r3
 8000774:	4413      	add	r3, r2
 8000776:	607b      	str	r3, [r7, #4]

            // Check if the duration for the active interval has passed
            if ((active_interval == 1 && elapsed_minutes >= DURATION_1) ||
 8000778:	4b15      	ldr	r3, [pc, #84]	; (80007d0 <CheckAndTriggerTimer+0x108>)
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	2b01      	cmp	r3, #1
 800077e:	d102      	bne.n	8000786 <CheckAndTriggerTimer+0xbe>
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	2b09      	cmp	r3, #9
 8000784:	dc06      	bgt.n	8000794 <CheckAndTriggerTimer+0xcc>
                (active_interval == 2 && elapsed_minutes >= DURATION_2))
 8000786:	4b12      	ldr	r3, [pc, #72]	; (80007d0 <CheckAndTriggerTimer+0x108>)
 8000788:	781b      	ldrb	r3, [r3, #0]
            if ((active_interval == 1 && elapsed_minutes >= DURATION_1) ||
 800078a:	2b02      	cmp	r3, #2
 800078c:	d112      	bne.n	80007b4 <CheckAndTriggerTimer+0xec>
                (active_interval == 2 && elapsed_minutes >= DURATION_2))
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	2b01      	cmp	r3, #1
 8000792:	dd0f      	ble.n	80007b4 <CheckAndTriggerTimer+0xec>
            {
                HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1); // Ensure PWM is stopped
 8000794:	2100      	movs	r1, #0
 8000796:	480d      	ldr	r0, [pc, #52]	; (80007cc <CheckAndTriggerTimer+0x104>)
 8000798:	f002 faee 	bl	8002d78 <HAL_TIM_PWM_Stop>
                HAL_Delay(1000); // Adjust delay as necessary
 800079c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007a0:	f000 fcbc 	bl	800111c <HAL_Delay>
                timer_active = 0;
 80007a4:	4b08      	ldr	r3, [pc, #32]	; (80007c8 <CheckAndTriggerTimer+0x100>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	701a      	strb	r2, [r3, #0]
                active_interval = 0; // Reset active interval
 80007aa:	4b09      	ldr	r3, [pc, #36]	; (80007d0 <CheckAndTriggerTimer+0x108>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	701a      	strb	r2, [r3, #0]
                break; // Exit the loop
 80007b0:	bf00      	nop
            }

            HAL_Delay(1000); // Adjust delay as necessary
        }
    }
}
 80007b2:	e004      	b.n	80007be <CheckAndTriggerTimer+0xf6>
            HAL_Delay(1000); // Adjust delay as necessary
 80007b4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007b8:	f000 fcb0 	bl	800111c <HAL_Delay>
        {
 80007bc:	e7c7      	b.n	800074e <CheckAndTriggerTimer+0x86>
}
 80007be:	bf00      	nop
 80007c0:	3710      	adds	r7, #16
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	2000016d 	.word	0x2000016d
 80007cc:	200000e0 	.word	0x200000e0
 80007d0:	2000016c 	.word	0x2000016c

080007d4 <PowerUp>:



void PowerUp(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b084      	sub	sp, #16
 80007d8:	af00      	add	r7, sp, #0
    uint8_t start_hours, start_minutes, start_seconds;
    ReadRTC(&start_hours, &start_minutes, &start_seconds);
 80007da:	f107 0209 	add.w	r2, r7, #9
 80007de:	f107 010a 	add.w	r1, r7, #10
 80007e2:	f107 030b 	add.w	r3, r7, #11
 80007e6:	4618      	mov	r0, r3
 80007e8:	f7ff fef6 	bl	80005d8 <ReadRTC>

    uint8_t current_hours, current_minutes, current_seconds;

    // Configure TIM1 for PWM
    ConfigureTIM1ForPWM();
 80007ec:	f7ff ff3e 	bl	800066c <ConfigureTIM1ForPWM>
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1); // Start PWM
 80007f0:	2100      	movs	r1, #0
 80007f2:	4817      	ldr	r0, [pc, #92]	; (8000850 <PowerUp+0x7c>)
 80007f4:	f002 fa10 	bl	8002c18 <HAL_TIM_PWM_Start>

    // Poll until 10 minutes have passed
    while (1)
    {
        ReadRTC(&current_hours, &current_minutes, &current_seconds);
 80007f8:	1dba      	adds	r2, r7, #6
 80007fa:	1df9      	adds	r1, r7, #7
 80007fc:	f107 0308 	add.w	r3, r7, #8
 8000800:	4618      	mov	r0, r3
 8000802:	f7ff fee9 	bl	80005d8 <ReadRTC>

        // Calculate the total elapsed minutes
        int elapsed_minutes = (current_hours - start_hours) * 60 + (current_minutes - start_minutes);
 8000806:	7a3b      	ldrb	r3, [r7, #8]
 8000808:	461a      	mov	r2, r3
 800080a:	7afb      	ldrb	r3, [r7, #11]
 800080c:	1ad2      	subs	r2, r2, r3
 800080e:	4613      	mov	r3, r2
 8000810:	011b      	lsls	r3, r3, #4
 8000812:	1a9b      	subs	r3, r3, r2
 8000814:	009b      	lsls	r3, r3, #2
 8000816:	461a      	mov	r2, r3
 8000818:	79fb      	ldrb	r3, [r7, #7]
 800081a:	4619      	mov	r1, r3
 800081c:	7abb      	ldrb	r3, [r7, #10]
 800081e:	1acb      	subs	r3, r1, r3
 8000820:	4413      	add	r3, r2
 8000822:	60fb      	str	r3, [r7, #12]

        // Check if 10 minutes have passed
        if (elapsed_minutes >= 1)
 8000824:	68fb      	ldr	r3, [r7, #12]
 8000826:	2b00      	cmp	r3, #0
 8000828:	dd08      	ble.n	800083c <PowerUp+0x68>
        {
            // Stop PWM
        	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1); // Ensure PWM is stopped
 800082a:	2100      	movs	r1, #0
 800082c:	4808      	ldr	r0, [pc, #32]	; (8000850 <PowerUp+0x7c>)
 800082e:	f002 faa3 	bl	8002d78 <HAL_TIM_PWM_Stop>
            HAL_Delay(1000); // Adjust delay as necessary
 8000832:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000836:	f000 fc71 	bl	800111c <HAL_Delay>
            break; // Exit the loop to proceed to the main while loop
 800083a:	e004      	b.n	8000846 <PowerUp+0x72>
        }

        // Add a short delay to avoid excessive polling
        HAL_Delay(1000); // Adjust delay as necessary
 800083c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000840:	f000 fc6c 	bl	800111c <HAL_Delay>
    {
 8000844:	e7d8      	b.n	80007f8 <PowerUp+0x24>
    }
}
 8000846:	bf00      	nop
 8000848:	3710      	adds	r7, #16
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	200000e0 	.word	0x200000e0

08000854 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000858:	f000 fbee 	bl	8001038 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800085c:	f000 f812 	bl	8000884 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000860:	f000 f958 	bl	8000b14 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000864:	f000 f92c 	bl	8000ac0 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000868:	f000 f878 	bl	800095c <MX_I2C1_Init>
  MX_TIM1_Init();
 800086c:	f000 f8a4 	bl	80009b8 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  PowerUp();
 8000870:	f7ff ffb0 	bl	80007d4 <PowerUp>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
      CheckAndTriggerTimer();
 8000874:	f7ff ff28 	bl	80006c8 <CheckAndTriggerTimer>
      HAL_Delay(1000); // Delay to prevent excessive RTC polling
 8000878:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800087c:	f000 fc4e 	bl	800111c <HAL_Delay>
      CheckAndTriggerTimer();
 8000880:	e7f8      	b.n	8000874 <main+0x20>
	...

08000884 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b094      	sub	sp, #80	; 0x50
 8000888:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800088a:	f107 0320 	add.w	r3, r7, #32
 800088e:	2230      	movs	r2, #48	; 0x30
 8000890:	2100      	movs	r1, #0
 8000892:	4618      	mov	r0, r3
 8000894:	f003 f9d0 	bl	8003c38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000898:	f107 030c 	add.w	r3, r7, #12
 800089c:	2200      	movs	r2, #0
 800089e:	601a      	str	r2, [r3, #0]
 80008a0:	605a      	str	r2, [r3, #4]
 80008a2:	609a      	str	r2, [r3, #8]
 80008a4:	60da      	str	r2, [r3, #12]
 80008a6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008a8:	2300      	movs	r3, #0
 80008aa:	60bb      	str	r3, [r7, #8]
 80008ac:	4b29      	ldr	r3, [pc, #164]	; (8000954 <SystemClock_Config+0xd0>)
 80008ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008b0:	4a28      	ldr	r2, [pc, #160]	; (8000954 <SystemClock_Config+0xd0>)
 80008b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008b6:	6413      	str	r3, [r2, #64]	; 0x40
 80008b8:	4b26      	ldr	r3, [pc, #152]	; (8000954 <SystemClock_Config+0xd0>)
 80008ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008c0:	60bb      	str	r3, [r7, #8]
 80008c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80008c4:	2300      	movs	r3, #0
 80008c6:	607b      	str	r3, [r7, #4]
 80008c8:	4b23      	ldr	r3, [pc, #140]	; (8000958 <SystemClock_Config+0xd4>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80008d0:	4a21      	ldr	r2, [pc, #132]	; (8000958 <SystemClock_Config+0xd4>)
 80008d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80008d6:	6013      	str	r3, [r2, #0]
 80008d8:	4b1f      	ldr	r3, [pc, #124]	; (8000958 <SystemClock_Config+0xd4>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008e0:	607b      	str	r3, [r7, #4]
 80008e2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008e4:	2302      	movs	r3, #2
 80008e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008e8:	2301      	movs	r3, #1
 80008ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008ec:	2310      	movs	r3, #16
 80008ee:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008f0:	2302      	movs	r3, #2
 80008f2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008f4:	2300      	movs	r3, #0
 80008f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80008f8:	2310      	movs	r3, #16
 80008fa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80008fc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000900:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000902:	2304      	movs	r3, #4
 8000904:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000906:	2307      	movs	r3, #7
 8000908:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800090a:	f107 0320 	add.w	r3, r7, #32
 800090e:	4618      	mov	r0, r3
 8000910:	f001 fc9a 	bl	8002248 <HAL_RCC_OscConfig>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800091a:	f000 f969 	bl	8000bf0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800091e:	230f      	movs	r3, #15
 8000920:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000922:	2302      	movs	r3, #2
 8000924:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000926:	2300      	movs	r3, #0
 8000928:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800092a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800092e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000930:	2300      	movs	r3, #0
 8000932:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000934:	f107 030c 	add.w	r3, r7, #12
 8000938:	2102      	movs	r1, #2
 800093a:	4618      	mov	r0, r3
 800093c:	f001 fefc 	bl	8002738 <HAL_RCC_ClockConfig>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000946:	f000 f953 	bl	8000bf0 <Error_Handler>
  }
}
 800094a:	bf00      	nop
 800094c:	3750      	adds	r7, #80	; 0x50
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	40023800 	.word	0x40023800
 8000958:	40007000 	.word	0x40007000

0800095c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000960:	4b12      	ldr	r3, [pc, #72]	; (80009ac <MX_I2C1_Init+0x50>)
 8000962:	4a13      	ldr	r2, [pc, #76]	; (80009b0 <MX_I2C1_Init+0x54>)
 8000964:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000966:	4b11      	ldr	r3, [pc, #68]	; (80009ac <MX_I2C1_Init+0x50>)
 8000968:	4a12      	ldr	r2, [pc, #72]	; (80009b4 <MX_I2C1_Init+0x58>)
 800096a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800096c:	4b0f      	ldr	r3, [pc, #60]	; (80009ac <MX_I2C1_Init+0x50>)
 800096e:	2200      	movs	r2, #0
 8000970:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000972:	4b0e      	ldr	r3, [pc, #56]	; (80009ac <MX_I2C1_Init+0x50>)
 8000974:	2200      	movs	r2, #0
 8000976:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000978:	4b0c      	ldr	r3, [pc, #48]	; (80009ac <MX_I2C1_Init+0x50>)
 800097a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800097e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000980:	4b0a      	ldr	r3, [pc, #40]	; (80009ac <MX_I2C1_Init+0x50>)
 8000982:	2200      	movs	r2, #0
 8000984:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000986:	4b09      	ldr	r3, [pc, #36]	; (80009ac <MX_I2C1_Init+0x50>)
 8000988:	2200      	movs	r2, #0
 800098a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800098c:	4b07      	ldr	r3, [pc, #28]	; (80009ac <MX_I2C1_Init+0x50>)
 800098e:	2200      	movs	r2, #0
 8000990:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000992:	4b06      	ldr	r3, [pc, #24]	; (80009ac <MX_I2C1_Init+0x50>)
 8000994:	2200      	movs	r2, #0
 8000996:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000998:	4804      	ldr	r0, [pc, #16]	; (80009ac <MX_I2C1_Init+0x50>)
 800099a:	f000 fe67 	bl	800166c <HAL_I2C_Init>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80009a4:	f000 f924 	bl	8000bf0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80009a8:	bf00      	nop
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	2000008c 	.word	0x2000008c
 80009b0:	40005400 	.word	0x40005400
 80009b4:	000186a0 	.word	0x000186a0

080009b8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b092      	sub	sp, #72	; 0x48
 80009bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009be:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80009c2:	2200      	movs	r2, #0
 80009c4:	601a      	str	r2, [r3, #0]
 80009c6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009cc:	2200      	movs	r2, #0
 80009ce:	601a      	str	r2, [r3, #0]
 80009d0:	605a      	str	r2, [r3, #4]
 80009d2:	609a      	str	r2, [r3, #8]
 80009d4:	60da      	str	r2, [r3, #12]
 80009d6:	611a      	str	r2, [r3, #16]
 80009d8:	615a      	str	r2, [r3, #20]
 80009da:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80009dc:	1d3b      	adds	r3, r7, #4
 80009de:	2220      	movs	r2, #32
 80009e0:	2100      	movs	r1, #0
 80009e2:	4618      	mov	r0, r3
 80009e4:	f003 f928 	bl	8003c38 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80009e8:	4b33      	ldr	r3, [pc, #204]	; (8000ab8 <MX_TIM1_Init+0x100>)
 80009ea:	4a34      	ldr	r2, [pc, #208]	; (8000abc <MX_TIM1_Init+0x104>)
 80009ec:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80009ee:	4b32      	ldr	r3, [pc, #200]	; (8000ab8 <MX_TIM1_Init+0x100>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009f4:	4b30      	ldr	r3, [pc, #192]	; (8000ab8 <MX_TIM1_Init+0x100>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80009fa:	4b2f      	ldr	r3, [pc, #188]	; (8000ab8 <MX_TIM1_Init+0x100>)
 80009fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a00:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a02:	4b2d      	ldr	r3, [pc, #180]	; (8000ab8 <MX_TIM1_Init+0x100>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a08:	4b2b      	ldr	r3, [pc, #172]	; (8000ab8 <MX_TIM1_Init+0x100>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a0e:	4b2a      	ldr	r3, [pc, #168]	; (8000ab8 <MX_TIM1_Init+0x100>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8000a14:	4828      	ldr	r0, [pc, #160]	; (8000ab8 <MX_TIM1_Init+0x100>)
 8000a16:	f002 f8af 	bl	8002b78 <HAL_TIM_OC_Init>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8000a20:	f000 f8e6 	bl	8000bf0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a24:	2300      	movs	r3, #0
 8000a26:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a2c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000a30:	4619      	mov	r1, r3
 8000a32:	4821      	ldr	r0, [pc, #132]	; (8000ab8 <MX_TIM1_Init+0x100>)
 8000a34:	f002 fd54 	bl	80034e0 <HAL_TIMEx_MasterConfigSynchronization>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d001      	beq.n	8000a42 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8000a3e:	f000 f8d7 	bl	8000bf0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000a42:	2300      	movs	r3, #0
 8000a44:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000a46:	2300      	movs	r3, #0
 8000a48:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a52:	2300      	movs	r3, #0
 8000a54:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a56:	2300      	movs	r3, #0
 8000a58:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a62:	2200      	movs	r2, #0
 8000a64:	4619      	mov	r1, r3
 8000a66:	4814      	ldr	r0, [pc, #80]	; (8000ab8 <MX_TIM1_Init+0x100>)
 8000a68:	f002 f9ea 	bl	8002e40 <HAL_TIM_OC_ConfigChannel>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d001      	beq.n	8000a76 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8000a72:	f000 f8bd 	bl	8000bf0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a76:	2300      	movs	r3, #0
 8000a78:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a82:	2300      	movs	r3, #0
 8000a84:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a86:	2300      	movs	r3, #0
 8000a88:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a8a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a8e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a90:	2300      	movs	r3, #0
 8000a92:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000a94:	1d3b      	adds	r3, r7, #4
 8000a96:	4619      	mov	r1, r3
 8000a98:	4807      	ldr	r0, [pc, #28]	; (8000ab8 <MX_TIM1_Init+0x100>)
 8000a9a:	f002 fd8f 	bl	80035bc <HAL_TIMEx_ConfigBreakDeadTime>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d001      	beq.n	8000aa8 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 8000aa4:	f000 f8a4 	bl	8000bf0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000aa8:	4803      	ldr	r0, [pc, #12]	; (8000ab8 <MX_TIM1_Init+0x100>)
 8000aaa:	f000 f939 	bl	8000d20 <HAL_TIM_MspPostInit>

}
 8000aae:	bf00      	nop
 8000ab0:	3748      	adds	r7, #72	; 0x48
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	200000e0 	.word	0x200000e0
 8000abc:	40010000 	.word	0x40010000

08000ac0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ac4:	4b11      	ldr	r3, [pc, #68]	; (8000b0c <MX_USART2_UART_Init+0x4c>)
 8000ac6:	4a12      	ldr	r2, [pc, #72]	; (8000b10 <MX_USART2_UART_Init+0x50>)
 8000ac8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000aca:	4b10      	ldr	r3, [pc, #64]	; (8000b0c <MX_USART2_UART_Init+0x4c>)
 8000acc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ad0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ad2:	4b0e      	ldr	r3, [pc, #56]	; (8000b0c <MX_USART2_UART_Init+0x4c>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ad8:	4b0c      	ldr	r3, [pc, #48]	; (8000b0c <MX_USART2_UART_Init+0x4c>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ade:	4b0b      	ldr	r3, [pc, #44]	; (8000b0c <MX_USART2_UART_Init+0x4c>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ae4:	4b09      	ldr	r3, [pc, #36]	; (8000b0c <MX_USART2_UART_Init+0x4c>)
 8000ae6:	220c      	movs	r2, #12
 8000ae8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aea:	4b08      	ldr	r3, [pc, #32]	; (8000b0c <MX_USART2_UART_Init+0x4c>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000af0:	4b06      	ldr	r3, [pc, #24]	; (8000b0c <MX_USART2_UART_Init+0x4c>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000af6:	4805      	ldr	r0, [pc, #20]	; (8000b0c <MX_USART2_UART_Init+0x4c>)
 8000af8:	f002 fdb2 	bl	8003660 <HAL_UART_Init>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b02:	f000 f875 	bl	8000bf0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b06:	bf00      	nop
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	20000128 	.word	0x20000128
 8000b10:	40004400 	.word	0x40004400

08000b14 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b08a      	sub	sp, #40	; 0x28
 8000b18:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b1a:	f107 0314 	add.w	r3, r7, #20
 8000b1e:	2200      	movs	r2, #0
 8000b20:	601a      	str	r2, [r3, #0]
 8000b22:	605a      	str	r2, [r3, #4]
 8000b24:	609a      	str	r2, [r3, #8]
 8000b26:	60da      	str	r2, [r3, #12]
 8000b28:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	613b      	str	r3, [r7, #16]
 8000b2e:	4b2d      	ldr	r3, [pc, #180]	; (8000be4 <MX_GPIO_Init+0xd0>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b32:	4a2c      	ldr	r2, [pc, #176]	; (8000be4 <MX_GPIO_Init+0xd0>)
 8000b34:	f043 0304 	orr.w	r3, r3, #4
 8000b38:	6313      	str	r3, [r2, #48]	; 0x30
 8000b3a:	4b2a      	ldr	r3, [pc, #168]	; (8000be4 <MX_GPIO_Init+0xd0>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3e:	f003 0304 	and.w	r3, r3, #4
 8000b42:	613b      	str	r3, [r7, #16]
 8000b44:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b46:	2300      	movs	r3, #0
 8000b48:	60fb      	str	r3, [r7, #12]
 8000b4a:	4b26      	ldr	r3, [pc, #152]	; (8000be4 <MX_GPIO_Init+0xd0>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4e:	4a25      	ldr	r2, [pc, #148]	; (8000be4 <MX_GPIO_Init+0xd0>)
 8000b50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b54:	6313      	str	r3, [r2, #48]	; 0x30
 8000b56:	4b23      	ldr	r3, [pc, #140]	; (8000be4 <MX_GPIO_Init+0xd0>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b5e:	60fb      	str	r3, [r7, #12]
 8000b60:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b62:	2300      	movs	r3, #0
 8000b64:	60bb      	str	r3, [r7, #8]
 8000b66:	4b1f      	ldr	r3, [pc, #124]	; (8000be4 <MX_GPIO_Init+0xd0>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6a:	4a1e      	ldr	r2, [pc, #120]	; (8000be4 <MX_GPIO_Init+0xd0>)
 8000b6c:	f043 0301 	orr.w	r3, r3, #1
 8000b70:	6313      	str	r3, [r2, #48]	; 0x30
 8000b72:	4b1c      	ldr	r3, [pc, #112]	; (8000be4 <MX_GPIO_Init+0xd0>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b76:	f003 0301 	and.w	r3, r3, #1
 8000b7a:	60bb      	str	r3, [r7, #8]
 8000b7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b7e:	2300      	movs	r3, #0
 8000b80:	607b      	str	r3, [r7, #4]
 8000b82:	4b18      	ldr	r3, [pc, #96]	; (8000be4 <MX_GPIO_Init+0xd0>)
 8000b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b86:	4a17      	ldr	r2, [pc, #92]	; (8000be4 <MX_GPIO_Init+0xd0>)
 8000b88:	f043 0302 	orr.w	r3, r3, #2
 8000b8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b8e:	4b15      	ldr	r3, [pc, #84]	; (8000be4 <MX_GPIO_Init+0xd0>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b92:	f003 0302 	and.w	r3, r3, #2
 8000b96:	607b      	str	r3, [r7, #4]
 8000b98:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	2120      	movs	r1, #32
 8000b9e:	4812      	ldr	r0, [pc, #72]	; (8000be8 <MX_GPIO_Init+0xd4>)
 8000ba0:	f000 fd4a 	bl	8001638 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ba4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ba8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000baa:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000bae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000bb4:	f107 0314 	add.w	r3, r7, #20
 8000bb8:	4619      	mov	r1, r3
 8000bba:	480c      	ldr	r0, [pc, #48]	; (8000bec <MX_GPIO_Init+0xd8>)
 8000bbc:	f000 fbb8 	bl	8001330 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000bc0:	2320      	movs	r3, #32
 8000bc2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000bd0:	f107 0314 	add.w	r3, r7, #20
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	4804      	ldr	r0, [pc, #16]	; (8000be8 <MX_GPIO_Init+0xd4>)
 8000bd8:	f000 fbaa 	bl	8001330 <HAL_GPIO_Init>

}
 8000bdc:	bf00      	nop
 8000bde:	3728      	adds	r7, #40	; 0x28
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	40023800 	.word	0x40023800
 8000be8:	40020000 	.word	0x40020000
 8000bec:	40020800 	.word	0x40020800

08000bf0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bf4:	b672      	cpsid	i
}
 8000bf6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bf8:	e7fe      	b.n	8000bf8 <Error_Handler+0x8>
	...

08000bfc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b082      	sub	sp, #8
 8000c00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c02:	2300      	movs	r3, #0
 8000c04:	607b      	str	r3, [r7, #4]
 8000c06:	4b10      	ldr	r3, [pc, #64]	; (8000c48 <HAL_MspInit+0x4c>)
 8000c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c0a:	4a0f      	ldr	r2, [pc, #60]	; (8000c48 <HAL_MspInit+0x4c>)
 8000c0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c10:	6453      	str	r3, [r2, #68]	; 0x44
 8000c12:	4b0d      	ldr	r3, [pc, #52]	; (8000c48 <HAL_MspInit+0x4c>)
 8000c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c1a:	607b      	str	r3, [r7, #4]
 8000c1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c1e:	2300      	movs	r3, #0
 8000c20:	603b      	str	r3, [r7, #0]
 8000c22:	4b09      	ldr	r3, [pc, #36]	; (8000c48 <HAL_MspInit+0x4c>)
 8000c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c26:	4a08      	ldr	r2, [pc, #32]	; (8000c48 <HAL_MspInit+0x4c>)
 8000c28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c2c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c2e:	4b06      	ldr	r3, [pc, #24]	; (8000c48 <HAL_MspInit+0x4c>)
 8000c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c36:	603b      	str	r3, [r7, #0]
 8000c38:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000c3a:	2007      	movs	r0, #7
 8000c3c:	f000 fb44 	bl	80012c8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c40:	bf00      	nop
 8000c42:	3708      	adds	r7, #8
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	40023800 	.word	0x40023800

08000c4c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b08a      	sub	sp, #40	; 0x28
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c54:	f107 0314 	add.w	r3, r7, #20
 8000c58:	2200      	movs	r2, #0
 8000c5a:	601a      	str	r2, [r3, #0]
 8000c5c:	605a      	str	r2, [r3, #4]
 8000c5e:	609a      	str	r2, [r3, #8]
 8000c60:	60da      	str	r2, [r3, #12]
 8000c62:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4a19      	ldr	r2, [pc, #100]	; (8000cd0 <HAL_I2C_MspInit+0x84>)
 8000c6a:	4293      	cmp	r3, r2
 8000c6c:	d12b      	bne.n	8000cc6 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c6e:	2300      	movs	r3, #0
 8000c70:	613b      	str	r3, [r7, #16]
 8000c72:	4b18      	ldr	r3, [pc, #96]	; (8000cd4 <HAL_I2C_MspInit+0x88>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c76:	4a17      	ldr	r2, [pc, #92]	; (8000cd4 <HAL_I2C_MspInit+0x88>)
 8000c78:	f043 0302 	orr.w	r3, r3, #2
 8000c7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c7e:	4b15      	ldr	r3, [pc, #84]	; (8000cd4 <HAL_I2C_MspInit+0x88>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c82:	f003 0302 	and.w	r3, r3, #2
 8000c86:	613b      	str	r3, [r7, #16]
 8000c88:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c8a:	23c0      	movs	r3, #192	; 0xc0
 8000c8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c8e:	2312      	movs	r3, #18
 8000c90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c92:	2300      	movs	r3, #0
 8000c94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c96:	2303      	movs	r3, #3
 8000c98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c9a:	2304      	movs	r3, #4
 8000c9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c9e:	f107 0314 	add.w	r3, r7, #20
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	480c      	ldr	r0, [pc, #48]	; (8000cd8 <HAL_I2C_MspInit+0x8c>)
 8000ca6:	f000 fb43 	bl	8001330 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000caa:	2300      	movs	r3, #0
 8000cac:	60fb      	str	r3, [r7, #12]
 8000cae:	4b09      	ldr	r3, [pc, #36]	; (8000cd4 <HAL_I2C_MspInit+0x88>)
 8000cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb2:	4a08      	ldr	r2, [pc, #32]	; (8000cd4 <HAL_I2C_MspInit+0x88>)
 8000cb4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000cb8:	6413      	str	r3, [r2, #64]	; 0x40
 8000cba:	4b06      	ldr	r3, [pc, #24]	; (8000cd4 <HAL_I2C_MspInit+0x88>)
 8000cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cbe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cc2:	60fb      	str	r3, [r7, #12]
 8000cc4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000cc6:	bf00      	nop
 8000cc8:	3728      	adds	r7, #40	; 0x28
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	40005400 	.word	0x40005400
 8000cd4:	40023800 	.word	0x40023800
 8000cd8:	40020400 	.word	0x40020400

08000cdc <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	b085      	sub	sp, #20
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM1)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4a0b      	ldr	r2, [pc, #44]	; (8000d18 <HAL_TIM_OC_MspInit+0x3c>)
 8000cea:	4293      	cmp	r3, r2
 8000cec:	d10d      	bne.n	8000d0a <HAL_TIM_OC_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000cee:	2300      	movs	r3, #0
 8000cf0:	60fb      	str	r3, [r7, #12]
 8000cf2:	4b0a      	ldr	r3, [pc, #40]	; (8000d1c <HAL_TIM_OC_MspInit+0x40>)
 8000cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cf6:	4a09      	ldr	r2, [pc, #36]	; (8000d1c <HAL_TIM_OC_MspInit+0x40>)
 8000cf8:	f043 0301 	orr.w	r3, r3, #1
 8000cfc:	6453      	str	r3, [r2, #68]	; 0x44
 8000cfe:	4b07      	ldr	r3, [pc, #28]	; (8000d1c <HAL_TIM_OC_MspInit+0x40>)
 8000d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d02:	f003 0301 	and.w	r3, r3, #1
 8000d06:	60fb      	str	r3, [r7, #12]
 8000d08:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000d0a:	bf00      	nop
 8000d0c:	3714      	adds	r7, #20
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop
 8000d18:	40010000 	.word	0x40010000
 8000d1c:	40023800 	.word	0x40023800

08000d20 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b088      	sub	sp, #32
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d28:	f107 030c 	add.w	r3, r7, #12
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	601a      	str	r2, [r3, #0]
 8000d30:	605a      	str	r2, [r3, #4]
 8000d32:	609a      	str	r2, [r3, #8]
 8000d34:	60da      	str	r2, [r3, #12]
 8000d36:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4a12      	ldr	r2, [pc, #72]	; (8000d88 <HAL_TIM_MspPostInit+0x68>)
 8000d3e:	4293      	cmp	r3, r2
 8000d40:	d11e      	bne.n	8000d80 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d42:	2300      	movs	r3, #0
 8000d44:	60bb      	str	r3, [r7, #8]
 8000d46:	4b11      	ldr	r3, [pc, #68]	; (8000d8c <HAL_TIM_MspPostInit+0x6c>)
 8000d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4a:	4a10      	ldr	r2, [pc, #64]	; (8000d8c <HAL_TIM_MspPostInit+0x6c>)
 8000d4c:	f043 0301 	orr.w	r3, r3, #1
 8000d50:	6313      	str	r3, [r2, #48]	; 0x30
 8000d52:	4b0e      	ldr	r3, [pc, #56]	; (8000d8c <HAL_TIM_MspPostInit+0x6c>)
 8000d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d56:	f003 0301 	and.w	r3, r3, #1
 8000d5a:	60bb      	str	r3, [r7, #8]
 8000d5c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000d5e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d62:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d64:	2302      	movs	r3, #2
 8000d66:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000d70:	2301      	movs	r3, #1
 8000d72:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d74:	f107 030c 	add.w	r3, r7, #12
 8000d78:	4619      	mov	r1, r3
 8000d7a:	4805      	ldr	r0, [pc, #20]	; (8000d90 <HAL_TIM_MspPostInit+0x70>)
 8000d7c:	f000 fad8 	bl	8001330 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000d80:	bf00      	nop
 8000d82:	3720      	adds	r7, #32
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	40010000 	.word	0x40010000
 8000d8c:	40023800 	.word	0x40023800
 8000d90:	40020000 	.word	0x40020000

08000d94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b08a      	sub	sp, #40	; 0x28
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d9c:	f107 0314 	add.w	r3, r7, #20
 8000da0:	2200      	movs	r2, #0
 8000da2:	601a      	str	r2, [r3, #0]
 8000da4:	605a      	str	r2, [r3, #4]
 8000da6:	609a      	str	r2, [r3, #8]
 8000da8:	60da      	str	r2, [r3, #12]
 8000daa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a19      	ldr	r2, [pc, #100]	; (8000e18 <HAL_UART_MspInit+0x84>)
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d12b      	bne.n	8000e0e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000db6:	2300      	movs	r3, #0
 8000db8:	613b      	str	r3, [r7, #16]
 8000dba:	4b18      	ldr	r3, [pc, #96]	; (8000e1c <HAL_UART_MspInit+0x88>)
 8000dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dbe:	4a17      	ldr	r2, [pc, #92]	; (8000e1c <HAL_UART_MspInit+0x88>)
 8000dc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dc4:	6413      	str	r3, [r2, #64]	; 0x40
 8000dc6:	4b15      	ldr	r3, [pc, #84]	; (8000e1c <HAL_UART_MspInit+0x88>)
 8000dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dce:	613b      	str	r3, [r7, #16]
 8000dd0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	60fb      	str	r3, [r7, #12]
 8000dd6:	4b11      	ldr	r3, [pc, #68]	; (8000e1c <HAL_UART_MspInit+0x88>)
 8000dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dda:	4a10      	ldr	r2, [pc, #64]	; (8000e1c <HAL_UART_MspInit+0x88>)
 8000ddc:	f043 0301 	orr.w	r3, r3, #1
 8000de0:	6313      	str	r3, [r2, #48]	; 0x30
 8000de2:	4b0e      	ldr	r3, [pc, #56]	; (8000e1c <HAL_UART_MspInit+0x88>)
 8000de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de6:	f003 0301 	and.w	r3, r3, #1
 8000dea:	60fb      	str	r3, [r7, #12]
 8000dec:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000dee:	230c      	movs	r3, #12
 8000df0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df2:	2302      	movs	r3, #2
 8000df4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df6:	2300      	movs	r3, #0
 8000df8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000dfe:	2307      	movs	r3, #7
 8000e00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e02:	f107 0314 	add.w	r3, r7, #20
 8000e06:	4619      	mov	r1, r3
 8000e08:	4805      	ldr	r0, [pc, #20]	; (8000e20 <HAL_UART_MspInit+0x8c>)
 8000e0a:	f000 fa91 	bl	8001330 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e0e:	bf00      	nop
 8000e10:	3728      	adds	r7, #40	; 0x28
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	40004400 	.word	0x40004400
 8000e1c:	40023800 	.word	0x40023800
 8000e20:	40020000 	.word	0x40020000

08000e24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e28:	e7fe      	b.n	8000e28 <NMI_Handler+0x4>

08000e2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e2a:	b480      	push	{r7}
 8000e2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e2e:	e7fe      	b.n	8000e2e <HardFault_Handler+0x4>

08000e30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e34:	e7fe      	b.n	8000e34 <MemManage_Handler+0x4>

08000e36 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e36:	b480      	push	{r7}
 8000e38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e3a:	e7fe      	b.n	8000e3a <BusFault_Handler+0x4>

08000e3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e40:	e7fe      	b.n	8000e40 <UsageFault_Handler+0x4>

08000e42 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e42:	b480      	push	{r7}
 8000e44:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e46:	bf00      	nop
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr

08000e50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e54:	bf00      	nop
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr

08000e5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e5e:	b480      	push	{r7}
 8000e60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e62:	bf00      	nop
 8000e64:	46bd      	mov	sp, r7
 8000e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6a:	4770      	bx	lr

08000e6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e70:	f000 f934 	bl	80010dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e74:	bf00      	nop
 8000e76:	bd80      	pop	{r7, pc}

08000e78 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b086      	sub	sp, #24
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	60f8      	str	r0, [r7, #12]
 8000e80:	60b9      	str	r1, [r7, #8]
 8000e82:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e84:	2300      	movs	r3, #0
 8000e86:	617b      	str	r3, [r7, #20]
 8000e88:	e00a      	b.n	8000ea0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000e8a:	f3af 8000 	nop.w
 8000e8e:	4601      	mov	r1, r0
 8000e90:	68bb      	ldr	r3, [r7, #8]
 8000e92:	1c5a      	adds	r2, r3, #1
 8000e94:	60ba      	str	r2, [r7, #8]
 8000e96:	b2ca      	uxtb	r2, r1
 8000e98:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e9a:	697b      	ldr	r3, [r7, #20]
 8000e9c:	3301      	adds	r3, #1
 8000e9e:	617b      	str	r3, [r7, #20]
 8000ea0:	697a      	ldr	r2, [r7, #20]
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	429a      	cmp	r2, r3
 8000ea6:	dbf0      	blt.n	8000e8a <_read+0x12>
	}

return len;
 8000ea8:	687b      	ldr	r3, [r7, #4]
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	3718      	adds	r7, #24
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}

08000eb2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000eb2:	b580      	push	{r7, lr}
 8000eb4:	b086      	sub	sp, #24
 8000eb6:	af00      	add	r7, sp, #0
 8000eb8:	60f8      	str	r0, [r7, #12]
 8000eba:	60b9      	str	r1, [r7, #8]
 8000ebc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	617b      	str	r3, [r7, #20]
 8000ec2:	e009      	b.n	8000ed8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000ec4:	68bb      	ldr	r3, [r7, #8]
 8000ec6:	1c5a      	adds	r2, r3, #1
 8000ec8:	60ba      	str	r2, [r7, #8]
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	3301      	adds	r3, #1
 8000ed6:	617b      	str	r3, [r7, #20]
 8000ed8:	697a      	ldr	r2, [r7, #20]
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	429a      	cmp	r2, r3
 8000ede:	dbf1      	blt.n	8000ec4 <_write+0x12>
	}
	return len;
 8000ee0:	687b      	ldr	r3, [r7, #4]
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	3718      	adds	r7, #24
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}

08000eea <_close>:

int _close(int file)
{
 8000eea:	b480      	push	{r7}
 8000eec:	b083      	sub	sp, #12
 8000eee:	af00      	add	r7, sp, #0
 8000ef0:	6078      	str	r0, [r7, #4]
	return -1;
 8000ef2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	370c      	adds	r7, #12
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr

08000f02 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f02:	b480      	push	{r7}
 8000f04:	b083      	sub	sp, #12
 8000f06:	af00      	add	r7, sp, #0
 8000f08:	6078      	str	r0, [r7, #4]
 8000f0a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f12:	605a      	str	r2, [r3, #4]
	return 0;
 8000f14:	2300      	movs	r3, #0
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	370c      	adds	r7, #12
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr

08000f22 <_isatty>:

int _isatty(int file)
{
 8000f22:	b480      	push	{r7}
 8000f24:	b083      	sub	sp, #12
 8000f26:	af00      	add	r7, sp, #0
 8000f28:	6078      	str	r0, [r7, #4]
	return 1;
 8000f2a:	2301      	movs	r3, #1
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	370c      	adds	r7, #12
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr

08000f38 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b085      	sub	sp, #20
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	60f8      	str	r0, [r7, #12]
 8000f40:	60b9      	str	r1, [r7, #8]
 8000f42:	607a      	str	r2, [r7, #4]
	return 0;
 8000f44:	2300      	movs	r3, #0
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	3714      	adds	r7, #20
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
	...

08000f54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b086      	sub	sp, #24
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f5c:	4a14      	ldr	r2, [pc, #80]	; (8000fb0 <_sbrk+0x5c>)
 8000f5e:	4b15      	ldr	r3, [pc, #84]	; (8000fb4 <_sbrk+0x60>)
 8000f60:	1ad3      	subs	r3, r2, r3
 8000f62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f68:	4b13      	ldr	r3, [pc, #76]	; (8000fb8 <_sbrk+0x64>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d102      	bne.n	8000f76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f70:	4b11      	ldr	r3, [pc, #68]	; (8000fb8 <_sbrk+0x64>)
 8000f72:	4a12      	ldr	r2, [pc, #72]	; (8000fbc <_sbrk+0x68>)
 8000f74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f76:	4b10      	ldr	r3, [pc, #64]	; (8000fb8 <_sbrk+0x64>)
 8000f78:	681a      	ldr	r2, [r3, #0]
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	4413      	add	r3, r2
 8000f7e:	693a      	ldr	r2, [r7, #16]
 8000f80:	429a      	cmp	r2, r3
 8000f82:	d207      	bcs.n	8000f94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f84:	f002 fe2e 	bl	8003be4 <__errno>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	220c      	movs	r2, #12
 8000f8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f8e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f92:	e009      	b.n	8000fa8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f94:	4b08      	ldr	r3, [pc, #32]	; (8000fb8 <_sbrk+0x64>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f9a:	4b07      	ldr	r3, [pc, #28]	; (8000fb8 <_sbrk+0x64>)
 8000f9c:	681a      	ldr	r2, [r3, #0]
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	4413      	add	r3, r2
 8000fa2:	4a05      	ldr	r2, [pc, #20]	; (8000fb8 <_sbrk+0x64>)
 8000fa4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fa6:	68fb      	ldr	r3, [r7, #12]
}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	3718      	adds	r7, #24
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	20018000 	.word	0x20018000
 8000fb4:	00000400 	.word	0x00000400
 8000fb8:	20000170 	.word	0x20000170
 8000fbc:	20000188 	.word	0x20000188

08000fc0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fc4:	4b06      	ldr	r3, [pc, #24]	; (8000fe0 <SystemInit+0x20>)
 8000fc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fca:	4a05      	ldr	r2, [pc, #20]	; (8000fe0 <SystemInit+0x20>)
 8000fcc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fd0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fd4:	bf00      	nop
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop
 8000fe0:	e000ed00 	.word	0xe000ed00

08000fe4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000fe4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800101c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fe8:	480d      	ldr	r0, [pc, #52]	; (8001020 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000fea:	490e      	ldr	r1, [pc, #56]	; (8001024 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000fec:	4a0e      	ldr	r2, [pc, #56]	; (8001028 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000fee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ff0:	e002      	b.n	8000ff8 <LoopCopyDataInit>

08000ff2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ff2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ff4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ff6:	3304      	adds	r3, #4

08000ff8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ff8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ffa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ffc:	d3f9      	bcc.n	8000ff2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ffe:	4a0b      	ldr	r2, [pc, #44]	; (800102c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001000:	4c0b      	ldr	r4, [pc, #44]	; (8001030 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001002:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001004:	e001      	b.n	800100a <LoopFillZerobss>

08001006 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001006:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001008:	3204      	adds	r2, #4

0800100a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800100a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800100c:	d3fb      	bcc.n	8001006 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800100e:	f7ff ffd7 	bl	8000fc0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001012:	f002 fded 	bl	8003bf0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001016:	f7ff fc1d 	bl	8000854 <main>
  bx  lr    
 800101a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800101c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001020:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001024:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001028:	08004c5c 	.word	0x08004c5c
  ldr r2, =_sbss
 800102c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001030:	20000188 	.word	0x20000188

08001034 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001034:	e7fe      	b.n	8001034 <ADC_IRQHandler>
	...

08001038 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800103c:	4b0e      	ldr	r3, [pc, #56]	; (8001078 <HAL_Init+0x40>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a0d      	ldr	r2, [pc, #52]	; (8001078 <HAL_Init+0x40>)
 8001042:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001046:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001048:	4b0b      	ldr	r3, [pc, #44]	; (8001078 <HAL_Init+0x40>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a0a      	ldr	r2, [pc, #40]	; (8001078 <HAL_Init+0x40>)
 800104e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001052:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001054:	4b08      	ldr	r3, [pc, #32]	; (8001078 <HAL_Init+0x40>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a07      	ldr	r2, [pc, #28]	; (8001078 <HAL_Init+0x40>)
 800105a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800105e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001060:	2003      	movs	r0, #3
 8001062:	f000 f931 	bl	80012c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001066:	2000      	movs	r0, #0
 8001068:	f000 f808 	bl	800107c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800106c:	f7ff fdc6 	bl	8000bfc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001070:	2300      	movs	r3, #0
}
 8001072:	4618      	mov	r0, r3
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	40023c00 	.word	0x40023c00

0800107c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001084:	4b12      	ldr	r3, [pc, #72]	; (80010d0 <HAL_InitTick+0x54>)
 8001086:	681a      	ldr	r2, [r3, #0]
 8001088:	4b12      	ldr	r3, [pc, #72]	; (80010d4 <HAL_InitTick+0x58>)
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	4619      	mov	r1, r3
 800108e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001092:	fbb3 f3f1 	udiv	r3, r3, r1
 8001096:	fbb2 f3f3 	udiv	r3, r2, r3
 800109a:	4618      	mov	r0, r3
 800109c:	f000 f93b 	bl	8001316 <HAL_SYSTICK_Config>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010a6:	2301      	movs	r3, #1
 80010a8:	e00e      	b.n	80010c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2b0f      	cmp	r3, #15
 80010ae:	d80a      	bhi.n	80010c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010b0:	2200      	movs	r2, #0
 80010b2:	6879      	ldr	r1, [r7, #4]
 80010b4:	f04f 30ff 	mov.w	r0, #4294967295
 80010b8:	f000 f911 	bl	80012de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010bc:	4a06      	ldr	r2, [pc, #24]	; (80010d8 <HAL_InitTick+0x5c>)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010c2:	2300      	movs	r3, #0
 80010c4:	e000      	b.n	80010c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010c6:	2301      	movs	r3, #1
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	3708      	adds	r7, #8
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	20000000 	.word	0x20000000
 80010d4:	20000008 	.word	0x20000008
 80010d8:	20000004 	.word	0x20000004

080010dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010e0:	4b06      	ldr	r3, [pc, #24]	; (80010fc <HAL_IncTick+0x20>)
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	461a      	mov	r2, r3
 80010e6:	4b06      	ldr	r3, [pc, #24]	; (8001100 <HAL_IncTick+0x24>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4413      	add	r3, r2
 80010ec:	4a04      	ldr	r2, [pc, #16]	; (8001100 <HAL_IncTick+0x24>)
 80010ee:	6013      	str	r3, [r2, #0]
}
 80010f0:	bf00      	nop
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop
 80010fc:	20000008 	.word	0x20000008
 8001100:	20000174 	.word	0x20000174

08001104 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
  return uwTick;
 8001108:	4b03      	ldr	r3, [pc, #12]	; (8001118 <HAL_GetTick+0x14>)
 800110a:	681b      	ldr	r3, [r3, #0]
}
 800110c:	4618      	mov	r0, r3
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	20000174 	.word	0x20000174

0800111c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b084      	sub	sp, #16
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001124:	f7ff ffee 	bl	8001104 <HAL_GetTick>
 8001128:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001134:	d005      	beq.n	8001142 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001136:	4b0a      	ldr	r3, [pc, #40]	; (8001160 <HAL_Delay+0x44>)
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	461a      	mov	r2, r3
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	4413      	add	r3, r2
 8001140:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001142:	bf00      	nop
 8001144:	f7ff ffde 	bl	8001104 <HAL_GetTick>
 8001148:	4602      	mov	r2, r0
 800114a:	68bb      	ldr	r3, [r7, #8]
 800114c:	1ad3      	subs	r3, r2, r3
 800114e:	68fa      	ldr	r2, [r7, #12]
 8001150:	429a      	cmp	r2, r3
 8001152:	d8f7      	bhi.n	8001144 <HAL_Delay+0x28>
  {
  }
}
 8001154:	bf00      	nop
 8001156:	bf00      	nop
 8001158:	3710      	adds	r7, #16
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	20000008 	.word	0x20000008

08001164 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001164:	b480      	push	{r7}
 8001166:	b085      	sub	sp, #20
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	f003 0307 	and.w	r3, r3, #7
 8001172:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001174:	4b0c      	ldr	r3, [pc, #48]	; (80011a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001176:	68db      	ldr	r3, [r3, #12]
 8001178:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800117a:	68ba      	ldr	r2, [r7, #8]
 800117c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001180:	4013      	ands	r3, r2
 8001182:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001188:	68bb      	ldr	r3, [r7, #8]
 800118a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800118c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001190:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001194:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001196:	4a04      	ldr	r2, [pc, #16]	; (80011a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001198:	68bb      	ldr	r3, [r7, #8]
 800119a:	60d3      	str	r3, [r2, #12]
}
 800119c:	bf00      	nop
 800119e:	3714      	adds	r7, #20
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr
 80011a8:	e000ed00 	.word	0xe000ed00

080011ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011b0:	4b04      	ldr	r3, [pc, #16]	; (80011c4 <__NVIC_GetPriorityGrouping+0x18>)
 80011b2:	68db      	ldr	r3, [r3, #12]
 80011b4:	0a1b      	lsrs	r3, r3, #8
 80011b6:	f003 0307 	and.w	r3, r3, #7
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr
 80011c4:	e000ed00 	.word	0xe000ed00

080011c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	4603      	mov	r3, r0
 80011d0:	6039      	str	r1, [r7, #0]
 80011d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	db0a      	blt.n	80011f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	b2da      	uxtb	r2, r3
 80011e0:	490c      	ldr	r1, [pc, #48]	; (8001214 <__NVIC_SetPriority+0x4c>)
 80011e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e6:	0112      	lsls	r2, r2, #4
 80011e8:	b2d2      	uxtb	r2, r2
 80011ea:	440b      	add	r3, r1
 80011ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011f0:	e00a      	b.n	8001208 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	b2da      	uxtb	r2, r3
 80011f6:	4908      	ldr	r1, [pc, #32]	; (8001218 <__NVIC_SetPriority+0x50>)
 80011f8:	79fb      	ldrb	r3, [r7, #7]
 80011fa:	f003 030f 	and.w	r3, r3, #15
 80011fe:	3b04      	subs	r3, #4
 8001200:	0112      	lsls	r2, r2, #4
 8001202:	b2d2      	uxtb	r2, r2
 8001204:	440b      	add	r3, r1
 8001206:	761a      	strb	r2, [r3, #24]
}
 8001208:	bf00      	nop
 800120a:	370c      	adds	r7, #12
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr
 8001214:	e000e100 	.word	0xe000e100
 8001218:	e000ed00 	.word	0xe000ed00

0800121c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800121c:	b480      	push	{r7}
 800121e:	b089      	sub	sp, #36	; 0x24
 8001220:	af00      	add	r7, sp, #0
 8001222:	60f8      	str	r0, [r7, #12]
 8001224:	60b9      	str	r1, [r7, #8]
 8001226:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	f003 0307 	and.w	r3, r3, #7
 800122e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001230:	69fb      	ldr	r3, [r7, #28]
 8001232:	f1c3 0307 	rsb	r3, r3, #7
 8001236:	2b04      	cmp	r3, #4
 8001238:	bf28      	it	cs
 800123a:	2304      	movcs	r3, #4
 800123c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800123e:	69fb      	ldr	r3, [r7, #28]
 8001240:	3304      	adds	r3, #4
 8001242:	2b06      	cmp	r3, #6
 8001244:	d902      	bls.n	800124c <NVIC_EncodePriority+0x30>
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	3b03      	subs	r3, #3
 800124a:	e000      	b.n	800124e <NVIC_EncodePriority+0x32>
 800124c:	2300      	movs	r3, #0
 800124e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001250:	f04f 32ff 	mov.w	r2, #4294967295
 8001254:	69bb      	ldr	r3, [r7, #24]
 8001256:	fa02 f303 	lsl.w	r3, r2, r3
 800125a:	43da      	mvns	r2, r3
 800125c:	68bb      	ldr	r3, [r7, #8]
 800125e:	401a      	ands	r2, r3
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001264:	f04f 31ff 	mov.w	r1, #4294967295
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	fa01 f303 	lsl.w	r3, r1, r3
 800126e:	43d9      	mvns	r1, r3
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001274:	4313      	orrs	r3, r2
         );
}
 8001276:	4618      	mov	r0, r3
 8001278:	3724      	adds	r7, #36	; 0x24
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr
	...

08001284 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	3b01      	subs	r3, #1
 8001290:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001294:	d301      	bcc.n	800129a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001296:	2301      	movs	r3, #1
 8001298:	e00f      	b.n	80012ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800129a:	4a0a      	ldr	r2, [pc, #40]	; (80012c4 <SysTick_Config+0x40>)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	3b01      	subs	r3, #1
 80012a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012a2:	210f      	movs	r1, #15
 80012a4:	f04f 30ff 	mov.w	r0, #4294967295
 80012a8:	f7ff ff8e 	bl	80011c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012ac:	4b05      	ldr	r3, [pc, #20]	; (80012c4 <SysTick_Config+0x40>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012b2:	4b04      	ldr	r3, [pc, #16]	; (80012c4 <SysTick_Config+0x40>)
 80012b4:	2207      	movs	r2, #7
 80012b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012b8:	2300      	movs	r3, #0
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	3708      	adds	r7, #8
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	e000e010 	.word	0xe000e010

080012c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012d0:	6878      	ldr	r0, [r7, #4]
 80012d2:	f7ff ff47 	bl	8001164 <__NVIC_SetPriorityGrouping>
}
 80012d6:	bf00      	nop
 80012d8:	3708      	adds	r7, #8
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}

080012de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012de:	b580      	push	{r7, lr}
 80012e0:	b086      	sub	sp, #24
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	4603      	mov	r3, r0
 80012e6:	60b9      	str	r1, [r7, #8]
 80012e8:	607a      	str	r2, [r7, #4]
 80012ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012ec:	2300      	movs	r3, #0
 80012ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012f0:	f7ff ff5c 	bl	80011ac <__NVIC_GetPriorityGrouping>
 80012f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012f6:	687a      	ldr	r2, [r7, #4]
 80012f8:	68b9      	ldr	r1, [r7, #8]
 80012fa:	6978      	ldr	r0, [r7, #20]
 80012fc:	f7ff ff8e 	bl	800121c <NVIC_EncodePriority>
 8001300:	4602      	mov	r2, r0
 8001302:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001306:	4611      	mov	r1, r2
 8001308:	4618      	mov	r0, r3
 800130a:	f7ff ff5d 	bl	80011c8 <__NVIC_SetPriority>
}
 800130e:	bf00      	nop
 8001310:	3718      	adds	r7, #24
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}

08001316 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001316:	b580      	push	{r7, lr}
 8001318:	b082      	sub	sp, #8
 800131a:	af00      	add	r7, sp, #0
 800131c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800131e:	6878      	ldr	r0, [r7, #4]
 8001320:	f7ff ffb0 	bl	8001284 <SysTick_Config>
 8001324:	4603      	mov	r3, r0
}
 8001326:	4618      	mov	r0, r3
 8001328:	3708      	adds	r7, #8
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
	...

08001330 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001330:	b480      	push	{r7}
 8001332:	b089      	sub	sp, #36	; 0x24
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
 8001338:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800133a:	2300      	movs	r3, #0
 800133c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800133e:	2300      	movs	r3, #0
 8001340:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001342:	2300      	movs	r3, #0
 8001344:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001346:	2300      	movs	r3, #0
 8001348:	61fb      	str	r3, [r7, #28]
 800134a:	e159      	b.n	8001600 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800134c:	2201      	movs	r2, #1
 800134e:	69fb      	ldr	r3, [r7, #28]
 8001350:	fa02 f303 	lsl.w	r3, r2, r3
 8001354:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	697a      	ldr	r2, [r7, #20]
 800135c:	4013      	ands	r3, r2
 800135e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001360:	693a      	ldr	r2, [r7, #16]
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	429a      	cmp	r2, r3
 8001366:	f040 8148 	bne.w	80015fa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	f003 0303 	and.w	r3, r3, #3
 8001372:	2b01      	cmp	r3, #1
 8001374:	d005      	beq.n	8001382 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800137e:	2b02      	cmp	r3, #2
 8001380:	d130      	bne.n	80013e4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	689b      	ldr	r3, [r3, #8]
 8001386:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001388:	69fb      	ldr	r3, [r7, #28]
 800138a:	005b      	lsls	r3, r3, #1
 800138c:	2203      	movs	r2, #3
 800138e:	fa02 f303 	lsl.w	r3, r2, r3
 8001392:	43db      	mvns	r3, r3
 8001394:	69ba      	ldr	r2, [r7, #24]
 8001396:	4013      	ands	r3, r2
 8001398:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	68da      	ldr	r2, [r3, #12]
 800139e:	69fb      	ldr	r3, [r7, #28]
 80013a0:	005b      	lsls	r3, r3, #1
 80013a2:	fa02 f303 	lsl.w	r3, r2, r3
 80013a6:	69ba      	ldr	r2, [r7, #24]
 80013a8:	4313      	orrs	r3, r2
 80013aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	69ba      	ldr	r2, [r7, #24]
 80013b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013b8:	2201      	movs	r2, #1
 80013ba:	69fb      	ldr	r3, [r7, #28]
 80013bc:	fa02 f303 	lsl.w	r3, r2, r3
 80013c0:	43db      	mvns	r3, r3
 80013c2:	69ba      	ldr	r2, [r7, #24]
 80013c4:	4013      	ands	r3, r2
 80013c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	091b      	lsrs	r3, r3, #4
 80013ce:	f003 0201 	and.w	r2, r3, #1
 80013d2:	69fb      	ldr	r3, [r7, #28]
 80013d4:	fa02 f303 	lsl.w	r3, r2, r3
 80013d8:	69ba      	ldr	r2, [r7, #24]
 80013da:	4313      	orrs	r3, r2
 80013dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	69ba      	ldr	r2, [r7, #24]
 80013e2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	f003 0303 	and.w	r3, r3, #3
 80013ec:	2b03      	cmp	r3, #3
 80013ee:	d017      	beq.n	8001420 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	68db      	ldr	r3, [r3, #12]
 80013f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80013f6:	69fb      	ldr	r3, [r7, #28]
 80013f8:	005b      	lsls	r3, r3, #1
 80013fa:	2203      	movs	r2, #3
 80013fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001400:	43db      	mvns	r3, r3
 8001402:	69ba      	ldr	r2, [r7, #24]
 8001404:	4013      	ands	r3, r2
 8001406:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	689a      	ldr	r2, [r3, #8]
 800140c:	69fb      	ldr	r3, [r7, #28]
 800140e:	005b      	lsls	r3, r3, #1
 8001410:	fa02 f303 	lsl.w	r3, r2, r3
 8001414:	69ba      	ldr	r2, [r7, #24]
 8001416:	4313      	orrs	r3, r2
 8001418:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	69ba      	ldr	r2, [r7, #24]
 800141e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	f003 0303 	and.w	r3, r3, #3
 8001428:	2b02      	cmp	r3, #2
 800142a:	d123      	bne.n	8001474 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800142c:	69fb      	ldr	r3, [r7, #28]
 800142e:	08da      	lsrs	r2, r3, #3
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	3208      	adds	r2, #8
 8001434:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001438:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800143a:	69fb      	ldr	r3, [r7, #28]
 800143c:	f003 0307 	and.w	r3, r3, #7
 8001440:	009b      	lsls	r3, r3, #2
 8001442:	220f      	movs	r2, #15
 8001444:	fa02 f303 	lsl.w	r3, r2, r3
 8001448:	43db      	mvns	r3, r3
 800144a:	69ba      	ldr	r2, [r7, #24]
 800144c:	4013      	ands	r3, r2
 800144e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	691a      	ldr	r2, [r3, #16]
 8001454:	69fb      	ldr	r3, [r7, #28]
 8001456:	f003 0307 	and.w	r3, r3, #7
 800145a:	009b      	lsls	r3, r3, #2
 800145c:	fa02 f303 	lsl.w	r3, r2, r3
 8001460:	69ba      	ldr	r2, [r7, #24]
 8001462:	4313      	orrs	r3, r2
 8001464:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001466:	69fb      	ldr	r3, [r7, #28]
 8001468:	08da      	lsrs	r2, r3, #3
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	3208      	adds	r2, #8
 800146e:	69b9      	ldr	r1, [r7, #24]
 8001470:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800147a:	69fb      	ldr	r3, [r7, #28]
 800147c:	005b      	lsls	r3, r3, #1
 800147e:	2203      	movs	r2, #3
 8001480:	fa02 f303 	lsl.w	r3, r2, r3
 8001484:	43db      	mvns	r3, r3
 8001486:	69ba      	ldr	r2, [r7, #24]
 8001488:	4013      	ands	r3, r2
 800148a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	f003 0203 	and.w	r2, r3, #3
 8001494:	69fb      	ldr	r3, [r7, #28]
 8001496:	005b      	lsls	r3, r3, #1
 8001498:	fa02 f303 	lsl.w	r3, r2, r3
 800149c:	69ba      	ldr	r2, [r7, #24]
 800149e:	4313      	orrs	r3, r2
 80014a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	69ba      	ldr	r2, [r7, #24]
 80014a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	f000 80a2 	beq.w	80015fa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014b6:	2300      	movs	r3, #0
 80014b8:	60fb      	str	r3, [r7, #12]
 80014ba:	4b57      	ldr	r3, [pc, #348]	; (8001618 <HAL_GPIO_Init+0x2e8>)
 80014bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014be:	4a56      	ldr	r2, [pc, #344]	; (8001618 <HAL_GPIO_Init+0x2e8>)
 80014c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014c4:	6453      	str	r3, [r2, #68]	; 0x44
 80014c6:	4b54      	ldr	r3, [pc, #336]	; (8001618 <HAL_GPIO_Init+0x2e8>)
 80014c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014ce:	60fb      	str	r3, [r7, #12]
 80014d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80014d2:	4a52      	ldr	r2, [pc, #328]	; (800161c <HAL_GPIO_Init+0x2ec>)
 80014d4:	69fb      	ldr	r3, [r7, #28]
 80014d6:	089b      	lsrs	r3, r3, #2
 80014d8:	3302      	adds	r3, #2
 80014da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80014e0:	69fb      	ldr	r3, [r7, #28]
 80014e2:	f003 0303 	and.w	r3, r3, #3
 80014e6:	009b      	lsls	r3, r3, #2
 80014e8:	220f      	movs	r2, #15
 80014ea:	fa02 f303 	lsl.w	r3, r2, r3
 80014ee:	43db      	mvns	r3, r3
 80014f0:	69ba      	ldr	r2, [r7, #24]
 80014f2:	4013      	ands	r3, r2
 80014f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	4a49      	ldr	r2, [pc, #292]	; (8001620 <HAL_GPIO_Init+0x2f0>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d019      	beq.n	8001532 <HAL_GPIO_Init+0x202>
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	4a48      	ldr	r2, [pc, #288]	; (8001624 <HAL_GPIO_Init+0x2f4>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d013      	beq.n	800152e <HAL_GPIO_Init+0x1fe>
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	4a47      	ldr	r2, [pc, #284]	; (8001628 <HAL_GPIO_Init+0x2f8>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d00d      	beq.n	800152a <HAL_GPIO_Init+0x1fa>
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	4a46      	ldr	r2, [pc, #280]	; (800162c <HAL_GPIO_Init+0x2fc>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d007      	beq.n	8001526 <HAL_GPIO_Init+0x1f6>
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	4a45      	ldr	r2, [pc, #276]	; (8001630 <HAL_GPIO_Init+0x300>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d101      	bne.n	8001522 <HAL_GPIO_Init+0x1f2>
 800151e:	2304      	movs	r3, #4
 8001520:	e008      	b.n	8001534 <HAL_GPIO_Init+0x204>
 8001522:	2307      	movs	r3, #7
 8001524:	e006      	b.n	8001534 <HAL_GPIO_Init+0x204>
 8001526:	2303      	movs	r3, #3
 8001528:	e004      	b.n	8001534 <HAL_GPIO_Init+0x204>
 800152a:	2302      	movs	r3, #2
 800152c:	e002      	b.n	8001534 <HAL_GPIO_Init+0x204>
 800152e:	2301      	movs	r3, #1
 8001530:	e000      	b.n	8001534 <HAL_GPIO_Init+0x204>
 8001532:	2300      	movs	r3, #0
 8001534:	69fa      	ldr	r2, [r7, #28]
 8001536:	f002 0203 	and.w	r2, r2, #3
 800153a:	0092      	lsls	r2, r2, #2
 800153c:	4093      	lsls	r3, r2
 800153e:	69ba      	ldr	r2, [r7, #24]
 8001540:	4313      	orrs	r3, r2
 8001542:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001544:	4935      	ldr	r1, [pc, #212]	; (800161c <HAL_GPIO_Init+0x2ec>)
 8001546:	69fb      	ldr	r3, [r7, #28]
 8001548:	089b      	lsrs	r3, r3, #2
 800154a:	3302      	adds	r3, #2
 800154c:	69ba      	ldr	r2, [r7, #24]
 800154e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001552:	4b38      	ldr	r3, [pc, #224]	; (8001634 <HAL_GPIO_Init+0x304>)
 8001554:	689b      	ldr	r3, [r3, #8]
 8001556:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001558:	693b      	ldr	r3, [r7, #16]
 800155a:	43db      	mvns	r3, r3
 800155c:	69ba      	ldr	r2, [r7, #24]
 800155e:	4013      	ands	r3, r2
 8001560:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800156a:	2b00      	cmp	r3, #0
 800156c:	d003      	beq.n	8001576 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800156e:	69ba      	ldr	r2, [r7, #24]
 8001570:	693b      	ldr	r3, [r7, #16]
 8001572:	4313      	orrs	r3, r2
 8001574:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001576:	4a2f      	ldr	r2, [pc, #188]	; (8001634 <HAL_GPIO_Init+0x304>)
 8001578:	69bb      	ldr	r3, [r7, #24]
 800157a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800157c:	4b2d      	ldr	r3, [pc, #180]	; (8001634 <HAL_GPIO_Init+0x304>)
 800157e:	68db      	ldr	r3, [r3, #12]
 8001580:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	43db      	mvns	r3, r3
 8001586:	69ba      	ldr	r2, [r7, #24]
 8001588:	4013      	ands	r3, r2
 800158a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001594:	2b00      	cmp	r3, #0
 8001596:	d003      	beq.n	80015a0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001598:	69ba      	ldr	r2, [r7, #24]
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	4313      	orrs	r3, r2
 800159e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80015a0:	4a24      	ldr	r2, [pc, #144]	; (8001634 <HAL_GPIO_Init+0x304>)
 80015a2:	69bb      	ldr	r3, [r7, #24]
 80015a4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80015a6:	4b23      	ldr	r3, [pc, #140]	; (8001634 <HAL_GPIO_Init+0x304>)
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015ac:	693b      	ldr	r3, [r7, #16]
 80015ae:	43db      	mvns	r3, r3
 80015b0:	69ba      	ldr	r2, [r7, #24]
 80015b2:	4013      	ands	r3, r2
 80015b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d003      	beq.n	80015ca <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80015c2:	69ba      	ldr	r2, [r7, #24]
 80015c4:	693b      	ldr	r3, [r7, #16]
 80015c6:	4313      	orrs	r3, r2
 80015c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80015ca:	4a1a      	ldr	r2, [pc, #104]	; (8001634 <HAL_GPIO_Init+0x304>)
 80015cc:	69bb      	ldr	r3, [r7, #24]
 80015ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015d0:	4b18      	ldr	r3, [pc, #96]	; (8001634 <HAL_GPIO_Init+0x304>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015d6:	693b      	ldr	r3, [r7, #16]
 80015d8:	43db      	mvns	r3, r3
 80015da:	69ba      	ldr	r2, [r7, #24]
 80015dc:	4013      	ands	r3, r2
 80015de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d003      	beq.n	80015f4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80015ec:	69ba      	ldr	r2, [r7, #24]
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	4313      	orrs	r3, r2
 80015f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80015f4:	4a0f      	ldr	r2, [pc, #60]	; (8001634 <HAL_GPIO_Init+0x304>)
 80015f6:	69bb      	ldr	r3, [r7, #24]
 80015f8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	3301      	adds	r3, #1
 80015fe:	61fb      	str	r3, [r7, #28]
 8001600:	69fb      	ldr	r3, [r7, #28]
 8001602:	2b0f      	cmp	r3, #15
 8001604:	f67f aea2 	bls.w	800134c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001608:	bf00      	nop
 800160a:	bf00      	nop
 800160c:	3724      	adds	r7, #36	; 0x24
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr
 8001616:	bf00      	nop
 8001618:	40023800 	.word	0x40023800
 800161c:	40013800 	.word	0x40013800
 8001620:	40020000 	.word	0x40020000
 8001624:	40020400 	.word	0x40020400
 8001628:	40020800 	.word	0x40020800
 800162c:	40020c00 	.word	0x40020c00
 8001630:	40021000 	.word	0x40021000
 8001634:	40013c00 	.word	0x40013c00

08001638 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001638:	b480      	push	{r7}
 800163a:	b083      	sub	sp, #12
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
 8001640:	460b      	mov	r3, r1
 8001642:	807b      	strh	r3, [r7, #2]
 8001644:	4613      	mov	r3, r2
 8001646:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001648:	787b      	ldrb	r3, [r7, #1]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d003      	beq.n	8001656 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800164e:	887a      	ldrh	r2, [r7, #2]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001654:	e003      	b.n	800165e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001656:	887b      	ldrh	r3, [r7, #2]
 8001658:	041a      	lsls	r2, r3, #16
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	619a      	str	r2, [r3, #24]
}
 800165e:	bf00      	nop
 8001660:	370c      	adds	r7, #12
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr
	...

0800166c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b084      	sub	sp, #16
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d101      	bne.n	800167e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800167a:	2301      	movs	r3, #1
 800167c:	e12b      	b.n	80018d6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001684:	b2db      	uxtb	r3, r3
 8001686:	2b00      	cmp	r3, #0
 8001688:	d106      	bne.n	8001698 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2200      	movs	r2, #0
 800168e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001692:	6878      	ldr	r0, [r7, #4]
 8001694:	f7ff fada 	bl	8000c4c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2224      	movs	r2, #36	; 0x24
 800169c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	681a      	ldr	r2, [r3, #0]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f022 0201 	bic.w	r2, r2, #1
 80016ae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	681a      	ldr	r2, [r3, #0]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80016be:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	681a      	ldr	r2, [r3, #0]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80016ce:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80016d0:	f001 fa2a 	bl	8002b28 <HAL_RCC_GetPCLK1Freq>
 80016d4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	4a81      	ldr	r2, [pc, #516]	; (80018e0 <HAL_I2C_Init+0x274>)
 80016dc:	4293      	cmp	r3, r2
 80016de:	d807      	bhi.n	80016f0 <HAL_I2C_Init+0x84>
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	4a80      	ldr	r2, [pc, #512]	; (80018e4 <HAL_I2C_Init+0x278>)
 80016e4:	4293      	cmp	r3, r2
 80016e6:	bf94      	ite	ls
 80016e8:	2301      	movls	r3, #1
 80016ea:	2300      	movhi	r3, #0
 80016ec:	b2db      	uxtb	r3, r3
 80016ee:	e006      	b.n	80016fe <HAL_I2C_Init+0x92>
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	4a7d      	ldr	r2, [pc, #500]	; (80018e8 <HAL_I2C_Init+0x27c>)
 80016f4:	4293      	cmp	r3, r2
 80016f6:	bf94      	ite	ls
 80016f8:	2301      	movls	r3, #1
 80016fa:	2300      	movhi	r3, #0
 80016fc:	b2db      	uxtb	r3, r3
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d001      	beq.n	8001706 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001702:	2301      	movs	r3, #1
 8001704:	e0e7      	b.n	80018d6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	4a78      	ldr	r2, [pc, #480]	; (80018ec <HAL_I2C_Init+0x280>)
 800170a:	fba2 2303 	umull	r2, r3, r2, r3
 800170e:	0c9b      	lsrs	r3, r3, #18
 8001710:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	68ba      	ldr	r2, [r7, #8]
 8001722:	430a      	orrs	r2, r1
 8001724:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	6a1b      	ldr	r3, [r3, #32]
 800172c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	4a6a      	ldr	r2, [pc, #424]	; (80018e0 <HAL_I2C_Init+0x274>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d802      	bhi.n	8001740 <HAL_I2C_Init+0xd4>
 800173a:	68bb      	ldr	r3, [r7, #8]
 800173c:	3301      	adds	r3, #1
 800173e:	e009      	b.n	8001754 <HAL_I2C_Init+0xe8>
 8001740:	68bb      	ldr	r3, [r7, #8]
 8001742:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001746:	fb02 f303 	mul.w	r3, r2, r3
 800174a:	4a69      	ldr	r2, [pc, #420]	; (80018f0 <HAL_I2C_Init+0x284>)
 800174c:	fba2 2303 	umull	r2, r3, r2, r3
 8001750:	099b      	lsrs	r3, r3, #6
 8001752:	3301      	adds	r3, #1
 8001754:	687a      	ldr	r2, [r7, #4]
 8001756:	6812      	ldr	r2, [r2, #0]
 8001758:	430b      	orrs	r3, r1
 800175a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	69db      	ldr	r3, [r3, #28]
 8001762:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001766:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	495c      	ldr	r1, [pc, #368]	; (80018e0 <HAL_I2C_Init+0x274>)
 8001770:	428b      	cmp	r3, r1
 8001772:	d819      	bhi.n	80017a8 <HAL_I2C_Init+0x13c>
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	1e59      	subs	r1, r3, #1
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	005b      	lsls	r3, r3, #1
 800177e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001782:	1c59      	adds	r1, r3, #1
 8001784:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001788:	400b      	ands	r3, r1
 800178a:	2b00      	cmp	r3, #0
 800178c:	d00a      	beq.n	80017a4 <HAL_I2C_Init+0x138>
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	1e59      	subs	r1, r3, #1
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	005b      	lsls	r3, r3, #1
 8001798:	fbb1 f3f3 	udiv	r3, r1, r3
 800179c:	3301      	adds	r3, #1
 800179e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017a2:	e051      	b.n	8001848 <HAL_I2C_Init+0x1dc>
 80017a4:	2304      	movs	r3, #4
 80017a6:	e04f      	b.n	8001848 <HAL_I2C_Init+0x1dc>
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	689b      	ldr	r3, [r3, #8]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d111      	bne.n	80017d4 <HAL_I2C_Init+0x168>
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	1e58      	subs	r0, r3, #1
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6859      	ldr	r1, [r3, #4]
 80017b8:	460b      	mov	r3, r1
 80017ba:	005b      	lsls	r3, r3, #1
 80017bc:	440b      	add	r3, r1
 80017be:	fbb0 f3f3 	udiv	r3, r0, r3
 80017c2:	3301      	adds	r3, #1
 80017c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	bf0c      	ite	eq
 80017cc:	2301      	moveq	r3, #1
 80017ce:	2300      	movne	r3, #0
 80017d0:	b2db      	uxtb	r3, r3
 80017d2:	e012      	b.n	80017fa <HAL_I2C_Init+0x18e>
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	1e58      	subs	r0, r3, #1
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6859      	ldr	r1, [r3, #4]
 80017dc:	460b      	mov	r3, r1
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	440b      	add	r3, r1
 80017e2:	0099      	lsls	r1, r3, #2
 80017e4:	440b      	add	r3, r1
 80017e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80017ea:	3301      	adds	r3, #1
 80017ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	bf0c      	ite	eq
 80017f4:	2301      	moveq	r3, #1
 80017f6:	2300      	movne	r3, #0
 80017f8:	b2db      	uxtb	r3, r3
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d001      	beq.n	8001802 <HAL_I2C_Init+0x196>
 80017fe:	2301      	movs	r3, #1
 8001800:	e022      	b.n	8001848 <HAL_I2C_Init+0x1dc>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d10e      	bne.n	8001828 <HAL_I2C_Init+0x1bc>
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	1e58      	subs	r0, r3, #1
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6859      	ldr	r1, [r3, #4]
 8001812:	460b      	mov	r3, r1
 8001814:	005b      	lsls	r3, r3, #1
 8001816:	440b      	add	r3, r1
 8001818:	fbb0 f3f3 	udiv	r3, r0, r3
 800181c:	3301      	adds	r3, #1
 800181e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001822:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001826:	e00f      	b.n	8001848 <HAL_I2C_Init+0x1dc>
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	1e58      	subs	r0, r3, #1
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6859      	ldr	r1, [r3, #4]
 8001830:	460b      	mov	r3, r1
 8001832:	009b      	lsls	r3, r3, #2
 8001834:	440b      	add	r3, r1
 8001836:	0099      	lsls	r1, r3, #2
 8001838:	440b      	add	r3, r1
 800183a:	fbb0 f3f3 	udiv	r3, r0, r3
 800183e:	3301      	adds	r3, #1
 8001840:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001844:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001848:	6879      	ldr	r1, [r7, #4]
 800184a:	6809      	ldr	r1, [r1, #0]
 800184c:	4313      	orrs	r3, r2
 800184e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	69da      	ldr	r2, [r3, #28]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6a1b      	ldr	r3, [r3, #32]
 8001862:	431a      	orrs	r2, r3
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	430a      	orrs	r2, r1
 800186a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	689b      	ldr	r3, [r3, #8]
 8001872:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001876:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800187a:	687a      	ldr	r2, [r7, #4]
 800187c:	6911      	ldr	r1, [r2, #16]
 800187e:	687a      	ldr	r2, [r7, #4]
 8001880:	68d2      	ldr	r2, [r2, #12]
 8001882:	4311      	orrs	r1, r2
 8001884:	687a      	ldr	r2, [r7, #4]
 8001886:	6812      	ldr	r2, [r2, #0]
 8001888:	430b      	orrs	r3, r1
 800188a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	68db      	ldr	r3, [r3, #12]
 8001892:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	695a      	ldr	r2, [r3, #20]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	699b      	ldr	r3, [r3, #24]
 800189e:	431a      	orrs	r2, r3
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	430a      	orrs	r2, r1
 80018a6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	681a      	ldr	r2, [r3, #0]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f042 0201 	orr.w	r2, r2, #1
 80018b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2200      	movs	r2, #0
 80018bc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2220      	movs	r2, #32
 80018c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2200      	movs	r2, #0
 80018ca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2200      	movs	r2, #0
 80018d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80018d4:	2300      	movs	r3, #0
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3710      	adds	r7, #16
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	000186a0 	.word	0x000186a0
 80018e4:	001e847f 	.word	0x001e847f
 80018e8:	003d08ff 	.word	0x003d08ff
 80018ec:	431bde83 	.word	0x431bde83
 80018f0:	10624dd3 	.word	0x10624dd3

080018f4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b08c      	sub	sp, #48	; 0x30
 80018f8:	af02      	add	r7, sp, #8
 80018fa:	60f8      	str	r0, [r7, #12]
 80018fc:	4608      	mov	r0, r1
 80018fe:	4611      	mov	r1, r2
 8001900:	461a      	mov	r2, r3
 8001902:	4603      	mov	r3, r0
 8001904:	817b      	strh	r3, [r7, #10]
 8001906:	460b      	mov	r3, r1
 8001908:	813b      	strh	r3, [r7, #8]
 800190a:	4613      	mov	r3, r2
 800190c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800190e:	f7ff fbf9 	bl	8001104 <HAL_GetTick>
 8001912:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800191a:	b2db      	uxtb	r3, r3
 800191c:	2b20      	cmp	r3, #32
 800191e:	f040 8208 	bne.w	8001d32 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001924:	9300      	str	r3, [sp, #0]
 8001926:	2319      	movs	r3, #25
 8001928:	2201      	movs	r2, #1
 800192a:	497b      	ldr	r1, [pc, #492]	; (8001b18 <HAL_I2C_Mem_Read+0x224>)
 800192c:	68f8      	ldr	r0, [r7, #12]
 800192e:	f000 faef 	bl	8001f10 <I2C_WaitOnFlagUntilTimeout>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d001      	beq.n	800193c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8001938:	2302      	movs	r3, #2
 800193a:	e1fb      	b.n	8001d34 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001942:	2b01      	cmp	r3, #1
 8001944:	d101      	bne.n	800194a <HAL_I2C_Mem_Read+0x56>
 8001946:	2302      	movs	r3, #2
 8001948:	e1f4      	b.n	8001d34 <HAL_I2C_Mem_Read+0x440>
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	2201      	movs	r2, #1
 800194e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f003 0301 	and.w	r3, r3, #1
 800195c:	2b01      	cmp	r3, #1
 800195e:	d007      	beq.n	8001970 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f042 0201 	orr.w	r2, r2, #1
 800196e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	681a      	ldr	r2, [r3, #0]
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800197e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	2222      	movs	r2, #34	; 0x22
 8001984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	2240      	movs	r2, #64	; 0x40
 800198c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	2200      	movs	r2, #0
 8001994:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800199a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80019a0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019a6:	b29a      	uxth	r2, r3
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	4a5b      	ldr	r2, [pc, #364]	; (8001b1c <HAL_I2C_Mem_Read+0x228>)
 80019b0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80019b2:	88f8      	ldrh	r0, [r7, #6]
 80019b4:	893a      	ldrh	r2, [r7, #8]
 80019b6:	8979      	ldrh	r1, [r7, #10]
 80019b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ba:	9301      	str	r3, [sp, #4]
 80019bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019be:	9300      	str	r3, [sp, #0]
 80019c0:	4603      	mov	r3, r0
 80019c2:	68f8      	ldr	r0, [r7, #12]
 80019c4:	f000 f9bc 	bl	8001d40 <I2C_RequestMemoryRead>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d001      	beq.n	80019d2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	e1b0      	b.n	8001d34 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d113      	bne.n	8001a02 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80019da:	2300      	movs	r3, #0
 80019dc:	623b      	str	r3, [r7, #32]
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	695b      	ldr	r3, [r3, #20]
 80019e4:	623b      	str	r3, [r7, #32]
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	699b      	ldr	r3, [r3, #24]
 80019ec:	623b      	str	r3, [r7, #32]
 80019ee:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	681a      	ldr	r2, [r3, #0]
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80019fe:	601a      	str	r2, [r3, #0]
 8001a00:	e184      	b.n	8001d0c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a06:	2b01      	cmp	r3, #1
 8001a08:	d11b      	bne.n	8001a42 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	681a      	ldr	r2, [r3, #0]
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a18:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	61fb      	str	r3, [r7, #28]
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	695b      	ldr	r3, [r3, #20]
 8001a24:	61fb      	str	r3, [r7, #28]
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	699b      	ldr	r3, [r3, #24]
 8001a2c:	61fb      	str	r3, [r7, #28]
 8001a2e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a3e:	601a      	str	r2, [r3, #0]
 8001a40:	e164      	b.n	8001d0c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a46:	2b02      	cmp	r3, #2
 8001a48:	d11b      	bne.n	8001a82 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	681a      	ldr	r2, [r3, #0]
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a58:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001a68:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	61bb      	str	r3, [r7, #24]
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	695b      	ldr	r3, [r3, #20]
 8001a74:	61bb      	str	r3, [r7, #24]
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	699b      	ldr	r3, [r3, #24]
 8001a7c:	61bb      	str	r3, [r7, #24]
 8001a7e:	69bb      	ldr	r3, [r7, #24]
 8001a80:	e144      	b.n	8001d0c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a82:	2300      	movs	r3, #0
 8001a84:	617b      	str	r3, [r7, #20]
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	695b      	ldr	r3, [r3, #20]
 8001a8c:	617b      	str	r3, [r7, #20]
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	699b      	ldr	r3, [r3, #24]
 8001a94:	617b      	str	r3, [r7, #20]
 8001a96:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001a98:	e138      	b.n	8001d0c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a9e:	2b03      	cmp	r3, #3
 8001aa0:	f200 80f1 	bhi.w	8001c86 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001aa8:	2b01      	cmp	r3, #1
 8001aaa:	d123      	bne.n	8001af4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001aac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001aae:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001ab0:	68f8      	ldr	r0, [r7, #12]
 8001ab2:	f000 fb44 	bl	800213e <I2C_WaitOnRXNEFlagUntilTimeout>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d001      	beq.n	8001ac0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8001abc:	2301      	movs	r3, #1
 8001abe:	e139      	b.n	8001d34 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	691a      	ldr	r2, [r3, #16]
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aca:	b2d2      	uxtb	r2, r2
 8001acc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad2:	1c5a      	adds	r2, r3, #1
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001adc:	3b01      	subs	r3, #1
 8001ade:	b29a      	uxth	r2, r3
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ae8:	b29b      	uxth	r3, r3
 8001aea:	3b01      	subs	r3, #1
 8001aec:	b29a      	uxth	r2, r3
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001af2:	e10b      	b.n	8001d0c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001af8:	2b02      	cmp	r3, #2
 8001afa:	d14e      	bne.n	8001b9a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001afe:	9300      	str	r3, [sp, #0]
 8001b00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b02:	2200      	movs	r2, #0
 8001b04:	4906      	ldr	r1, [pc, #24]	; (8001b20 <HAL_I2C_Mem_Read+0x22c>)
 8001b06:	68f8      	ldr	r0, [r7, #12]
 8001b08:	f000 fa02 	bl	8001f10 <I2C_WaitOnFlagUntilTimeout>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d008      	beq.n	8001b24 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	e10e      	b.n	8001d34 <HAL_I2C_Mem_Read+0x440>
 8001b16:	bf00      	nop
 8001b18:	00100002 	.word	0x00100002
 8001b1c:	ffff0000 	.word	0xffff0000
 8001b20:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b32:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	691a      	ldr	r2, [r3, #16]
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b3e:	b2d2      	uxtb	r2, r2
 8001b40:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b46:	1c5a      	adds	r2, r3, #1
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b50:	3b01      	subs	r3, #1
 8001b52:	b29a      	uxth	r2, r3
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b5c:	b29b      	uxth	r3, r3
 8001b5e:	3b01      	subs	r3, #1
 8001b60:	b29a      	uxth	r2, r3
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	691a      	ldr	r2, [r3, #16]
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b70:	b2d2      	uxtb	r2, r2
 8001b72:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b78:	1c5a      	adds	r2, r3, #1
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b82:	3b01      	subs	r3, #1
 8001b84:	b29a      	uxth	r2, r3
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b8e:	b29b      	uxth	r3, r3
 8001b90:	3b01      	subs	r3, #1
 8001b92:	b29a      	uxth	r2, r3
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001b98:	e0b8      	b.n	8001d0c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b9c:	9300      	str	r3, [sp, #0]
 8001b9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	4966      	ldr	r1, [pc, #408]	; (8001d3c <HAL_I2C_Mem_Read+0x448>)
 8001ba4:	68f8      	ldr	r0, [r7, #12]
 8001ba6:	f000 f9b3 	bl	8001f10 <I2C_WaitOnFlagUntilTimeout>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d001      	beq.n	8001bb4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	e0bf      	b.n	8001d34 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001bc2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	691a      	ldr	r2, [r3, #16]
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bce:	b2d2      	uxtb	r2, r2
 8001bd0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd6:	1c5a      	adds	r2, r3, #1
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001be0:	3b01      	subs	r3, #1
 8001be2:	b29a      	uxth	r2, r3
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bec:	b29b      	uxth	r3, r3
 8001bee:	3b01      	subs	r3, #1
 8001bf0:	b29a      	uxth	r2, r3
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf8:	9300      	str	r3, [sp, #0]
 8001bfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	494f      	ldr	r1, [pc, #316]	; (8001d3c <HAL_I2C_Mem_Read+0x448>)
 8001c00:	68f8      	ldr	r0, [r7, #12]
 8001c02:	f000 f985 	bl	8001f10 <I2C_WaitOnFlagUntilTimeout>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d001      	beq.n	8001c10 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	e091      	b.n	8001d34 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	681a      	ldr	r2, [r3, #0]
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c1e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	691a      	ldr	r2, [r3, #16]
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c2a:	b2d2      	uxtb	r2, r2
 8001c2c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c32:	1c5a      	adds	r2, r3, #1
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c3c:	3b01      	subs	r3, #1
 8001c3e:	b29a      	uxth	r2, r3
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c48:	b29b      	uxth	r3, r3
 8001c4a:	3b01      	subs	r3, #1
 8001c4c:	b29a      	uxth	r2, r3
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	691a      	ldr	r2, [r3, #16]
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c5c:	b2d2      	uxtb	r2, r2
 8001c5e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c64:	1c5a      	adds	r2, r3, #1
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c6e:	3b01      	subs	r3, #1
 8001c70:	b29a      	uxth	r2, r3
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c7a:	b29b      	uxth	r3, r3
 8001c7c:	3b01      	subs	r3, #1
 8001c7e:	b29a      	uxth	r2, r3
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001c84:	e042      	b.n	8001d0c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c88:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001c8a:	68f8      	ldr	r0, [r7, #12]
 8001c8c:	f000 fa57 	bl	800213e <I2C_WaitOnRXNEFlagUntilTimeout>
 8001c90:	4603      	mov	r3, r0
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d001      	beq.n	8001c9a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
 8001c98:	e04c      	b.n	8001d34 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	691a      	ldr	r2, [r3, #16]
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca4:	b2d2      	uxtb	r2, r2
 8001ca6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cac:	1c5a      	adds	r2, r3, #1
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cb6:	3b01      	subs	r3, #1
 8001cb8:	b29a      	uxth	r2, r3
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cc2:	b29b      	uxth	r3, r3
 8001cc4:	3b01      	subs	r3, #1
 8001cc6:	b29a      	uxth	r2, r3
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	695b      	ldr	r3, [r3, #20]
 8001cd2:	f003 0304 	and.w	r3, r3, #4
 8001cd6:	2b04      	cmp	r3, #4
 8001cd8:	d118      	bne.n	8001d0c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	691a      	ldr	r2, [r3, #16]
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce4:	b2d2      	uxtb	r2, r2
 8001ce6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cec:	1c5a      	adds	r2, r3, #1
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cf6:	3b01      	subs	r3, #1
 8001cf8:	b29a      	uxth	r2, r3
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d02:	b29b      	uxth	r3, r3
 8001d04:	3b01      	subs	r3, #1
 8001d06:	b29a      	uxth	r2, r3
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	f47f aec2 	bne.w	8001a9a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	2220      	movs	r2, #32
 8001d1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	2200      	movs	r2, #0
 8001d22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	2200      	movs	r2, #0
 8001d2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	e000      	b.n	8001d34 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8001d32:	2302      	movs	r3, #2
  }
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	3728      	adds	r7, #40	; 0x28
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	00010004 	.word	0x00010004

08001d40 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b088      	sub	sp, #32
 8001d44:	af02      	add	r7, sp, #8
 8001d46:	60f8      	str	r0, [r7, #12]
 8001d48:	4608      	mov	r0, r1
 8001d4a:	4611      	mov	r1, r2
 8001d4c:	461a      	mov	r2, r3
 8001d4e:	4603      	mov	r3, r0
 8001d50:	817b      	strh	r3, [r7, #10]
 8001d52:	460b      	mov	r3, r1
 8001d54:	813b      	strh	r3, [r7, #8]
 8001d56:	4613      	mov	r3, r2
 8001d58:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001d68:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	681a      	ldr	r2, [r3, #0]
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d78:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d7c:	9300      	str	r3, [sp, #0]
 8001d7e:	6a3b      	ldr	r3, [r7, #32]
 8001d80:	2200      	movs	r2, #0
 8001d82:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001d86:	68f8      	ldr	r0, [r7, #12]
 8001d88:	f000 f8c2 	bl	8001f10 <I2C_WaitOnFlagUntilTimeout>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d00d      	beq.n	8001dae <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001da0:	d103      	bne.n	8001daa <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001da8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001daa:	2303      	movs	r3, #3
 8001dac:	e0aa      	b.n	8001f04 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001dae:	897b      	ldrh	r3, [r7, #10]
 8001db0:	b2db      	uxtb	r3, r3
 8001db2:	461a      	mov	r2, r3
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001dbc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc0:	6a3a      	ldr	r2, [r7, #32]
 8001dc2:	4952      	ldr	r1, [pc, #328]	; (8001f0c <I2C_RequestMemoryRead+0x1cc>)
 8001dc4:	68f8      	ldr	r0, [r7, #12]
 8001dc6:	f000 f8fa 	bl	8001fbe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d001      	beq.n	8001dd4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	e097      	b.n	8001f04 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	617b      	str	r3, [r7, #20]
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	695b      	ldr	r3, [r3, #20]
 8001dde:	617b      	str	r3, [r7, #20]
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	699b      	ldr	r3, [r3, #24]
 8001de6:	617b      	str	r3, [r7, #20]
 8001de8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001dea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dec:	6a39      	ldr	r1, [r7, #32]
 8001dee:	68f8      	ldr	r0, [r7, #12]
 8001df0:	f000 f964 	bl	80020bc <I2C_WaitOnTXEFlagUntilTimeout>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d00d      	beq.n	8001e16 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfe:	2b04      	cmp	r3, #4
 8001e00:	d107      	bne.n	8001e12 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e10:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
 8001e14:	e076      	b.n	8001f04 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001e16:	88fb      	ldrh	r3, [r7, #6]
 8001e18:	2b01      	cmp	r3, #1
 8001e1a:	d105      	bne.n	8001e28 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001e1c:	893b      	ldrh	r3, [r7, #8]
 8001e1e:	b2da      	uxtb	r2, r3
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	611a      	str	r2, [r3, #16]
 8001e26:	e021      	b.n	8001e6c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001e28:	893b      	ldrh	r3, [r7, #8]
 8001e2a:	0a1b      	lsrs	r3, r3, #8
 8001e2c:	b29b      	uxth	r3, r3
 8001e2e:	b2da      	uxtb	r2, r3
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e38:	6a39      	ldr	r1, [r7, #32]
 8001e3a:	68f8      	ldr	r0, [r7, #12]
 8001e3c:	f000 f93e 	bl	80020bc <I2C_WaitOnTXEFlagUntilTimeout>
 8001e40:	4603      	mov	r3, r0
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d00d      	beq.n	8001e62 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4a:	2b04      	cmp	r3, #4
 8001e4c:	d107      	bne.n	8001e5e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	681a      	ldr	r2, [r3, #0]
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e5c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e050      	b.n	8001f04 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001e62:	893b      	ldrh	r3, [r7, #8]
 8001e64:	b2da      	uxtb	r2, r3
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e6e:	6a39      	ldr	r1, [r7, #32]
 8001e70:	68f8      	ldr	r0, [r7, #12]
 8001e72:	f000 f923 	bl	80020bc <I2C_WaitOnTXEFlagUntilTimeout>
 8001e76:	4603      	mov	r3, r0
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d00d      	beq.n	8001e98 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e80:	2b04      	cmp	r3, #4
 8001e82:	d107      	bne.n	8001e94 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e92:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001e94:	2301      	movs	r3, #1
 8001e96:	e035      	b.n	8001f04 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ea6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eaa:	9300      	str	r3, [sp, #0]
 8001eac:	6a3b      	ldr	r3, [r7, #32]
 8001eae:	2200      	movs	r2, #0
 8001eb0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001eb4:	68f8      	ldr	r0, [r7, #12]
 8001eb6:	f000 f82b 	bl	8001f10 <I2C_WaitOnFlagUntilTimeout>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d00d      	beq.n	8001edc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ece:	d103      	bne.n	8001ed8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ed6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001ed8:	2303      	movs	r3, #3
 8001eda:	e013      	b.n	8001f04 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001edc:	897b      	ldrh	r3, [r7, #10]
 8001ede:	b2db      	uxtb	r3, r3
 8001ee0:	f043 0301 	orr.w	r3, r3, #1
 8001ee4:	b2da      	uxtb	r2, r3
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eee:	6a3a      	ldr	r2, [r7, #32]
 8001ef0:	4906      	ldr	r1, [pc, #24]	; (8001f0c <I2C_RequestMemoryRead+0x1cc>)
 8001ef2:	68f8      	ldr	r0, [r7, #12]
 8001ef4:	f000 f863 	bl	8001fbe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d001      	beq.n	8001f02 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
 8001f00:	e000      	b.n	8001f04 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8001f02:	2300      	movs	r3, #0
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	3718      	adds	r7, #24
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	00010002 	.word	0x00010002

08001f10 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b084      	sub	sp, #16
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	60f8      	str	r0, [r7, #12]
 8001f18:	60b9      	str	r1, [r7, #8]
 8001f1a:	603b      	str	r3, [r7, #0]
 8001f1c:	4613      	mov	r3, r2
 8001f1e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f20:	e025      	b.n	8001f6e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f28:	d021      	beq.n	8001f6e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f2a:	f7ff f8eb 	bl	8001104 <HAL_GetTick>
 8001f2e:	4602      	mov	r2, r0
 8001f30:	69bb      	ldr	r3, [r7, #24]
 8001f32:	1ad3      	subs	r3, r2, r3
 8001f34:	683a      	ldr	r2, [r7, #0]
 8001f36:	429a      	cmp	r2, r3
 8001f38:	d302      	bcc.n	8001f40 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d116      	bne.n	8001f6e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	2200      	movs	r2, #0
 8001f44:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	2220      	movs	r2, #32
 8001f4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	2200      	movs	r2, #0
 8001f52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5a:	f043 0220 	orr.w	r2, r3, #32
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	2200      	movs	r2, #0
 8001f66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e023      	b.n	8001fb6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	0c1b      	lsrs	r3, r3, #16
 8001f72:	b2db      	uxtb	r3, r3
 8001f74:	2b01      	cmp	r3, #1
 8001f76:	d10d      	bne.n	8001f94 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	695b      	ldr	r3, [r3, #20]
 8001f7e:	43da      	mvns	r2, r3
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	4013      	ands	r3, r2
 8001f84:	b29b      	uxth	r3, r3
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	bf0c      	ite	eq
 8001f8a:	2301      	moveq	r3, #1
 8001f8c:	2300      	movne	r3, #0
 8001f8e:	b2db      	uxtb	r3, r3
 8001f90:	461a      	mov	r2, r3
 8001f92:	e00c      	b.n	8001fae <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	699b      	ldr	r3, [r3, #24]
 8001f9a:	43da      	mvns	r2, r3
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	b29b      	uxth	r3, r3
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	bf0c      	ite	eq
 8001fa6:	2301      	moveq	r3, #1
 8001fa8:	2300      	movne	r3, #0
 8001faa:	b2db      	uxtb	r3, r3
 8001fac:	461a      	mov	r2, r3
 8001fae:	79fb      	ldrb	r3, [r7, #7]
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d0b6      	beq.n	8001f22 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001fb4:	2300      	movs	r3, #0
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	3710      	adds	r7, #16
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}

08001fbe <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001fbe:	b580      	push	{r7, lr}
 8001fc0:	b084      	sub	sp, #16
 8001fc2:	af00      	add	r7, sp, #0
 8001fc4:	60f8      	str	r0, [r7, #12]
 8001fc6:	60b9      	str	r1, [r7, #8]
 8001fc8:	607a      	str	r2, [r7, #4]
 8001fca:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001fcc:	e051      	b.n	8002072 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	695b      	ldr	r3, [r3, #20]
 8001fd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fd8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fdc:	d123      	bne.n	8002026 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fec:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001ff6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	2220      	movs	r2, #32
 8002002:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	2200      	movs	r2, #0
 800200a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002012:	f043 0204 	orr.w	r2, r3, #4
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	2200      	movs	r2, #0
 800201e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	e046      	b.n	80020b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	f1b3 3fff 	cmp.w	r3, #4294967295
 800202c:	d021      	beq.n	8002072 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800202e:	f7ff f869 	bl	8001104 <HAL_GetTick>
 8002032:	4602      	mov	r2, r0
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	1ad3      	subs	r3, r2, r3
 8002038:	687a      	ldr	r2, [r7, #4]
 800203a:	429a      	cmp	r2, r3
 800203c:	d302      	bcc.n	8002044 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d116      	bne.n	8002072 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	2200      	movs	r2, #0
 8002048:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	2220      	movs	r2, #32
 800204e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	2200      	movs	r2, #0
 8002056:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205e:	f043 0220 	orr.w	r2, r3, #32
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	2200      	movs	r2, #0
 800206a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	e020      	b.n	80020b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	0c1b      	lsrs	r3, r3, #16
 8002076:	b2db      	uxtb	r3, r3
 8002078:	2b01      	cmp	r3, #1
 800207a:	d10c      	bne.n	8002096 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	695b      	ldr	r3, [r3, #20]
 8002082:	43da      	mvns	r2, r3
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	4013      	ands	r3, r2
 8002088:	b29b      	uxth	r3, r3
 800208a:	2b00      	cmp	r3, #0
 800208c:	bf14      	ite	ne
 800208e:	2301      	movne	r3, #1
 8002090:	2300      	moveq	r3, #0
 8002092:	b2db      	uxtb	r3, r3
 8002094:	e00b      	b.n	80020ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	699b      	ldr	r3, [r3, #24]
 800209c:	43da      	mvns	r2, r3
 800209e:	68bb      	ldr	r3, [r7, #8]
 80020a0:	4013      	ands	r3, r2
 80020a2:	b29b      	uxth	r3, r3
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	bf14      	ite	ne
 80020a8:	2301      	movne	r3, #1
 80020aa:	2300      	moveq	r3, #0
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d18d      	bne.n	8001fce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80020b2:	2300      	movs	r3, #0
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	3710      	adds	r7, #16
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}

080020bc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b084      	sub	sp, #16
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	60f8      	str	r0, [r7, #12]
 80020c4:	60b9      	str	r1, [r7, #8]
 80020c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80020c8:	e02d      	b.n	8002126 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80020ca:	68f8      	ldr	r0, [r7, #12]
 80020cc:	f000 f88d 	bl	80021ea <I2C_IsAcknowledgeFailed>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d001      	beq.n	80020da <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e02d      	b.n	8002136 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020da:	68bb      	ldr	r3, [r7, #8]
 80020dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020e0:	d021      	beq.n	8002126 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020e2:	f7ff f80f 	bl	8001104 <HAL_GetTick>
 80020e6:	4602      	mov	r2, r0
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	1ad3      	subs	r3, r2, r3
 80020ec:	68ba      	ldr	r2, [r7, #8]
 80020ee:	429a      	cmp	r2, r3
 80020f0:	d302      	bcc.n	80020f8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80020f2:	68bb      	ldr	r3, [r7, #8]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d116      	bne.n	8002126 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	2200      	movs	r2, #0
 80020fc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	2220      	movs	r2, #32
 8002102:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	2200      	movs	r2, #0
 800210a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002112:	f043 0220 	orr.w	r2, r3, #32
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	2200      	movs	r2, #0
 800211e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e007      	b.n	8002136 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	695b      	ldr	r3, [r3, #20]
 800212c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002130:	2b80      	cmp	r3, #128	; 0x80
 8002132:	d1ca      	bne.n	80020ca <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002134:	2300      	movs	r3, #0
}
 8002136:	4618      	mov	r0, r3
 8002138:	3710      	adds	r7, #16
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}

0800213e <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800213e:	b580      	push	{r7, lr}
 8002140:	b084      	sub	sp, #16
 8002142:	af00      	add	r7, sp, #0
 8002144:	60f8      	str	r0, [r7, #12]
 8002146:	60b9      	str	r1, [r7, #8]
 8002148:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800214a:	e042      	b.n	80021d2 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	695b      	ldr	r3, [r3, #20]
 8002152:	f003 0310 	and.w	r3, r3, #16
 8002156:	2b10      	cmp	r3, #16
 8002158:	d119      	bne.n	800218e <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f06f 0210 	mvn.w	r2, #16
 8002162:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	2200      	movs	r2, #0
 8002168:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	2220      	movs	r2, #32
 800216e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	2200      	movs	r2, #0
 8002176:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	2200      	movs	r2, #0
 8002186:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e029      	b.n	80021e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800218e:	f7fe ffb9 	bl	8001104 <HAL_GetTick>
 8002192:	4602      	mov	r2, r0
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	1ad3      	subs	r3, r2, r3
 8002198:	68ba      	ldr	r2, [r7, #8]
 800219a:	429a      	cmp	r2, r3
 800219c:	d302      	bcc.n	80021a4 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d116      	bne.n	80021d2 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	2200      	movs	r2, #0
 80021a8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	2220      	movs	r2, #32
 80021ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	2200      	movs	r2, #0
 80021b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021be:	f043 0220 	orr.w	r2, r3, #32
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	2200      	movs	r2, #0
 80021ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	e007      	b.n	80021e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	695b      	ldr	r3, [r3, #20]
 80021d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021dc:	2b40      	cmp	r3, #64	; 0x40
 80021de:	d1b5      	bne.n	800214c <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80021e0:	2300      	movs	r3, #0
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	3710      	adds	r7, #16
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}

080021ea <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80021ea:	b480      	push	{r7}
 80021ec:	b083      	sub	sp, #12
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	695b      	ldr	r3, [r3, #20]
 80021f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002200:	d11b      	bne.n	800223a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800220a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2200      	movs	r2, #0
 8002210:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2220      	movs	r2, #32
 8002216:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2200      	movs	r2, #0
 800221e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002226:	f043 0204 	orr.w	r2, r3, #4
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2200      	movs	r2, #0
 8002232:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e000      	b.n	800223c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800223a:	2300      	movs	r3, #0
}
 800223c:	4618      	mov	r0, r3
 800223e:	370c      	adds	r7, #12
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr

08002248 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b086      	sub	sp, #24
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d101      	bne.n	800225a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	e267      	b.n	800272a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 0301 	and.w	r3, r3, #1
 8002262:	2b00      	cmp	r3, #0
 8002264:	d075      	beq.n	8002352 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002266:	4b88      	ldr	r3, [pc, #544]	; (8002488 <HAL_RCC_OscConfig+0x240>)
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	f003 030c 	and.w	r3, r3, #12
 800226e:	2b04      	cmp	r3, #4
 8002270:	d00c      	beq.n	800228c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002272:	4b85      	ldr	r3, [pc, #532]	; (8002488 <HAL_RCC_OscConfig+0x240>)
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800227a:	2b08      	cmp	r3, #8
 800227c:	d112      	bne.n	80022a4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800227e:	4b82      	ldr	r3, [pc, #520]	; (8002488 <HAL_RCC_OscConfig+0x240>)
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002286:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800228a:	d10b      	bne.n	80022a4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800228c:	4b7e      	ldr	r3, [pc, #504]	; (8002488 <HAL_RCC_OscConfig+0x240>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002294:	2b00      	cmp	r3, #0
 8002296:	d05b      	beq.n	8002350 <HAL_RCC_OscConfig+0x108>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d157      	bne.n	8002350 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80022a0:	2301      	movs	r3, #1
 80022a2:	e242      	b.n	800272a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022ac:	d106      	bne.n	80022bc <HAL_RCC_OscConfig+0x74>
 80022ae:	4b76      	ldr	r3, [pc, #472]	; (8002488 <HAL_RCC_OscConfig+0x240>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a75      	ldr	r2, [pc, #468]	; (8002488 <HAL_RCC_OscConfig+0x240>)
 80022b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022b8:	6013      	str	r3, [r2, #0]
 80022ba:	e01d      	b.n	80022f8 <HAL_RCC_OscConfig+0xb0>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022c4:	d10c      	bne.n	80022e0 <HAL_RCC_OscConfig+0x98>
 80022c6:	4b70      	ldr	r3, [pc, #448]	; (8002488 <HAL_RCC_OscConfig+0x240>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a6f      	ldr	r2, [pc, #444]	; (8002488 <HAL_RCC_OscConfig+0x240>)
 80022cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022d0:	6013      	str	r3, [r2, #0]
 80022d2:	4b6d      	ldr	r3, [pc, #436]	; (8002488 <HAL_RCC_OscConfig+0x240>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a6c      	ldr	r2, [pc, #432]	; (8002488 <HAL_RCC_OscConfig+0x240>)
 80022d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022dc:	6013      	str	r3, [r2, #0]
 80022de:	e00b      	b.n	80022f8 <HAL_RCC_OscConfig+0xb0>
 80022e0:	4b69      	ldr	r3, [pc, #420]	; (8002488 <HAL_RCC_OscConfig+0x240>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a68      	ldr	r2, [pc, #416]	; (8002488 <HAL_RCC_OscConfig+0x240>)
 80022e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022ea:	6013      	str	r3, [r2, #0]
 80022ec:	4b66      	ldr	r3, [pc, #408]	; (8002488 <HAL_RCC_OscConfig+0x240>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a65      	ldr	r2, [pc, #404]	; (8002488 <HAL_RCC_OscConfig+0x240>)
 80022f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d013      	beq.n	8002328 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002300:	f7fe ff00 	bl	8001104 <HAL_GetTick>
 8002304:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002306:	e008      	b.n	800231a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002308:	f7fe fefc 	bl	8001104 <HAL_GetTick>
 800230c:	4602      	mov	r2, r0
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	1ad3      	subs	r3, r2, r3
 8002312:	2b64      	cmp	r3, #100	; 0x64
 8002314:	d901      	bls.n	800231a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002316:	2303      	movs	r3, #3
 8002318:	e207      	b.n	800272a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800231a:	4b5b      	ldr	r3, [pc, #364]	; (8002488 <HAL_RCC_OscConfig+0x240>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002322:	2b00      	cmp	r3, #0
 8002324:	d0f0      	beq.n	8002308 <HAL_RCC_OscConfig+0xc0>
 8002326:	e014      	b.n	8002352 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002328:	f7fe feec 	bl	8001104 <HAL_GetTick>
 800232c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800232e:	e008      	b.n	8002342 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002330:	f7fe fee8 	bl	8001104 <HAL_GetTick>
 8002334:	4602      	mov	r2, r0
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	1ad3      	subs	r3, r2, r3
 800233a:	2b64      	cmp	r3, #100	; 0x64
 800233c:	d901      	bls.n	8002342 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800233e:	2303      	movs	r3, #3
 8002340:	e1f3      	b.n	800272a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002342:	4b51      	ldr	r3, [pc, #324]	; (8002488 <HAL_RCC_OscConfig+0x240>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800234a:	2b00      	cmp	r3, #0
 800234c:	d1f0      	bne.n	8002330 <HAL_RCC_OscConfig+0xe8>
 800234e:	e000      	b.n	8002352 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002350:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 0302 	and.w	r3, r3, #2
 800235a:	2b00      	cmp	r3, #0
 800235c:	d063      	beq.n	8002426 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800235e:	4b4a      	ldr	r3, [pc, #296]	; (8002488 <HAL_RCC_OscConfig+0x240>)
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	f003 030c 	and.w	r3, r3, #12
 8002366:	2b00      	cmp	r3, #0
 8002368:	d00b      	beq.n	8002382 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800236a:	4b47      	ldr	r3, [pc, #284]	; (8002488 <HAL_RCC_OscConfig+0x240>)
 800236c:	689b      	ldr	r3, [r3, #8]
 800236e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002372:	2b08      	cmp	r3, #8
 8002374:	d11c      	bne.n	80023b0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002376:	4b44      	ldr	r3, [pc, #272]	; (8002488 <HAL_RCC_OscConfig+0x240>)
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800237e:	2b00      	cmp	r3, #0
 8002380:	d116      	bne.n	80023b0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002382:	4b41      	ldr	r3, [pc, #260]	; (8002488 <HAL_RCC_OscConfig+0x240>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f003 0302 	and.w	r3, r3, #2
 800238a:	2b00      	cmp	r3, #0
 800238c:	d005      	beq.n	800239a <HAL_RCC_OscConfig+0x152>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	68db      	ldr	r3, [r3, #12]
 8002392:	2b01      	cmp	r3, #1
 8002394:	d001      	beq.n	800239a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	e1c7      	b.n	800272a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800239a:	4b3b      	ldr	r3, [pc, #236]	; (8002488 <HAL_RCC_OscConfig+0x240>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	691b      	ldr	r3, [r3, #16]
 80023a6:	00db      	lsls	r3, r3, #3
 80023a8:	4937      	ldr	r1, [pc, #220]	; (8002488 <HAL_RCC_OscConfig+0x240>)
 80023aa:	4313      	orrs	r3, r2
 80023ac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023ae:	e03a      	b.n	8002426 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	68db      	ldr	r3, [r3, #12]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d020      	beq.n	80023fa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023b8:	4b34      	ldr	r3, [pc, #208]	; (800248c <HAL_RCC_OscConfig+0x244>)
 80023ba:	2201      	movs	r2, #1
 80023bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023be:	f7fe fea1 	bl	8001104 <HAL_GetTick>
 80023c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023c4:	e008      	b.n	80023d8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023c6:	f7fe fe9d 	bl	8001104 <HAL_GetTick>
 80023ca:	4602      	mov	r2, r0
 80023cc:	693b      	ldr	r3, [r7, #16]
 80023ce:	1ad3      	subs	r3, r2, r3
 80023d0:	2b02      	cmp	r3, #2
 80023d2:	d901      	bls.n	80023d8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80023d4:	2303      	movs	r3, #3
 80023d6:	e1a8      	b.n	800272a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023d8:	4b2b      	ldr	r3, [pc, #172]	; (8002488 <HAL_RCC_OscConfig+0x240>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f003 0302 	and.w	r3, r3, #2
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d0f0      	beq.n	80023c6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023e4:	4b28      	ldr	r3, [pc, #160]	; (8002488 <HAL_RCC_OscConfig+0x240>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	691b      	ldr	r3, [r3, #16]
 80023f0:	00db      	lsls	r3, r3, #3
 80023f2:	4925      	ldr	r1, [pc, #148]	; (8002488 <HAL_RCC_OscConfig+0x240>)
 80023f4:	4313      	orrs	r3, r2
 80023f6:	600b      	str	r3, [r1, #0]
 80023f8:	e015      	b.n	8002426 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023fa:	4b24      	ldr	r3, [pc, #144]	; (800248c <HAL_RCC_OscConfig+0x244>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002400:	f7fe fe80 	bl	8001104 <HAL_GetTick>
 8002404:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002406:	e008      	b.n	800241a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002408:	f7fe fe7c 	bl	8001104 <HAL_GetTick>
 800240c:	4602      	mov	r2, r0
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	1ad3      	subs	r3, r2, r3
 8002412:	2b02      	cmp	r3, #2
 8002414:	d901      	bls.n	800241a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002416:	2303      	movs	r3, #3
 8002418:	e187      	b.n	800272a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800241a:	4b1b      	ldr	r3, [pc, #108]	; (8002488 <HAL_RCC_OscConfig+0x240>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 0302 	and.w	r3, r3, #2
 8002422:	2b00      	cmp	r3, #0
 8002424:	d1f0      	bne.n	8002408 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 0308 	and.w	r3, r3, #8
 800242e:	2b00      	cmp	r3, #0
 8002430:	d036      	beq.n	80024a0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	695b      	ldr	r3, [r3, #20]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d016      	beq.n	8002468 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800243a:	4b15      	ldr	r3, [pc, #84]	; (8002490 <HAL_RCC_OscConfig+0x248>)
 800243c:	2201      	movs	r2, #1
 800243e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002440:	f7fe fe60 	bl	8001104 <HAL_GetTick>
 8002444:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002446:	e008      	b.n	800245a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002448:	f7fe fe5c 	bl	8001104 <HAL_GetTick>
 800244c:	4602      	mov	r2, r0
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	2b02      	cmp	r3, #2
 8002454:	d901      	bls.n	800245a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002456:	2303      	movs	r3, #3
 8002458:	e167      	b.n	800272a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800245a:	4b0b      	ldr	r3, [pc, #44]	; (8002488 <HAL_RCC_OscConfig+0x240>)
 800245c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800245e:	f003 0302 	and.w	r3, r3, #2
 8002462:	2b00      	cmp	r3, #0
 8002464:	d0f0      	beq.n	8002448 <HAL_RCC_OscConfig+0x200>
 8002466:	e01b      	b.n	80024a0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002468:	4b09      	ldr	r3, [pc, #36]	; (8002490 <HAL_RCC_OscConfig+0x248>)
 800246a:	2200      	movs	r2, #0
 800246c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800246e:	f7fe fe49 	bl	8001104 <HAL_GetTick>
 8002472:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002474:	e00e      	b.n	8002494 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002476:	f7fe fe45 	bl	8001104 <HAL_GetTick>
 800247a:	4602      	mov	r2, r0
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	1ad3      	subs	r3, r2, r3
 8002480:	2b02      	cmp	r3, #2
 8002482:	d907      	bls.n	8002494 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002484:	2303      	movs	r3, #3
 8002486:	e150      	b.n	800272a <HAL_RCC_OscConfig+0x4e2>
 8002488:	40023800 	.word	0x40023800
 800248c:	42470000 	.word	0x42470000
 8002490:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002494:	4b88      	ldr	r3, [pc, #544]	; (80026b8 <HAL_RCC_OscConfig+0x470>)
 8002496:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002498:	f003 0302 	and.w	r3, r3, #2
 800249c:	2b00      	cmp	r3, #0
 800249e:	d1ea      	bne.n	8002476 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f003 0304 	and.w	r3, r3, #4
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	f000 8097 	beq.w	80025dc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024ae:	2300      	movs	r3, #0
 80024b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024b2:	4b81      	ldr	r3, [pc, #516]	; (80026b8 <HAL_RCC_OscConfig+0x470>)
 80024b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d10f      	bne.n	80024de <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024be:	2300      	movs	r3, #0
 80024c0:	60bb      	str	r3, [r7, #8]
 80024c2:	4b7d      	ldr	r3, [pc, #500]	; (80026b8 <HAL_RCC_OscConfig+0x470>)
 80024c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c6:	4a7c      	ldr	r2, [pc, #496]	; (80026b8 <HAL_RCC_OscConfig+0x470>)
 80024c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024cc:	6413      	str	r3, [r2, #64]	; 0x40
 80024ce:	4b7a      	ldr	r3, [pc, #488]	; (80026b8 <HAL_RCC_OscConfig+0x470>)
 80024d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024d6:	60bb      	str	r3, [r7, #8]
 80024d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024da:	2301      	movs	r3, #1
 80024dc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024de:	4b77      	ldr	r3, [pc, #476]	; (80026bc <HAL_RCC_OscConfig+0x474>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d118      	bne.n	800251c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024ea:	4b74      	ldr	r3, [pc, #464]	; (80026bc <HAL_RCC_OscConfig+0x474>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a73      	ldr	r2, [pc, #460]	; (80026bc <HAL_RCC_OscConfig+0x474>)
 80024f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024f6:	f7fe fe05 	bl	8001104 <HAL_GetTick>
 80024fa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024fc:	e008      	b.n	8002510 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024fe:	f7fe fe01 	bl	8001104 <HAL_GetTick>
 8002502:	4602      	mov	r2, r0
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	1ad3      	subs	r3, r2, r3
 8002508:	2b02      	cmp	r3, #2
 800250a:	d901      	bls.n	8002510 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800250c:	2303      	movs	r3, #3
 800250e:	e10c      	b.n	800272a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002510:	4b6a      	ldr	r3, [pc, #424]	; (80026bc <HAL_RCC_OscConfig+0x474>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002518:	2b00      	cmp	r3, #0
 800251a:	d0f0      	beq.n	80024fe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	2b01      	cmp	r3, #1
 8002522:	d106      	bne.n	8002532 <HAL_RCC_OscConfig+0x2ea>
 8002524:	4b64      	ldr	r3, [pc, #400]	; (80026b8 <HAL_RCC_OscConfig+0x470>)
 8002526:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002528:	4a63      	ldr	r2, [pc, #396]	; (80026b8 <HAL_RCC_OscConfig+0x470>)
 800252a:	f043 0301 	orr.w	r3, r3, #1
 800252e:	6713      	str	r3, [r2, #112]	; 0x70
 8002530:	e01c      	b.n	800256c <HAL_RCC_OscConfig+0x324>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	2b05      	cmp	r3, #5
 8002538:	d10c      	bne.n	8002554 <HAL_RCC_OscConfig+0x30c>
 800253a:	4b5f      	ldr	r3, [pc, #380]	; (80026b8 <HAL_RCC_OscConfig+0x470>)
 800253c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800253e:	4a5e      	ldr	r2, [pc, #376]	; (80026b8 <HAL_RCC_OscConfig+0x470>)
 8002540:	f043 0304 	orr.w	r3, r3, #4
 8002544:	6713      	str	r3, [r2, #112]	; 0x70
 8002546:	4b5c      	ldr	r3, [pc, #368]	; (80026b8 <HAL_RCC_OscConfig+0x470>)
 8002548:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800254a:	4a5b      	ldr	r2, [pc, #364]	; (80026b8 <HAL_RCC_OscConfig+0x470>)
 800254c:	f043 0301 	orr.w	r3, r3, #1
 8002550:	6713      	str	r3, [r2, #112]	; 0x70
 8002552:	e00b      	b.n	800256c <HAL_RCC_OscConfig+0x324>
 8002554:	4b58      	ldr	r3, [pc, #352]	; (80026b8 <HAL_RCC_OscConfig+0x470>)
 8002556:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002558:	4a57      	ldr	r2, [pc, #348]	; (80026b8 <HAL_RCC_OscConfig+0x470>)
 800255a:	f023 0301 	bic.w	r3, r3, #1
 800255e:	6713      	str	r3, [r2, #112]	; 0x70
 8002560:	4b55      	ldr	r3, [pc, #340]	; (80026b8 <HAL_RCC_OscConfig+0x470>)
 8002562:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002564:	4a54      	ldr	r2, [pc, #336]	; (80026b8 <HAL_RCC_OscConfig+0x470>)
 8002566:	f023 0304 	bic.w	r3, r3, #4
 800256a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d015      	beq.n	80025a0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002574:	f7fe fdc6 	bl	8001104 <HAL_GetTick>
 8002578:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800257a:	e00a      	b.n	8002592 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800257c:	f7fe fdc2 	bl	8001104 <HAL_GetTick>
 8002580:	4602      	mov	r2, r0
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	f241 3288 	movw	r2, #5000	; 0x1388
 800258a:	4293      	cmp	r3, r2
 800258c:	d901      	bls.n	8002592 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800258e:	2303      	movs	r3, #3
 8002590:	e0cb      	b.n	800272a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002592:	4b49      	ldr	r3, [pc, #292]	; (80026b8 <HAL_RCC_OscConfig+0x470>)
 8002594:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002596:	f003 0302 	and.w	r3, r3, #2
 800259a:	2b00      	cmp	r3, #0
 800259c:	d0ee      	beq.n	800257c <HAL_RCC_OscConfig+0x334>
 800259e:	e014      	b.n	80025ca <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025a0:	f7fe fdb0 	bl	8001104 <HAL_GetTick>
 80025a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025a6:	e00a      	b.n	80025be <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025a8:	f7fe fdac 	bl	8001104 <HAL_GetTick>
 80025ac:	4602      	mov	r2, r0
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	1ad3      	subs	r3, r2, r3
 80025b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d901      	bls.n	80025be <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80025ba:	2303      	movs	r3, #3
 80025bc:	e0b5      	b.n	800272a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025be:	4b3e      	ldr	r3, [pc, #248]	; (80026b8 <HAL_RCC_OscConfig+0x470>)
 80025c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025c2:	f003 0302 	and.w	r3, r3, #2
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d1ee      	bne.n	80025a8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025ca:	7dfb      	ldrb	r3, [r7, #23]
 80025cc:	2b01      	cmp	r3, #1
 80025ce:	d105      	bne.n	80025dc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025d0:	4b39      	ldr	r3, [pc, #228]	; (80026b8 <HAL_RCC_OscConfig+0x470>)
 80025d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d4:	4a38      	ldr	r2, [pc, #224]	; (80026b8 <HAL_RCC_OscConfig+0x470>)
 80025d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025da:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	699b      	ldr	r3, [r3, #24]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	f000 80a1 	beq.w	8002728 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80025e6:	4b34      	ldr	r3, [pc, #208]	; (80026b8 <HAL_RCC_OscConfig+0x470>)
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	f003 030c 	and.w	r3, r3, #12
 80025ee:	2b08      	cmp	r3, #8
 80025f0:	d05c      	beq.n	80026ac <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	699b      	ldr	r3, [r3, #24]
 80025f6:	2b02      	cmp	r3, #2
 80025f8:	d141      	bne.n	800267e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025fa:	4b31      	ldr	r3, [pc, #196]	; (80026c0 <HAL_RCC_OscConfig+0x478>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002600:	f7fe fd80 	bl	8001104 <HAL_GetTick>
 8002604:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002606:	e008      	b.n	800261a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002608:	f7fe fd7c 	bl	8001104 <HAL_GetTick>
 800260c:	4602      	mov	r2, r0
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	1ad3      	subs	r3, r2, r3
 8002612:	2b02      	cmp	r3, #2
 8002614:	d901      	bls.n	800261a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002616:	2303      	movs	r3, #3
 8002618:	e087      	b.n	800272a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800261a:	4b27      	ldr	r3, [pc, #156]	; (80026b8 <HAL_RCC_OscConfig+0x470>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002622:	2b00      	cmp	r3, #0
 8002624:	d1f0      	bne.n	8002608 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	69da      	ldr	r2, [r3, #28]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6a1b      	ldr	r3, [r3, #32]
 800262e:	431a      	orrs	r2, r3
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002634:	019b      	lsls	r3, r3, #6
 8002636:	431a      	orrs	r2, r3
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800263c:	085b      	lsrs	r3, r3, #1
 800263e:	3b01      	subs	r3, #1
 8002640:	041b      	lsls	r3, r3, #16
 8002642:	431a      	orrs	r2, r3
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002648:	061b      	lsls	r3, r3, #24
 800264a:	491b      	ldr	r1, [pc, #108]	; (80026b8 <HAL_RCC_OscConfig+0x470>)
 800264c:	4313      	orrs	r3, r2
 800264e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002650:	4b1b      	ldr	r3, [pc, #108]	; (80026c0 <HAL_RCC_OscConfig+0x478>)
 8002652:	2201      	movs	r2, #1
 8002654:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002656:	f7fe fd55 	bl	8001104 <HAL_GetTick>
 800265a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800265c:	e008      	b.n	8002670 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800265e:	f7fe fd51 	bl	8001104 <HAL_GetTick>
 8002662:	4602      	mov	r2, r0
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	1ad3      	subs	r3, r2, r3
 8002668:	2b02      	cmp	r3, #2
 800266a:	d901      	bls.n	8002670 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800266c:	2303      	movs	r3, #3
 800266e:	e05c      	b.n	800272a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002670:	4b11      	ldr	r3, [pc, #68]	; (80026b8 <HAL_RCC_OscConfig+0x470>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002678:	2b00      	cmp	r3, #0
 800267a:	d0f0      	beq.n	800265e <HAL_RCC_OscConfig+0x416>
 800267c:	e054      	b.n	8002728 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800267e:	4b10      	ldr	r3, [pc, #64]	; (80026c0 <HAL_RCC_OscConfig+0x478>)
 8002680:	2200      	movs	r2, #0
 8002682:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002684:	f7fe fd3e 	bl	8001104 <HAL_GetTick>
 8002688:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800268a:	e008      	b.n	800269e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800268c:	f7fe fd3a 	bl	8001104 <HAL_GetTick>
 8002690:	4602      	mov	r2, r0
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	1ad3      	subs	r3, r2, r3
 8002696:	2b02      	cmp	r3, #2
 8002698:	d901      	bls.n	800269e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800269a:	2303      	movs	r3, #3
 800269c:	e045      	b.n	800272a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800269e:	4b06      	ldr	r3, [pc, #24]	; (80026b8 <HAL_RCC_OscConfig+0x470>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d1f0      	bne.n	800268c <HAL_RCC_OscConfig+0x444>
 80026aa:	e03d      	b.n	8002728 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	699b      	ldr	r3, [r3, #24]
 80026b0:	2b01      	cmp	r3, #1
 80026b2:	d107      	bne.n	80026c4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	e038      	b.n	800272a <HAL_RCC_OscConfig+0x4e2>
 80026b8:	40023800 	.word	0x40023800
 80026bc:	40007000 	.word	0x40007000
 80026c0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80026c4:	4b1b      	ldr	r3, [pc, #108]	; (8002734 <HAL_RCC_OscConfig+0x4ec>)
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	699b      	ldr	r3, [r3, #24]
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d028      	beq.n	8002724 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026dc:	429a      	cmp	r2, r3
 80026de:	d121      	bne.n	8002724 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026ea:	429a      	cmp	r2, r3
 80026ec:	d11a      	bne.n	8002724 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80026ee:	68fa      	ldr	r2, [r7, #12]
 80026f0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80026f4:	4013      	ands	r3, r2
 80026f6:	687a      	ldr	r2, [r7, #4]
 80026f8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80026fa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d111      	bne.n	8002724 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800270a:	085b      	lsrs	r3, r3, #1
 800270c:	3b01      	subs	r3, #1
 800270e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002710:	429a      	cmp	r2, r3
 8002712:	d107      	bne.n	8002724 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800271e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002720:	429a      	cmp	r2, r3
 8002722:	d001      	beq.n	8002728 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002724:	2301      	movs	r3, #1
 8002726:	e000      	b.n	800272a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002728:	2300      	movs	r3, #0
}
 800272a:	4618      	mov	r0, r3
 800272c:	3718      	adds	r7, #24
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}
 8002732:	bf00      	nop
 8002734:	40023800 	.word	0x40023800

08002738 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b084      	sub	sp, #16
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
 8002740:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d101      	bne.n	800274c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002748:	2301      	movs	r3, #1
 800274a:	e0cc      	b.n	80028e6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800274c:	4b68      	ldr	r3, [pc, #416]	; (80028f0 <HAL_RCC_ClockConfig+0x1b8>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f003 0307 	and.w	r3, r3, #7
 8002754:	683a      	ldr	r2, [r7, #0]
 8002756:	429a      	cmp	r2, r3
 8002758:	d90c      	bls.n	8002774 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800275a:	4b65      	ldr	r3, [pc, #404]	; (80028f0 <HAL_RCC_ClockConfig+0x1b8>)
 800275c:	683a      	ldr	r2, [r7, #0]
 800275e:	b2d2      	uxtb	r2, r2
 8002760:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002762:	4b63      	ldr	r3, [pc, #396]	; (80028f0 <HAL_RCC_ClockConfig+0x1b8>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f003 0307 	and.w	r3, r3, #7
 800276a:	683a      	ldr	r2, [r7, #0]
 800276c:	429a      	cmp	r2, r3
 800276e:	d001      	beq.n	8002774 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	e0b8      	b.n	80028e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f003 0302 	and.w	r3, r3, #2
 800277c:	2b00      	cmp	r3, #0
 800277e:	d020      	beq.n	80027c2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f003 0304 	and.w	r3, r3, #4
 8002788:	2b00      	cmp	r3, #0
 800278a:	d005      	beq.n	8002798 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800278c:	4b59      	ldr	r3, [pc, #356]	; (80028f4 <HAL_RCC_ClockConfig+0x1bc>)
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	4a58      	ldr	r2, [pc, #352]	; (80028f4 <HAL_RCC_ClockConfig+0x1bc>)
 8002792:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002796:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f003 0308 	and.w	r3, r3, #8
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d005      	beq.n	80027b0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027a4:	4b53      	ldr	r3, [pc, #332]	; (80028f4 <HAL_RCC_ClockConfig+0x1bc>)
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	4a52      	ldr	r2, [pc, #328]	; (80028f4 <HAL_RCC_ClockConfig+0x1bc>)
 80027aa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80027ae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027b0:	4b50      	ldr	r3, [pc, #320]	; (80028f4 <HAL_RCC_ClockConfig+0x1bc>)
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	494d      	ldr	r1, [pc, #308]	; (80028f4 <HAL_RCC_ClockConfig+0x1bc>)
 80027be:	4313      	orrs	r3, r2
 80027c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 0301 	and.w	r3, r3, #1
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d044      	beq.n	8002858 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	2b01      	cmp	r3, #1
 80027d4:	d107      	bne.n	80027e6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027d6:	4b47      	ldr	r3, [pc, #284]	; (80028f4 <HAL_RCC_ClockConfig+0x1bc>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d119      	bne.n	8002816 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	e07f      	b.n	80028e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	2b02      	cmp	r3, #2
 80027ec:	d003      	beq.n	80027f6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027f2:	2b03      	cmp	r3, #3
 80027f4:	d107      	bne.n	8002806 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027f6:	4b3f      	ldr	r3, [pc, #252]	; (80028f4 <HAL_RCC_ClockConfig+0x1bc>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d109      	bne.n	8002816 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	e06f      	b.n	80028e6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002806:	4b3b      	ldr	r3, [pc, #236]	; (80028f4 <HAL_RCC_ClockConfig+0x1bc>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 0302 	and.w	r3, r3, #2
 800280e:	2b00      	cmp	r3, #0
 8002810:	d101      	bne.n	8002816 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	e067      	b.n	80028e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002816:	4b37      	ldr	r3, [pc, #220]	; (80028f4 <HAL_RCC_ClockConfig+0x1bc>)
 8002818:	689b      	ldr	r3, [r3, #8]
 800281a:	f023 0203 	bic.w	r2, r3, #3
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	4934      	ldr	r1, [pc, #208]	; (80028f4 <HAL_RCC_ClockConfig+0x1bc>)
 8002824:	4313      	orrs	r3, r2
 8002826:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002828:	f7fe fc6c 	bl	8001104 <HAL_GetTick>
 800282c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800282e:	e00a      	b.n	8002846 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002830:	f7fe fc68 	bl	8001104 <HAL_GetTick>
 8002834:	4602      	mov	r2, r0
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	1ad3      	subs	r3, r2, r3
 800283a:	f241 3288 	movw	r2, #5000	; 0x1388
 800283e:	4293      	cmp	r3, r2
 8002840:	d901      	bls.n	8002846 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002842:	2303      	movs	r3, #3
 8002844:	e04f      	b.n	80028e6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002846:	4b2b      	ldr	r3, [pc, #172]	; (80028f4 <HAL_RCC_ClockConfig+0x1bc>)
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	f003 020c 	and.w	r2, r3, #12
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	009b      	lsls	r3, r3, #2
 8002854:	429a      	cmp	r2, r3
 8002856:	d1eb      	bne.n	8002830 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002858:	4b25      	ldr	r3, [pc, #148]	; (80028f0 <HAL_RCC_ClockConfig+0x1b8>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 0307 	and.w	r3, r3, #7
 8002860:	683a      	ldr	r2, [r7, #0]
 8002862:	429a      	cmp	r2, r3
 8002864:	d20c      	bcs.n	8002880 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002866:	4b22      	ldr	r3, [pc, #136]	; (80028f0 <HAL_RCC_ClockConfig+0x1b8>)
 8002868:	683a      	ldr	r2, [r7, #0]
 800286a:	b2d2      	uxtb	r2, r2
 800286c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800286e:	4b20      	ldr	r3, [pc, #128]	; (80028f0 <HAL_RCC_ClockConfig+0x1b8>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 0307 	and.w	r3, r3, #7
 8002876:	683a      	ldr	r2, [r7, #0]
 8002878:	429a      	cmp	r2, r3
 800287a:	d001      	beq.n	8002880 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800287c:	2301      	movs	r3, #1
 800287e:	e032      	b.n	80028e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f003 0304 	and.w	r3, r3, #4
 8002888:	2b00      	cmp	r3, #0
 800288a:	d008      	beq.n	800289e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800288c:	4b19      	ldr	r3, [pc, #100]	; (80028f4 <HAL_RCC_ClockConfig+0x1bc>)
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	68db      	ldr	r3, [r3, #12]
 8002898:	4916      	ldr	r1, [pc, #88]	; (80028f4 <HAL_RCC_ClockConfig+0x1bc>)
 800289a:	4313      	orrs	r3, r2
 800289c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 0308 	and.w	r3, r3, #8
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d009      	beq.n	80028be <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80028aa:	4b12      	ldr	r3, [pc, #72]	; (80028f4 <HAL_RCC_ClockConfig+0x1bc>)
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	691b      	ldr	r3, [r3, #16]
 80028b6:	00db      	lsls	r3, r3, #3
 80028b8:	490e      	ldr	r1, [pc, #56]	; (80028f4 <HAL_RCC_ClockConfig+0x1bc>)
 80028ba:	4313      	orrs	r3, r2
 80028bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80028be:	f000 f821 	bl	8002904 <HAL_RCC_GetSysClockFreq>
 80028c2:	4602      	mov	r2, r0
 80028c4:	4b0b      	ldr	r3, [pc, #44]	; (80028f4 <HAL_RCC_ClockConfig+0x1bc>)
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	091b      	lsrs	r3, r3, #4
 80028ca:	f003 030f 	and.w	r3, r3, #15
 80028ce:	490a      	ldr	r1, [pc, #40]	; (80028f8 <HAL_RCC_ClockConfig+0x1c0>)
 80028d0:	5ccb      	ldrb	r3, [r1, r3]
 80028d2:	fa22 f303 	lsr.w	r3, r2, r3
 80028d6:	4a09      	ldr	r2, [pc, #36]	; (80028fc <HAL_RCC_ClockConfig+0x1c4>)
 80028d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80028da:	4b09      	ldr	r3, [pc, #36]	; (8002900 <HAL_RCC_ClockConfig+0x1c8>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4618      	mov	r0, r3
 80028e0:	f7fe fbcc 	bl	800107c <HAL_InitTick>

  return HAL_OK;
 80028e4:	2300      	movs	r3, #0
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	3710      	adds	r7, #16
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}
 80028ee:	bf00      	nop
 80028f0:	40023c00 	.word	0x40023c00
 80028f4:	40023800 	.word	0x40023800
 80028f8:	08004b9c 	.word	0x08004b9c
 80028fc:	20000000 	.word	0x20000000
 8002900:	20000004 	.word	0x20000004

08002904 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002904:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002908:	b094      	sub	sp, #80	; 0x50
 800290a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800290c:	2300      	movs	r3, #0
 800290e:	647b      	str	r3, [r7, #68]	; 0x44
 8002910:	2300      	movs	r3, #0
 8002912:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002914:	2300      	movs	r3, #0
 8002916:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002918:	2300      	movs	r3, #0
 800291a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800291c:	4b79      	ldr	r3, [pc, #484]	; (8002b04 <HAL_RCC_GetSysClockFreq+0x200>)
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	f003 030c 	and.w	r3, r3, #12
 8002924:	2b08      	cmp	r3, #8
 8002926:	d00d      	beq.n	8002944 <HAL_RCC_GetSysClockFreq+0x40>
 8002928:	2b08      	cmp	r3, #8
 800292a:	f200 80e1 	bhi.w	8002af0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800292e:	2b00      	cmp	r3, #0
 8002930:	d002      	beq.n	8002938 <HAL_RCC_GetSysClockFreq+0x34>
 8002932:	2b04      	cmp	r3, #4
 8002934:	d003      	beq.n	800293e <HAL_RCC_GetSysClockFreq+0x3a>
 8002936:	e0db      	b.n	8002af0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002938:	4b73      	ldr	r3, [pc, #460]	; (8002b08 <HAL_RCC_GetSysClockFreq+0x204>)
 800293a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800293c:	e0db      	b.n	8002af6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800293e:	4b73      	ldr	r3, [pc, #460]	; (8002b0c <HAL_RCC_GetSysClockFreq+0x208>)
 8002940:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002942:	e0d8      	b.n	8002af6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002944:	4b6f      	ldr	r3, [pc, #444]	; (8002b04 <HAL_RCC_GetSysClockFreq+0x200>)
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800294c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800294e:	4b6d      	ldr	r3, [pc, #436]	; (8002b04 <HAL_RCC_GetSysClockFreq+0x200>)
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002956:	2b00      	cmp	r3, #0
 8002958:	d063      	beq.n	8002a22 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800295a:	4b6a      	ldr	r3, [pc, #424]	; (8002b04 <HAL_RCC_GetSysClockFreq+0x200>)
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	099b      	lsrs	r3, r3, #6
 8002960:	2200      	movs	r2, #0
 8002962:	63bb      	str	r3, [r7, #56]	; 0x38
 8002964:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002966:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002968:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800296c:	633b      	str	r3, [r7, #48]	; 0x30
 800296e:	2300      	movs	r3, #0
 8002970:	637b      	str	r3, [r7, #52]	; 0x34
 8002972:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002976:	4622      	mov	r2, r4
 8002978:	462b      	mov	r3, r5
 800297a:	f04f 0000 	mov.w	r0, #0
 800297e:	f04f 0100 	mov.w	r1, #0
 8002982:	0159      	lsls	r1, r3, #5
 8002984:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002988:	0150      	lsls	r0, r2, #5
 800298a:	4602      	mov	r2, r0
 800298c:	460b      	mov	r3, r1
 800298e:	4621      	mov	r1, r4
 8002990:	1a51      	subs	r1, r2, r1
 8002992:	6139      	str	r1, [r7, #16]
 8002994:	4629      	mov	r1, r5
 8002996:	eb63 0301 	sbc.w	r3, r3, r1
 800299a:	617b      	str	r3, [r7, #20]
 800299c:	f04f 0200 	mov.w	r2, #0
 80029a0:	f04f 0300 	mov.w	r3, #0
 80029a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80029a8:	4659      	mov	r1, fp
 80029aa:	018b      	lsls	r3, r1, #6
 80029ac:	4651      	mov	r1, sl
 80029ae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80029b2:	4651      	mov	r1, sl
 80029b4:	018a      	lsls	r2, r1, #6
 80029b6:	4651      	mov	r1, sl
 80029b8:	ebb2 0801 	subs.w	r8, r2, r1
 80029bc:	4659      	mov	r1, fp
 80029be:	eb63 0901 	sbc.w	r9, r3, r1
 80029c2:	f04f 0200 	mov.w	r2, #0
 80029c6:	f04f 0300 	mov.w	r3, #0
 80029ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80029ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80029d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80029d6:	4690      	mov	r8, r2
 80029d8:	4699      	mov	r9, r3
 80029da:	4623      	mov	r3, r4
 80029dc:	eb18 0303 	adds.w	r3, r8, r3
 80029e0:	60bb      	str	r3, [r7, #8]
 80029e2:	462b      	mov	r3, r5
 80029e4:	eb49 0303 	adc.w	r3, r9, r3
 80029e8:	60fb      	str	r3, [r7, #12]
 80029ea:	f04f 0200 	mov.w	r2, #0
 80029ee:	f04f 0300 	mov.w	r3, #0
 80029f2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80029f6:	4629      	mov	r1, r5
 80029f8:	024b      	lsls	r3, r1, #9
 80029fa:	4621      	mov	r1, r4
 80029fc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002a00:	4621      	mov	r1, r4
 8002a02:	024a      	lsls	r2, r1, #9
 8002a04:	4610      	mov	r0, r2
 8002a06:	4619      	mov	r1, r3
 8002a08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a0e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002a10:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002a14:	f7fd fc34 	bl	8000280 <__aeabi_uldivmod>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	460b      	mov	r3, r1
 8002a1c:	4613      	mov	r3, r2
 8002a1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a20:	e058      	b.n	8002ad4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a22:	4b38      	ldr	r3, [pc, #224]	; (8002b04 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	099b      	lsrs	r3, r3, #6
 8002a28:	2200      	movs	r2, #0
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	4611      	mov	r1, r2
 8002a2e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002a32:	623b      	str	r3, [r7, #32]
 8002a34:	2300      	movs	r3, #0
 8002a36:	627b      	str	r3, [r7, #36]	; 0x24
 8002a38:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002a3c:	4642      	mov	r2, r8
 8002a3e:	464b      	mov	r3, r9
 8002a40:	f04f 0000 	mov.w	r0, #0
 8002a44:	f04f 0100 	mov.w	r1, #0
 8002a48:	0159      	lsls	r1, r3, #5
 8002a4a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a4e:	0150      	lsls	r0, r2, #5
 8002a50:	4602      	mov	r2, r0
 8002a52:	460b      	mov	r3, r1
 8002a54:	4641      	mov	r1, r8
 8002a56:	ebb2 0a01 	subs.w	sl, r2, r1
 8002a5a:	4649      	mov	r1, r9
 8002a5c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002a60:	f04f 0200 	mov.w	r2, #0
 8002a64:	f04f 0300 	mov.w	r3, #0
 8002a68:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002a6c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002a70:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002a74:	ebb2 040a 	subs.w	r4, r2, sl
 8002a78:	eb63 050b 	sbc.w	r5, r3, fp
 8002a7c:	f04f 0200 	mov.w	r2, #0
 8002a80:	f04f 0300 	mov.w	r3, #0
 8002a84:	00eb      	lsls	r3, r5, #3
 8002a86:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002a8a:	00e2      	lsls	r2, r4, #3
 8002a8c:	4614      	mov	r4, r2
 8002a8e:	461d      	mov	r5, r3
 8002a90:	4643      	mov	r3, r8
 8002a92:	18e3      	adds	r3, r4, r3
 8002a94:	603b      	str	r3, [r7, #0]
 8002a96:	464b      	mov	r3, r9
 8002a98:	eb45 0303 	adc.w	r3, r5, r3
 8002a9c:	607b      	str	r3, [r7, #4]
 8002a9e:	f04f 0200 	mov.w	r2, #0
 8002aa2:	f04f 0300 	mov.w	r3, #0
 8002aa6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002aaa:	4629      	mov	r1, r5
 8002aac:	028b      	lsls	r3, r1, #10
 8002aae:	4621      	mov	r1, r4
 8002ab0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ab4:	4621      	mov	r1, r4
 8002ab6:	028a      	lsls	r2, r1, #10
 8002ab8:	4610      	mov	r0, r2
 8002aba:	4619      	mov	r1, r3
 8002abc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002abe:	2200      	movs	r2, #0
 8002ac0:	61bb      	str	r3, [r7, #24]
 8002ac2:	61fa      	str	r2, [r7, #28]
 8002ac4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ac8:	f7fd fbda 	bl	8000280 <__aeabi_uldivmod>
 8002acc:	4602      	mov	r2, r0
 8002ace:	460b      	mov	r3, r1
 8002ad0:	4613      	mov	r3, r2
 8002ad2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002ad4:	4b0b      	ldr	r3, [pc, #44]	; (8002b04 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	0c1b      	lsrs	r3, r3, #16
 8002ada:	f003 0303 	and.w	r3, r3, #3
 8002ade:	3301      	adds	r3, #1
 8002ae0:	005b      	lsls	r3, r3, #1
 8002ae2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002ae4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002ae6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ae8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aec:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002aee:	e002      	b.n	8002af6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002af0:	4b05      	ldr	r3, [pc, #20]	; (8002b08 <HAL_RCC_GetSysClockFreq+0x204>)
 8002af2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002af4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002af6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	3750      	adds	r7, #80	; 0x50
 8002afc:	46bd      	mov	sp, r7
 8002afe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b02:	bf00      	nop
 8002b04:	40023800 	.word	0x40023800
 8002b08:	00f42400 	.word	0x00f42400
 8002b0c:	007a1200 	.word	0x007a1200

08002b10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b10:	b480      	push	{r7}
 8002b12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b14:	4b03      	ldr	r3, [pc, #12]	; (8002b24 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b16:	681b      	ldr	r3, [r3, #0]
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b20:	4770      	bx	lr
 8002b22:	bf00      	nop
 8002b24:	20000000 	.word	0x20000000

08002b28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002b2c:	f7ff fff0 	bl	8002b10 <HAL_RCC_GetHCLKFreq>
 8002b30:	4602      	mov	r2, r0
 8002b32:	4b05      	ldr	r3, [pc, #20]	; (8002b48 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	0a9b      	lsrs	r3, r3, #10
 8002b38:	f003 0307 	and.w	r3, r3, #7
 8002b3c:	4903      	ldr	r1, [pc, #12]	; (8002b4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b3e:	5ccb      	ldrb	r3, [r1, r3]
 8002b40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	bd80      	pop	{r7, pc}
 8002b48:	40023800 	.word	0x40023800
 8002b4c:	08004bac 	.word	0x08004bac

08002b50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002b54:	f7ff ffdc 	bl	8002b10 <HAL_RCC_GetHCLKFreq>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	4b05      	ldr	r3, [pc, #20]	; (8002b70 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	0b5b      	lsrs	r3, r3, #13
 8002b60:	f003 0307 	and.w	r3, r3, #7
 8002b64:	4903      	ldr	r1, [pc, #12]	; (8002b74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b66:	5ccb      	ldrb	r3, [r1, r3]
 8002b68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	bd80      	pop	{r7, pc}
 8002b70:	40023800 	.word	0x40023800
 8002b74:	08004bac 	.word	0x08004bac

08002b78 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b082      	sub	sp, #8
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d101      	bne.n	8002b8a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	e041      	b.n	8002c0e <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b90:	b2db      	uxtb	r3, r3
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d106      	bne.n	8002ba4 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	f7fe f89c 	bl	8000cdc <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2202      	movs	r2, #2
 8002ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681a      	ldr	r2, [r3, #0]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	3304      	adds	r3, #4
 8002bb4:	4619      	mov	r1, r3
 8002bb6:	4610      	mov	r0, r2
 8002bb8:	f000 fa60 	bl	800307c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2201      	movs	r2, #1
 8002bd0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2201      	movs	r2, #1
 8002be0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2201      	movs	r2, #1
 8002be8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2201      	movs	r2, #1
 8002bf0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2201      	movs	r2, #1
 8002c00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2201      	movs	r2, #1
 8002c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c0c:	2300      	movs	r3, #0
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3708      	adds	r7, #8
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}
	...

08002c18 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b084      	sub	sp, #16
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
 8002c20:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d109      	bne.n	8002c3c <HAL_TIM_PWM_Start+0x24>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c2e:	b2db      	uxtb	r3, r3
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	bf14      	ite	ne
 8002c34:	2301      	movne	r3, #1
 8002c36:	2300      	moveq	r3, #0
 8002c38:	b2db      	uxtb	r3, r3
 8002c3a:	e022      	b.n	8002c82 <HAL_TIM_PWM_Start+0x6a>
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	2b04      	cmp	r3, #4
 8002c40:	d109      	bne.n	8002c56 <HAL_TIM_PWM_Start+0x3e>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	2b01      	cmp	r3, #1
 8002c4c:	bf14      	ite	ne
 8002c4e:	2301      	movne	r3, #1
 8002c50:	2300      	moveq	r3, #0
 8002c52:	b2db      	uxtb	r3, r3
 8002c54:	e015      	b.n	8002c82 <HAL_TIM_PWM_Start+0x6a>
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	2b08      	cmp	r3, #8
 8002c5a:	d109      	bne.n	8002c70 <HAL_TIM_PWM_Start+0x58>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c62:	b2db      	uxtb	r3, r3
 8002c64:	2b01      	cmp	r3, #1
 8002c66:	bf14      	ite	ne
 8002c68:	2301      	movne	r3, #1
 8002c6a:	2300      	moveq	r3, #0
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	e008      	b.n	8002c82 <HAL_TIM_PWM_Start+0x6a>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c76:	b2db      	uxtb	r3, r3
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	bf14      	ite	ne
 8002c7c:	2301      	movne	r3, #1
 8002c7e:	2300      	moveq	r3, #0
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d001      	beq.n	8002c8a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e068      	b.n	8002d5c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d104      	bne.n	8002c9a <HAL_TIM_PWM_Start+0x82>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2202      	movs	r2, #2
 8002c94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c98:	e013      	b.n	8002cc2 <HAL_TIM_PWM_Start+0xaa>
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	2b04      	cmp	r3, #4
 8002c9e:	d104      	bne.n	8002caa <HAL_TIM_PWM_Start+0x92>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2202      	movs	r2, #2
 8002ca4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ca8:	e00b      	b.n	8002cc2 <HAL_TIM_PWM_Start+0xaa>
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	2b08      	cmp	r3, #8
 8002cae:	d104      	bne.n	8002cba <HAL_TIM_PWM_Start+0xa2>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2202      	movs	r2, #2
 8002cb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002cb8:	e003      	b.n	8002cc2 <HAL_TIM_PWM_Start+0xaa>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2202      	movs	r2, #2
 8002cbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	6839      	ldr	r1, [r7, #0]
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f000 fbe2 	bl	8003494 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a23      	ldr	r2, [pc, #140]	; (8002d64 <HAL_TIM_PWM_Start+0x14c>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d107      	bne.n	8002cea <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ce8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a1d      	ldr	r2, [pc, #116]	; (8002d64 <HAL_TIM_PWM_Start+0x14c>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d018      	beq.n	8002d26 <HAL_TIM_PWM_Start+0x10e>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cfc:	d013      	beq.n	8002d26 <HAL_TIM_PWM_Start+0x10e>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a19      	ldr	r2, [pc, #100]	; (8002d68 <HAL_TIM_PWM_Start+0x150>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d00e      	beq.n	8002d26 <HAL_TIM_PWM_Start+0x10e>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a17      	ldr	r2, [pc, #92]	; (8002d6c <HAL_TIM_PWM_Start+0x154>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d009      	beq.n	8002d26 <HAL_TIM_PWM_Start+0x10e>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a16      	ldr	r2, [pc, #88]	; (8002d70 <HAL_TIM_PWM_Start+0x158>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d004      	beq.n	8002d26 <HAL_TIM_PWM_Start+0x10e>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a14      	ldr	r2, [pc, #80]	; (8002d74 <HAL_TIM_PWM_Start+0x15c>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d111      	bne.n	8002d4a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	f003 0307 	and.w	r3, r3, #7
 8002d30:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	2b06      	cmp	r3, #6
 8002d36:	d010      	beq.n	8002d5a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	681a      	ldr	r2, [r3, #0]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f042 0201 	orr.w	r2, r2, #1
 8002d46:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d48:	e007      	b.n	8002d5a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f042 0201 	orr.w	r2, r2, #1
 8002d58:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002d5a:	2300      	movs	r3, #0
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	3710      	adds	r7, #16
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}
 8002d64:	40010000 	.word	0x40010000
 8002d68:	40000400 	.word	0x40000400
 8002d6c:	40000800 	.word	0x40000800
 8002d70:	40000c00 	.word	0x40000c00
 8002d74:	40014000 	.word	0x40014000

08002d78 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b082      	sub	sp, #8
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
 8002d80:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	2200      	movs	r2, #0
 8002d88:	6839      	ldr	r1, [r7, #0]
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f000 fb82 	bl	8003494 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a29      	ldr	r2, [pc, #164]	; (8002e3c <HAL_TIM_PWM_Stop+0xc4>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d117      	bne.n	8002dca <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	6a1a      	ldr	r2, [r3, #32]
 8002da0:	f241 1311 	movw	r3, #4369	; 0x1111
 8002da4:	4013      	ands	r3, r2
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d10f      	bne.n	8002dca <HAL_TIM_PWM_Stop+0x52>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	6a1a      	ldr	r2, [r3, #32]
 8002db0:	f240 4344 	movw	r3, #1092	; 0x444
 8002db4:	4013      	ands	r3, r2
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d107      	bne.n	8002dca <HAL_TIM_PWM_Stop+0x52>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002dc8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	6a1a      	ldr	r2, [r3, #32]
 8002dd0:	f241 1311 	movw	r3, #4369	; 0x1111
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d10f      	bne.n	8002dfa <HAL_TIM_PWM_Stop+0x82>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	6a1a      	ldr	r2, [r3, #32]
 8002de0:	f240 4344 	movw	r3, #1092	; 0x444
 8002de4:	4013      	ands	r3, r2
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d107      	bne.n	8002dfa <HAL_TIM_PWM_Stop+0x82>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f022 0201 	bic.w	r2, r2, #1
 8002df8:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d104      	bne.n	8002e0a <HAL_TIM_PWM_Stop+0x92>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2201      	movs	r2, #1
 8002e04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e08:	e013      	b.n	8002e32 <HAL_TIM_PWM_Stop+0xba>
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	2b04      	cmp	r3, #4
 8002e0e:	d104      	bne.n	8002e1a <HAL_TIM_PWM_Stop+0xa2>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2201      	movs	r2, #1
 8002e14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e18:	e00b      	b.n	8002e32 <HAL_TIM_PWM_Stop+0xba>
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	2b08      	cmp	r3, #8
 8002e1e:	d104      	bne.n	8002e2a <HAL_TIM_PWM_Stop+0xb2>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2201      	movs	r2, #1
 8002e24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e28:	e003      	b.n	8002e32 <HAL_TIM_PWM_Stop+0xba>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8002e32:	2300      	movs	r3, #0
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	3708      	adds	r7, #8
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd80      	pop	{r7, pc}
 8002e3c:	40010000 	.word	0x40010000

08002e40 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b086      	sub	sp, #24
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	60f8      	str	r0, [r7, #12]
 8002e48:	60b9      	str	r1, [r7, #8]
 8002e4a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d101      	bne.n	8002e5e <HAL_TIM_OC_ConfigChannel+0x1e>
 8002e5a:	2302      	movs	r3, #2
 8002e5c:	e048      	b.n	8002ef0 <HAL_TIM_OC_ConfigChannel+0xb0>
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	2201      	movs	r2, #1
 8002e62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2b0c      	cmp	r3, #12
 8002e6a:	d839      	bhi.n	8002ee0 <HAL_TIM_OC_ConfigChannel+0xa0>
 8002e6c:	a201      	add	r2, pc, #4	; (adr r2, 8002e74 <HAL_TIM_OC_ConfigChannel+0x34>)
 8002e6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e72:	bf00      	nop
 8002e74:	08002ea9 	.word	0x08002ea9
 8002e78:	08002ee1 	.word	0x08002ee1
 8002e7c:	08002ee1 	.word	0x08002ee1
 8002e80:	08002ee1 	.word	0x08002ee1
 8002e84:	08002eb7 	.word	0x08002eb7
 8002e88:	08002ee1 	.word	0x08002ee1
 8002e8c:	08002ee1 	.word	0x08002ee1
 8002e90:	08002ee1 	.word	0x08002ee1
 8002e94:	08002ec5 	.word	0x08002ec5
 8002e98:	08002ee1 	.word	0x08002ee1
 8002e9c:	08002ee1 	.word	0x08002ee1
 8002ea0:	08002ee1 	.word	0x08002ee1
 8002ea4:	08002ed3 	.word	0x08002ed3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	68b9      	ldr	r1, [r7, #8]
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f000 f964 	bl	800317c <TIM_OC1_SetConfig>
      break;
 8002eb4:	e017      	b.n	8002ee6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	68b9      	ldr	r1, [r7, #8]
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f000 f9c3 	bl	8003248 <TIM_OC2_SetConfig>
      break;
 8002ec2:	e010      	b.n	8002ee6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	68b9      	ldr	r1, [r7, #8]
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f000 fa28 	bl	8003320 <TIM_OC3_SetConfig>
      break;
 8002ed0:	e009      	b.n	8002ee6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	68b9      	ldr	r1, [r7, #8]
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f000 fa8b 	bl	80033f4 <TIM_OC4_SetConfig>
      break;
 8002ede:	e002      	b.n	8002ee6 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	75fb      	strb	r3, [r7, #23]
      break;
 8002ee4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002eee:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	3718      	adds	r7, #24
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}

08002ef8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b086      	sub	sp, #24
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	60f8      	str	r0, [r7, #12]
 8002f00:	60b9      	str	r1, [r7, #8]
 8002f02:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f04:	2300      	movs	r3, #0
 8002f06:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f0e:	2b01      	cmp	r3, #1
 8002f10:	d101      	bne.n	8002f16 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002f12:	2302      	movs	r3, #2
 8002f14:	e0ae      	b.n	8003074 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	2201      	movs	r2, #1
 8002f1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2b0c      	cmp	r3, #12
 8002f22:	f200 809f 	bhi.w	8003064 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002f26:	a201      	add	r2, pc, #4	; (adr r2, 8002f2c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002f28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f2c:	08002f61 	.word	0x08002f61
 8002f30:	08003065 	.word	0x08003065
 8002f34:	08003065 	.word	0x08003065
 8002f38:	08003065 	.word	0x08003065
 8002f3c:	08002fa1 	.word	0x08002fa1
 8002f40:	08003065 	.word	0x08003065
 8002f44:	08003065 	.word	0x08003065
 8002f48:	08003065 	.word	0x08003065
 8002f4c:	08002fe3 	.word	0x08002fe3
 8002f50:	08003065 	.word	0x08003065
 8002f54:	08003065 	.word	0x08003065
 8002f58:	08003065 	.word	0x08003065
 8002f5c:	08003023 	.word	0x08003023
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	68b9      	ldr	r1, [r7, #8]
 8002f66:	4618      	mov	r0, r3
 8002f68:	f000 f908 	bl	800317c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	699a      	ldr	r2, [r3, #24]
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f042 0208 	orr.w	r2, r2, #8
 8002f7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	699a      	ldr	r2, [r3, #24]
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f022 0204 	bic.w	r2, r2, #4
 8002f8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	6999      	ldr	r1, [r3, #24]
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	691a      	ldr	r2, [r3, #16]
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	430a      	orrs	r2, r1
 8002f9c:	619a      	str	r2, [r3, #24]
      break;
 8002f9e:	e064      	b.n	800306a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	68b9      	ldr	r1, [r7, #8]
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f000 f94e 	bl	8003248 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	699a      	ldr	r2, [r3, #24]
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002fba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	699a      	ldr	r2, [r3, #24]
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	6999      	ldr	r1, [r3, #24]
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	691b      	ldr	r3, [r3, #16]
 8002fd6:	021a      	lsls	r2, r3, #8
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	430a      	orrs	r2, r1
 8002fde:	619a      	str	r2, [r3, #24]
      break;
 8002fe0:	e043      	b.n	800306a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	68b9      	ldr	r1, [r7, #8]
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f000 f999 	bl	8003320 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	69da      	ldr	r2, [r3, #28]
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f042 0208 	orr.w	r2, r2, #8
 8002ffc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	69da      	ldr	r2, [r3, #28]
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f022 0204 	bic.w	r2, r2, #4
 800300c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	69d9      	ldr	r1, [r3, #28]
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	691a      	ldr	r2, [r3, #16]
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	430a      	orrs	r2, r1
 800301e:	61da      	str	r2, [r3, #28]
      break;
 8003020:	e023      	b.n	800306a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	68b9      	ldr	r1, [r7, #8]
 8003028:	4618      	mov	r0, r3
 800302a:	f000 f9e3 	bl	80033f4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	69da      	ldr	r2, [r3, #28]
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800303c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	69da      	ldr	r2, [r3, #28]
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800304c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	69d9      	ldr	r1, [r3, #28]
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	691b      	ldr	r3, [r3, #16]
 8003058:	021a      	lsls	r2, r3, #8
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	430a      	orrs	r2, r1
 8003060:	61da      	str	r2, [r3, #28]
      break;
 8003062:	e002      	b.n	800306a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	75fb      	strb	r3, [r7, #23]
      break;
 8003068:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	2200      	movs	r2, #0
 800306e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003072:	7dfb      	ldrb	r3, [r7, #23]
}
 8003074:	4618      	mov	r0, r3
 8003076:	3718      	adds	r7, #24
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}

0800307c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800307c:	b480      	push	{r7}
 800307e:	b085      	sub	sp, #20
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
 8003084:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	4a34      	ldr	r2, [pc, #208]	; (8003160 <TIM_Base_SetConfig+0xe4>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d00f      	beq.n	80030b4 <TIM_Base_SetConfig+0x38>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800309a:	d00b      	beq.n	80030b4 <TIM_Base_SetConfig+0x38>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	4a31      	ldr	r2, [pc, #196]	; (8003164 <TIM_Base_SetConfig+0xe8>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d007      	beq.n	80030b4 <TIM_Base_SetConfig+0x38>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	4a30      	ldr	r2, [pc, #192]	; (8003168 <TIM_Base_SetConfig+0xec>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d003      	beq.n	80030b4 <TIM_Base_SetConfig+0x38>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	4a2f      	ldr	r2, [pc, #188]	; (800316c <TIM_Base_SetConfig+0xf0>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d108      	bne.n	80030c6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	68fa      	ldr	r2, [r7, #12]
 80030c2:	4313      	orrs	r3, r2
 80030c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	4a25      	ldr	r2, [pc, #148]	; (8003160 <TIM_Base_SetConfig+0xe4>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d01b      	beq.n	8003106 <TIM_Base_SetConfig+0x8a>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030d4:	d017      	beq.n	8003106 <TIM_Base_SetConfig+0x8a>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	4a22      	ldr	r2, [pc, #136]	; (8003164 <TIM_Base_SetConfig+0xe8>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d013      	beq.n	8003106 <TIM_Base_SetConfig+0x8a>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	4a21      	ldr	r2, [pc, #132]	; (8003168 <TIM_Base_SetConfig+0xec>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d00f      	beq.n	8003106 <TIM_Base_SetConfig+0x8a>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	4a20      	ldr	r2, [pc, #128]	; (800316c <TIM_Base_SetConfig+0xf0>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d00b      	beq.n	8003106 <TIM_Base_SetConfig+0x8a>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	4a1f      	ldr	r2, [pc, #124]	; (8003170 <TIM_Base_SetConfig+0xf4>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d007      	beq.n	8003106 <TIM_Base_SetConfig+0x8a>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	4a1e      	ldr	r2, [pc, #120]	; (8003174 <TIM_Base_SetConfig+0xf8>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d003      	beq.n	8003106 <TIM_Base_SetConfig+0x8a>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	4a1d      	ldr	r2, [pc, #116]	; (8003178 <TIM_Base_SetConfig+0xfc>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d108      	bne.n	8003118 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800310c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	68db      	ldr	r3, [r3, #12]
 8003112:	68fa      	ldr	r2, [r7, #12]
 8003114:	4313      	orrs	r3, r2
 8003116:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	695b      	ldr	r3, [r3, #20]
 8003122:	4313      	orrs	r3, r2
 8003124:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	68fa      	ldr	r2, [r7, #12]
 800312a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	689a      	ldr	r2, [r3, #8]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	681a      	ldr	r2, [r3, #0]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	4a08      	ldr	r2, [pc, #32]	; (8003160 <TIM_Base_SetConfig+0xe4>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d103      	bne.n	800314c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	691a      	ldr	r2, [r3, #16]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2201      	movs	r2, #1
 8003150:	615a      	str	r2, [r3, #20]
}
 8003152:	bf00      	nop
 8003154:	3714      	adds	r7, #20
 8003156:	46bd      	mov	sp, r7
 8003158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315c:	4770      	bx	lr
 800315e:	bf00      	nop
 8003160:	40010000 	.word	0x40010000
 8003164:	40000400 	.word	0x40000400
 8003168:	40000800 	.word	0x40000800
 800316c:	40000c00 	.word	0x40000c00
 8003170:	40014000 	.word	0x40014000
 8003174:	40014400 	.word	0x40014400
 8003178:	40014800 	.word	0x40014800

0800317c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800317c:	b480      	push	{r7}
 800317e:	b087      	sub	sp, #28
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
 8003184:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6a1b      	ldr	r3, [r3, #32]
 800318a:	f023 0201 	bic.w	r2, r3, #1
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6a1b      	ldr	r3, [r3, #32]
 8003196:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	699b      	ldr	r3, [r3, #24]
 80031a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	f023 0303 	bic.w	r3, r3, #3
 80031b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	68fa      	ldr	r2, [r7, #12]
 80031ba:	4313      	orrs	r3, r2
 80031bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	f023 0302 	bic.w	r3, r3, #2
 80031c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	697a      	ldr	r2, [r7, #20]
 80031cc:	4313      	orrs	r3, r2
 80031ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	4a1c      	ldr	r2, [pc, #112]	; (8003244 <TIM_OC1_SetConfig+0xc8>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d10c      	bne.n	80031f2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	f023 0308 	bic.w	r3, r3, #8
 80031de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	68db      	ldr	r3, [r3, #12]
 80031e4:	697a      	ldr	r2, [r7, #20]
 80031e6:	4313      	orrs	r3, r2
 80031e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	f023 0304 	bic.w	r3, r3, #4
 80031f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	4a13      	ldr	r2, [pc, #76]	; (8003244 <TIM_OC1_SetConfig+0xc8>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d111      	bne.n	800321e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003200:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003208:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	695b      	ldr	r3, [r3, #20]
 800320e:	693a      	ldr	r2, [r7, #16]
 8003210:	4313      	orrs	r3, r2
 8003212:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	699b      	ldr	r3, [r3, #24]
 8003218:	693a      	ldr	r2, [r7, #16]
 800321a:	4313      	orrs	r3, r2
 800321c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	693a      	ldr	r2, [r7, #16]
 8003222:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	68fa      	ldr	r2, [r7, #12]
 8003228:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	685a      	ldr	r2, [r3, #4]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	697a      	ldr	r2, [r7, #20]
 8003236:	621a      	str	r2, [r3, #32]
}
 8003238:	bf00      	nop
 800323a:	371c      	adds	r7, #28
 800323c:	46bd      	mov	sp, r7
 800323e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003242:	4770      	bx	lr
 8003244:	40010000 	.word	0x40010000

08003248 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003248:	b480      	push	{r7}
 800324a:	b087      	sub	sp, #28
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
 8003250:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6a1b      	ldr	r3, [r3, #32]
 8003256:	f023 0210 	bic.w	r2, r3, #16
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6a1b      	ldr	r3, [r3, #32]
 8003262:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	699b      	ldr	r3, [r3, #24]
 800326e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003276:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800327e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	021b      	lsls	r3, r3, #8
 8003286:	68fa      	ldr	r2, [r7, #12]
 8003288:	4313      	orrs	r3, r2
 800328a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800328c:	697b      	ldr	r3, [r7, #20]
 800328e:	f023 0320 	bic.w	r3, r3, #32
 8003292:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	011b      	lsls	r3, r3, #4
 800329a:	697a      	ldr	r2, [r7, #20]
 800329c:	4313      	orrs	r3, r2
 800329e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	4a1e      	ldr	r2, [pc, #120]	; (800331c <TIM_OC2_SetConfig+0xd4>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d10d      	bne.n	80032c4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80032ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	68db      	ldr	r3, [r3, #12]
 80032b4:	011b      	lsls	r3, r3, #4
 80032b6:	697a      	ldr	r2, [r7, #20]
 80032b8:	4313      	orrs	r3, r2
 80032ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80032c2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	4a15      	ldr	r2, [pc, #84]	; (800331c <TIM_OC2_SetConfig+0xd4>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d113      	bne.n	80032f4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80032d2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80032da:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	695b      	ldr	r3, [r3, #20]
 80032e0:	009b      	lsls	r3, r3, #2
 80032e2:	693a      	ldr	r2, [r7, #16]
 80032e4:	4313      	orrs	r3, r2
 80032e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	699b      	ldr	r3, [r3, #24]
 80032ec:	009b      	lsls	r3, r3, #2
 80032ee:	693a      	ldr	r2, [r7, #16]
 80032f0:	4313      	orrs	r3, r2
 80032f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	693a      	ldr	r2, [r7, #16]
 80032f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	68fa      	ldr	r2, [r7, #12]
 80032fe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	685a      	ldr	r2, [r3, #4]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	697a      	ldr	r2, [r7, #20]
 800330c:	621a      	str	r2, [r3, #32]
}
 800330e:	bf00      	nop
 8003310:	371c      	adds	r7, #28
 8003312:	46bd      	mov	sp, r7
 8003314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003318:	4770      	bx	lr
 800331a:	bf00      	nop
 800331c:	40010000 	.word	0x40010000

08003320 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003320:	b480      	push	{r7}
 8003322:	b087      	sub	sp, #28
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
 8003328:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6a1b      	ldr	r3, [r3, #32]
 800332e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6a1b      	ldr	r3, [r3, #32]
 800333a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	69db      	ldr	r3, [r3, #28]
 8003346:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800334e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	f023 0303 	bic.w	r3, r3, #3
 8003356:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	68fa      	ldr	r2, [r7, #12]
 800335e:	4313      	orrs	r3, r2
 8003360:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003368:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	021b      	lsls	r3, r3, #8
 8003370:	697a      	ldr	r2, [r7, #20]
 8003372:	4313      	orrs	r3, r2
 8003374:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	4a1d      	ldr	r2, [pc, #116]	; (80033f0 <TIM_OC3_SetConfig+0xd0>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d10d      	bne.n	800339a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003384:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	68db      	ldr	r3, [r3, #12]
 800338a:	021b      	lsls	r3, r3, #8
 800338c:	697a      	ldr	r2, [r7, #20]
 800338e:	4313      	orrs	r3, r2
 8003390:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003398:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	4a14      	ldr	r2, [pc, #80]	; (80033f0 <TIM_OC3_SetConfig+0xd0>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d113      	bne.n	80033ca <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80033a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80033b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	695b      	ldr	r3, [r3, #20]
 80033b6:	011b      	lsls	r3, r3, #4
 80033b8:	693a      	ldr	r2, [r7, #16]
 80033ba:	4313      	orrs	r3, r2
 80033bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	699b      	ldr	r3, [r3, #24]
 80033c2:	011b      	lsls	r3, r3, #4
 80033c4:	693a      	ldr	r2, [r7, #16]
 80033c6:	4313      	orrs	r3, r2
 80033c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	693a      	ldr	r2, [r7, #16]
 80033ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	68fa      	ldr	r2, [r7, #12]
 80033d4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	685a      	ldr	r2, [r3, #4]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	697a      	ldr	r2, [r7, #20]
 80033e2:	621a      	str	r2, [r3, #32]
}
 80033e4:	bf00      	nop
 80033e6:	371c      	adds	r7, #28
 80033e8:	46bd      	mov	sp, r7
 80033ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ee:	4770      	bx	lr
 80033f0:	40010000 	.word	0x40010000

080033f4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b087      	sub	sp, #28
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
 80033fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6a1b      	ldr	r3, [r3, #32]
 8003402:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6a1b      	ldr	r3, [r3, #32]
 800340e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	69db      	ldr	r3, [r3, #28]
 800341a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003422:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800342a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	021b      	lsls	r3, r3, #8
 8003432:	68fa      	ldr	r2, [r7, #12]
 8003434:	4313      	orrs	r3, r2
 8003436:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800343e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	031b      	lsls	r3, r3, #12
 8003446:	693a      	ldr	r2, [r7, #16]
 8003448:	4313      	orrs	r3, r2
 800344a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	4a10      	ldr	r2, [pc, #64]	; (8003490 <TIM_OC4_SetConfig+0x9c>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d109      	bne.n	8003468 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800345a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	695b      	ldr	r3, [r3, #20]
 8003460:	019b      	lsls	r3, r3, #6
 8003462:	697a      	ldr	r2, [r7, #20]
 8003464:	4313      	orrs	r3, r2
 8003466:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	697a      	ldr	r2, [r7, #20]
 800346c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	68fa      	ldr	r2, [r7, #12]
 8003472:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	685a      	ldr	r2, [r3, #4]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	693a      	ldr	r2, [r7, #16]
 8003480:	621a      	str	r2, [r3, #32]
}
 8003482:	bf00      	nop
 8003484:	371c      	adds	r7, #28
 8003486:	46bd      	mov	sp, r7
 8003488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348c:	4770      	bx	lr
 800348e:	bf00      	nop
 8003490:	40010000 	.word	0x40010000

08003494 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003494:	b480      	push	{r7}
 8003496:	b087      	sub	sp, #28
 8003498:	af00      	add	r7, sp, #0
 800349a:	60f8      	str	r0, [r7, #12]
 800349c:	60b9      	str	r1, [r7, #8]
 800349e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	f003 031f 	and.w	r3, r3, #31
 80034a6:	2201      	movs	r2, #1
 80034a8:	fa02 f303 	lsl.w	r3, r2, r3
 80034ac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	6a1a      	ldr	r2, [r3, #32]
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	43db      	mvns	r3, r3
 80034b6:	401a      	ands	r2, r3
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	6a1a      	ldr	r2, [r3, #32]
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	f003 031f 	and.w	r3, r3, #31
 80034c6:	6879      	ldr	r1, [r7, #4]
 80034c8:	fa01 f303 	lsl.w	r3, r1, r3
 80034cc:	431a      	orrs	r2, r3
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	621a      	str	r2, [r3, #32]
}
 80034d2:	bf00      	nop
 80034d4:	371c      	adds	r7, #28
 80034d6:	46bd      	mov	sp, r7
 80034d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034dc:	4770      	bx	lr
	...

080034e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b085      	sub	sp, #20
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
 80034e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034f0:	2b01      	cmp	r3, #1
 80034f2:	d101      	bne.n	80034f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80034f4:	2302      	movs	r3, #2
 80034f6:	e050      	b.n	800359a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2201      	movs	r2, #1
 80034fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2202      	movs	r2, #2
 8003504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800351e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	68fa      	ldr	r2, [r7, #12]
 8003526:	4313      	orrs	r3, r2
 8003528:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	68fa      	ldr	r2, [r7, #12]
 8003530:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a1c      	ldr	r2, [pc, #112]	; (80035a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d018      	beq.n	800356e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003544:	d013      	beq.n	800356e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a18      	ldr	r2, [pc, #96]	; (80035ac <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d00e      	beq.n	800356e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a16      	ldr	r2, [pc, #88]	; (80035b0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d009      	beq.n	800356e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a15      	ldr	r2, [pc, #84]	; (80035b4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d004      	beq.n	800356e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a13      	ldr	r2, [pc, #76]	; (80035b8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d10c      	bne.n	8003588 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003574:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	68ba      	ldr	r2, [r7, #8]
 800357c:	4313      	orrs	r3, r2
 800357e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	68ba      	ldr	r2, [r7, #8]
 8003586:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2201      	movs	r2, #1
 800358c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2200      	movs	r2, #0
 8003594:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003598:	2300      	movs	r3, #0
}
 800359a:	4618      	mov	r0, r3
 800359c:	3714      	adds	r7, #20
 800359e:	46bd      	mov	sp, r7
 80035a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a4:	4770      	bx	lr
 80035a6:	bf00      	nop
 80035a8:	40010000 	.word	0x40010000
 80035ac:	40000400 	.word	0x40000400
 80035b0:	40000800 	.word	0x40000800
 80035b4:	40000c00 	.word	0x40000c00
 80035b8:	40014000 	.word	0x40014000

080035bc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80035bc:	b480      	push	{r7}
 80035be:	b085      	sub	sp, #20
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
 80035c4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80035c6:	2300      	movs	r3, #0
 80035c8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d101      	bne.n	80035d8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80035d4:	2302      	movs	r3, #2
 80035d6:	e03d      	b.n	8003654 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2201      	movs	r2, #1
 80035dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	68db      	ldr	r3, [r3, #12]
 80035ea:	4313      	orrs	r3, r2
 80035ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	4313      	orrs	r3, r2
 80035fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	4313      	orrs	r3, r2
 8003608:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4313      	orrs	r3, r2
 8003616:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	691b      	ldr	r3, [r3, #16]
 8003622:	4313      	orrs	r3, r2
 8003624:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	695b      	ldr	r3, [r3, #20]
 8003630:	4313      	orrs	r3, r2
 8003632:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	69db      	ldr	r3, [r3, #28]
 800363e:	4313      	orrs	r3, r2
 8003640:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	68fa      	ldr	r2, [r7, #12]
 8003648:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2200      	movs	r2, #0
 800364e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003652:	2300      	movs	r3, #0
}
 8003654:	4618      	mov	r0, r3
 8003656:	3714      	adds	r7, #20
 8003658:	46bd      	mov	sp, r7
 800365a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365e:	4770      	bx	lr

08003660 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b082      	sub	sp, #8
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d101      	bne.n	8003672 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	e03f      	b.n	80036f2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003678:	b2db      	uxtb	r3, r3
 800367a:	2b00      	cmp	r3, #0
 800367c:	d106      	bne.n	800368c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2200      	movs	r2, #0
 8003682:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f7fd fb84 	bl	8000d94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2224      	movs	r2, #36	; 0x24
 8003690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	68da      	ldr	r2, [r3, #12]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80036a2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80036a4:	6878      	ldr	r0, [r7, #4]
 80036a6:	f000 f829 	bl	80036fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	691a      	ldr	r2, [r3, #16]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80036b8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	695a      	ldr	r2, [r3, #20]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80036c8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	68da      	ldr	r2, [r3, #12]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80036d8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2200      	movs	r2, #0
 80036de:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2220      	movs	r2, #32
 80036e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2220      	movs	r2, #32
 80036ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80036f0:	2300      	movs	r3, #0
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	3708      	adds	r7, #8
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}
	...

080036fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80036fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003700:	b0c0      	sub	sp, #256	; 0x100
 8003702:	af00      	add	r7, sp, #0
 8003704:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003708:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	691b      	ldr	r3, [r3, #16]
 8003710:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003714:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003718:	68d9      	ldr	r1, [r3, #12]
 800371a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800371e:	681a      	ldr	r2, [r3, #0]
 8003720:	ea40 0301 	orr.w	r3, r0, r1
 8003724:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003726:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800372a:	689a      	ldr	r2, [r3, #8]
 800372c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003730:	691b      	ldr	r3, [r3, #16]
 8003732:	431a      	orrs	r2, r3
 8003734:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003738:	695b      	ldr	r3, [r3, #20]
 800373a:	431a      	orrs	r2, r3
 800373c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003740:	69db      	ldr	r3, [r3, #28]
 8003742:	4313      	orrs	r3, r2
 8003744:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003748:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	68db      	ldr	r3, [r3, #12]
 8003750:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003754:	f021 010c 	bic.w	r1, r1, #12
 8003758:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003762:	430b      	orrs	r3, r1
 8003764:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003766:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	695b      	ldr	r3, [r3, #20]
 800376e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003772:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003776:	6999      	ldr	r1, [r3, #24]
 8003778:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	ea40 0301 	orr.w	r3, r0, r1
 8003782:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003784:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003788:	681a      	ldr	r2, [r3, #0]
 800378a:	4b8f      	ldr	r3, [pc, #572]	; (80039c8 <UART_SetConfig+0x2cc>)
 800378c:	429a      	cmp	r2, r3
 800378e:	d005      	beq.n	800379c <UART_SetConfig+0xa0>
 8003790:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003794:	681a      	ldr	r2, [r3, #0]
 8003796:	4b8d      	ldr	r3, [pc, #564]	; (80039cc <UART_SetConfig+0x2d0>)
 8003798:	429a      	cmp	r2, r3
 800379a:	d104      	bne.n	80037a6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800379c:	f7ff f9d8 	bl	8002b50 <HAL_RCC_GetPCLK2Freq>
 80037a0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80037a4:	e003      	b.n	80037ae <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80037a6:	f7ff f9bf 	bl	8002b28 <HAL_RCC_GetPCLK1Freq>
 80037aa:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80037ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037b2:	69db      	ldr	r3, [r3, #28]
 80037b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037b8:	f040 810c 	bne.w	80039d4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80037bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80037c0:	2200      	movs	r2, #0
 80037c2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80037c6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80037ca:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80037ce:	4622      	mov	r2, r4
 80037d0:	462b      	mov	r3, r5
 80037d2:	1891      	adds	r1, r2, r2
 80037d4:	65b9      	str	r1, [r7, #88]	; 0x58
 80037d6:	415b      	adcs	r3, r3
 80037d8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80037da:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80037de:	4621      	mov	r1, r4
 80037e0:	eb12 0801 	adds.w	r8, r2, r1
 80037e4:	4629      	mov	r1, r5
 80037e6:	eb43 0901 	adc.w	r9, r3, r1
 80037ea:	f04f 0200 	mov.w	r2, #0
 80037ee:	f04f 0300 	mov.w	r3, #0
 80037f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80037f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80037fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80037fe:	4690      	mov	r8, r2
 8003800:	4699      	mov	r9, r3
 8003802:	4623      	mov	r3, r4
 8003804:	eb18 0303 	adds.w	r3, r8, r3
 8003808:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800380c:	462b      	mov	r3, r5
 800380e:	eb49 0303 	adc.w	r3, r9, r3
 8003812:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003816:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	2200      	movs	r2, #0
 800381e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003822:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003826:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800382a:	460b      	mov	r3, r1
 800382c:	18db      	adds	r3, r3, r3
 800382e:	653b      	str	r3, [r7, #80]	; 0x50
 8003830:	4613      	mov	r3, r2
 8003832:	eb42 0303 	adc.w	r3, r2, r3
 8003836:	657b      	str	r3, [r7, #84]	; 0x54
 8003838:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800383c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003840:	f7fc fd1e 	bl	8000280 <__aeabi_uldivmod>
 8003844:	4602      	mov	r2, r0
 8003846:	460b      	mov	r3, r1
 8003848:	4b61      	ldr	r3, [pc, #388]	; (80039d0 <UART_SetConfig+0x2d4>)
 800384a:	fba3 2302 	umull	r2, r3, r3, r2
 800384e:	095b      	lsrs	r3, r3, #5
 8003850:	011c      	lsls	r4, r3, #4
 8003852:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003856:	2200      	movs	r2, #0
 8003858:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800385c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003860:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003864:	4642      	mov	r2, r8
 8003866:	464b      	mov	r3, r9
 8003868:	1891      	adds	r1, r2, r2
 800386a:	64b9      	str	r1, [r7, #72]	; 0x48
 800386c:	415b      	adcs	r3, r3
 800386e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003870:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003874:	4641      	mov	r1, r8
 8003876:	eb12 0a01 	adds.w	sl, r2, r1
 800387a:	4649      	mov	r1, r9
 800387c:	eb43 0b01 	adc.w	fp, r3, r1
 8003880:	f04f 0200 	mov.w	r2, #0
 8003884:	f04f 0300 	mov.w	r3, #0
 8003888:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800388c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003890:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003894:	4692      	mov	sl, r2
 8003896:	469b      	mov	fp, r3
 8003898:	4643      	mov	r3, r8
 800389a:	eb1a 0303 	adds.w	r3, sl, r3
 800389e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80038a2:	464b      	mov	r3, r9
 80038a4:	eb4b 0303 	adc.w	r3, fp, r3
 80038a8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80038ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	2200      	movs	r2, #0
 80038b4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80038b8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80038bc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80038c0:	460b      	mov	r3, r1
 80038c2:	18db      	adds	r3, r3, r3
 80038c4:	643b      	str	r3, [r7, #64]	; 0x40
 80038c6:	4613      	mov	r3, r2
 80038c8:	eb42 0303 	adc.w	r3, r2, r3
 80038cc:	647b      	str	r3, [r7, #68]	; 0x44
 80038ce:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80038d2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80038d6:	f7fc fcd3 	bl	8000280 <__aeabi_uldivmod>
 80038da:	4602      	mov	r2, r0
 80038dc:	460b      	mov	r3, r1
 80038de:	4611      	mov	r1, r2
 80038e0:	4b3b      	ldr	r3, [pc, #236]	; (80039d0 <UART_SetConfig+0x2d4>)
 80038e2:	fba3 2301 	umull	r2, r3, r3, r1
 80038e6:	095b      	lsrs	r3, r3, #5
 80038e8:	2264      	movs	r2, #100	; 0x64
 80038ea:	fb02 f303 	mul.w	r3, r2, r3
 80038ee:	1acb      	subs	r3, r1, r3
 80038f0:	00db      	lsls	r3, r3, #3
 80038f2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80038f6:	4b36      	ldr	r3, [pc, #216]	; (80039d0 <UART_SetConfig+0x2d4>)
 80038f8:	fba3 2302 	umull	r2, r3, r3, r2
 80038fc:	095b      	lsrs	r3, r3, #5
 80038fe:	005b      	lsls	r3, r3, #1
 8003900:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003904:	441c      	add	r4, r3
 8003906:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800390a:	2200      	movs	r2, #0
 800390c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003910:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003914:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003918:	4642      	mov	r2, r8
 800391a:	464b      	mov	r3, r9
 800391c:	1891      	adds	r1, r2, r2
 800391e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003920:	415b      	adcs	r3, r3
 8003922:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003924:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003928:	4641      	mov	r1, r8
 800392a:	1851      	adds	r1, r2, r1
 800392c:	6339      	str	r1, [r7, #48]	; 0x30
 800392e:	4649      	mov	r1, r9
 8003930:	414b      	adcs	r3, r1
 8003932:	637b      	str	r3, [r7, #52]	; 0x34
 8003934:	f04f 0200 	mov.w	r2, #0
 8003938:	f04f 0300 	mov.w	r3, #0
 800393c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003940:	4659      	mov	r1, fp
 8003942:	00cb      	lsls	r3, r1, #3
 8003944:	4651      	mov	r1, sl
 8003946:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800394a:	4651      	mov	r1, sl
 800394c:	00ca      	lsls	r2, r1, #3
 800394e:	4610      	mov	r0, r2
 8003950:	4619      	mov	r1, r3
 8003952:	4603      	mov	r3, r0
 8003954:	4642      	mov	r2, r8
 8003956:	189b      	adds	r3, r3, r2
 8003958:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800395c:	464b      	mov	r3, r9
 800395e:	460a      	mov	r2, r1
 8003960:	eb42 0303 	adc.w	r3, r2, r3
 8003964:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003968:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	2200      	movs	r2, #0
 8003970:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003974:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003978:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800397c:	460b      	mov	r3, r1
 800397e:	18db      	adds	r3, r3, r3
 8003980:	62bb      	str	r3, [r7, #40]	; 0x28
 8003982:	4613      	mov	r3, r2
 8003984:	eb42 0303 	adc.w	r3, r2, r3
 8003988:	62fb      	str	r3, [r7, #44]	; 0x2c
 800398a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800398e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003992:	f7fc fc75 	bl	8000280 <__aeabi_uldivmod>
 8003996:	4602      	mov	r2, r0
 8003998:	460b      	mov	r3, r1
 800399a:	4b0d      	ldr	r3, [pc, #52]	; (80039d0 <UART_SetConfig+0x2d4>)
 800399c:	fba3 1302 	umull	r1, r3, r3, r2
 80039a0:	095b      	lsrs	r3, r3, #5
 80039a2:	2164      	movs	r1, #100	; 0x64
 80039a4:	fb01 f303 	mul.w	r3, r1, r3
 80039a8:	1ad3      	subs	r3, r2, r3
 80039aa:	00db      	lsls	r3, r3, #3
 80039ac:	3332      	adds	r3, #50	; 0x32
 80039ae:	4a08      	ldr	r2, [pc, #32]	; (80039d0 <UART_SetConfig+0x2d4>)
 80039b0:	fba2 2303 	umull	r2, r3, r2, r3
 80039b4:	095b      	lsrs	r3, r3, #5
 80039b6:	f003 0207 	and.w	r2, r3, #7
 80039ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4422      	add	r2, r4
 80039c2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80039c4:	e105      	b.n	8003bd2 <UART_SetConfig+0x4d6>
 80039c6:	bf00      	nop
 80039c8:	40011000 	.word	0x40011000
 80039cc:	40011400 	.word	0x40011400
 80039d0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80039d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80039d8:	2200      	movs	r2, #0
 80039da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80039de:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80039e2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80039e6:	4642      	mov	r2, r8
 80039e8:	464b      	mov	r3, r9
 80039ea:	1891      	adds	r1, r2, r2
 80039ec:	6239      	str	r1, [r7, #32]
 80039ee:	415b      	adcs	r3, r3
 80039f0:	627b      	str	r3, [r7, #36]	; 0x24
 80039f2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80039f6:	4641      	mov	r1, r8
 80039f8:	1854      	adds	r4, r2, r1
 80039fa:	4649      	mov	r1, r9
 80039fc:	eb43 0501 	adc.w	r5, r3, r1
 8003a00:	f04f 0200 	mov.w	r2, #0
 8003a04:	f04f 0300 	mov.w	r3, #0
 8003a08:	00eb      	lsls	r3, r5, #3
 8003a0a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a0e:	00e2      	lsls	r2, r4, #3
 8003a10:	4614      	mov	r4, r2
 8003a12:	461d      	mov	r5, r3
 8003a14:	4643      	mov	r3, r8
 8003a16:	18e3      	adds	r3, r4, r3
 8003a18:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003a1c:	464b      	mov	r3, r9
 8003a1e:	eb45 0303 	adc.w	r3, r5, r3
 8003a22:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003a26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003a32:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003a36:	f04f 0200 	mov.w	r2, #0
 8003a3a:	f04f 0300 	mov.w	r3, #0
 8003a3e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003a42:	4629      	mov	r1, r5
 8003a44:	008b      	lsls	r3, r1, #2
 8003a46:	4621      	mov	r1, r4
 8003a48:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003a4c:	4621      	mov	r1, r4
 8003a4e:	008a      	lsls	r2, r1, #2
 8003a50:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003a54:	f7fc fc14 	bl	8000280 <__aeabi_uldivmod>
 8003a58:	4602      	mov	r2, r0
 8003a5a:	460b      	mov	r3, r1
 8003a5c:	4b60      	ldr	r3, [pc, #384]	; (8003be0 <UART_SetConfig+0x4e4>)
 8003a5e:	fba3 2302 	umull	r2, r3, r3, r2
 8003a62:	095b      	lsrs	r3, r3, #5
 8003a64:	011c      	lsls	r4, r3, #4
 8003a66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003a70:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003a74:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003a78:	4642      	mov	r2, r8
 8003a7a:	464b      	mov	r3, r9
 8003a7c:	1891      	adds	r1, r2, r2
 8003a7e:	61b9      	str	r1, [r7, #24]
 8003a80:	415b      	adcs	r3, r3
 8003a82:	61fb      	str	r3, [r7, #28]
 8003a84:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a88:	4641      	mov	r1, r8
 8003a8a:	1851      	adds	r1, r2, r1
 8003a8c:	6139      	str	r1, [r7, #16]
 8003a8e:	4649      	mov	r1, r9
 8003a90:	414b      	adcs	r3, r1
 8003a92:	617b      	str	r3, [r7, #20]
 8003a94:	f04f 0200 	mov.w	r2, #0
 8003a98:	f04f 0300 	mov.w	r3, #0
 8003a9c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003aa0:	4659      	mov	r1, fp
 8003aa2:	00cb      	lsls	r3, r1, #3
 8003aa4:	4651      	mov	r1, sl
 8003aa6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003aaa:	4651      	mov	r1, sl
 8003aac:	00ca      	lsls	r2, r1, #3
 8003aae:	4610      	mov	r0, r2
 8003ab0:	4619      	mov	r1, r3
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	4642      	mov	r2, r8
 8003ab6:	189b      	adds	r3, r3, r2
 8003ab8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003abc:	464b      	mov	r3, r9
 8003abe:	460a      	mov	r2, r1
 8003ac0:	eb42 0303 	adc.w	r3, r2, r3
 8003ac4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003ac8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	67bb      	str	r3, [r7, #120]	; 0x78
 8003ad2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003ad4:	f04f 0200 	mov.w	r2, #0
 8003ad8:	f04f 0300 	mov.w	r3, #0
 8003adc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003ae0:	4649      	mov	r1, r9
 8003ae2:	008b      	lsls	r3, r1, #2
 8003ae4:	4641      	mov	r1, r8
 8003ae6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003aea:	4641      	mov	r1, r8
 8003aec:	008a      	lsls	r2, r1, #2
 8003aee:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003af2:	f7fc fbc5 	bl	8000280 <__aeabi_uldivmod>
 8003af6:	4602      	mov	r2, r0
 8003af8:	460b      	mov	r3, r1
 8003afa:	4b39      	ldr	r3, [pc, #228]	; (8003be0 <UART_SetConfig+0x4e4>)
 8003afc:	fba3 1302 	umull	r1, r3, r3, r2
 8003b00:	095b      	lsrs	r3, r3, #5
 8003b02:	2164      	movs	r1, #100	; 0x64
 8003b04:	fb01 f303 	mul.w	r3, r1, r3
 8003b08:	1ad3      	subs	r3, r2, r3
 8003b0a:	011b      	lsls	r3, r3, #4
 8003b0c:	3332      	adds	r3, #50	; 0x32
 8003b0e:	4a34      	ldr	r2, [pc, #208]	; (8003be0 <UART_SetConfig+0x4e4>)
 8003b10:	fba2 2303 	umull	r2, r3, r2, r3
 8003b14:	095b      	lsrs	r3, r3, #5
 8003b16:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b1a:	441c      	add	r4, r3
 8003b1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b20:	2200      	movs	r2, #0
 8003b22:	673b      	str	r3, [r7, #112]	; 0x70
 8003b24:	677a      	str	r2, [r7, #116]	; 0x74
 8003b26:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003b2a:	4642      	mov	r2, r8
 8003b2c:	464b      	mov	r3, r9
 8003b2e:	1891      	adds	r1, r2, r2
 8003b30:	60b9      	str	r1, [r7, #8]
 8003b32:	415b      	adcs	r3, r3
 8003b34:	60fb      	str	r3, [r7, #12]
 8003b36:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003b3a:	4641      	mov	r1, r8
 8003b3c:	1851      	adds	r1, r2, r1
 8003b3e:	6039      	str	r1, [r7, #0]
 8003b40:	4649      	mov	r1, r9
 8003b42:	414b      	adcs	r3, r1
 8003b44:	607b      	str	r3, [r7, #4]
 8003b46:	f04f 0200 	mov.w	r2, #0
 8003b4a:	f04f 0300 	mov.w	r3, #0
 8003b4e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003b52:	4659      	mov	r1, fp
 8003b54:	00cb      	lsls	r3, r1, #3
 8003b56:	4651      	mov	r1, sl
 8003b58:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b5c:	4651      	mov	r1, sl
 8003b5e:	00ca      	lsls	r2, r1, #3
 8003b60:	4610      	mov	r0, r2
 8003b62:	4619      	mov	r1, r3
 8003b64:	4603      	mov	r3, r0
 8003b66:	4642      	mov	r2, r8
 8003b68:	189b      	adds	r3, r3, r2
 8003b6a:	66bb      	str	r3, [r7, #104]	; 0x68
 8003b6c:	464b      	mov	r3, r9
 8003b6e:	460a      	mov	r2, r1
 8003b70:	eb42 0303 	adc.w	r3, r2, r3
 8003b74:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003b76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	663b      	str	r3, [r7, #96]	; 0x60
 8003b80:	667a      	str	r2, [r7, #100]	; 0x64
 8003b82:	f04f 0200 	mov.w	r2, #0
 8003b86:	f04f 0300 	mov.w	r3, #0
 8003b8a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003b8e:	4649      	mov	r1, r9
 8003b90:	008b      	lsls	r3, r1, #2
 8003b92:	4641      	mov	r1, r8
 8003b94:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b98:	4641      	mov	r1, r8
 8003b9a:	008a      	lsls	r2, r1, #2
 8003b9c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003ba0:	f7fc fb6e 	bl	8000280 <__aeabi_uldivmod>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	460b      	mov	r3, r1
 8003ba8:	4b0d      	ldr	r3, [pc, #52]	; (8003be0 <UART_SetConfig+0x4e4>)
 8003baa:	fba3 1302 	umull	r1, r3, r3, r2
 8003bae:	095b      	lsrs	r3, r3, #5
 8003bb0:	2164      	movs	r1, #100	; 0x64
 8003bb2:	fb01 f303 	mul.w	r3, r1, r3
 8003bb6:	1ad3      	subs	r3, r2, r3
 8003bb8:	011b      	lsls	r3, r3, #4
 8003bba:	3332      	adds	r3, #50	; 0x32
 8003bbc:	4a08      	ldr	r2, [pc, #32]	; (8003be0 <UART_SetConfig+0x4e4>)
 8003bbe:	fba2 2303 	umull	r2, r3, r2, r3
 8003bc2:	095b      	lsrs	r3, r3, #5
 8003bc4:	f003 020f 	and.w	r2, r3, #15
 8003bc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4422      	add	r2, r4
 8003bd0:	609a      	str	r2, [r3, #8]
}
 8003bd2:	bf00      	nop
 8003bd4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003bde:	bf00      	nop
 8003be0:	51eb851f 	.word	0x51eb851f

08003be4 <__errno>:
 8003be4:	4b01      	ldr	r3, [pc, #4]	; (8003bec <__errno+0x8>)
 8003be6:	6818      	ldr	r0, [r3, #0]
 8003be8:	4770      	bx	lr
 8003bea:	bf00      	nop
 8003bec:	2000000c 	.word	0x2000000c

08003bf0 <__libc_init_array>:
 8003bf0:	b570      	push	{r4, r5, r6, lr}
 8003bf2:	4d0d      	ldr	r5, [pc, #52]	; (8003c28 <__libc_init_array+0x38>)
 8003bf4:	4c0d      	ldr	r4, [pc, #52]	; (8003c2c <__libc_init_array+0x3c>)
 8003bf6:	1b64      	subs	r4, r4, r5
 8003bf8:	10a4      	asrs	r4, r4, #2
 8003bfa:	2600      	movs	r6, #0
 8003bfc:	42a6      	cmp	r6, r4
 8003bfe:	d109      	bne.n	8003c14 <__libc_init_array+0x24>
 8003c00:	4d0b      	ldr	r5, [pc, #44]	; (8003c30 <__libc_init_array+0x40>)
 8003c02:	4c0c      	ldr	r4, [pc, #48]	; (8003c34 <__libc_init_array+0x44>)
 8003c04:	f000 ffae 	bl	8004b64 <_init>
 8003c08:	1b64      	subs	r4, r4, r5
 8003c0a:	10a4      	asrs	r4, r4, #2
 8003c0c:	2600      	movs	r6, #0
 8003c0e:	42a6      	cmp	r6, r4
 8003c10:	d105      	bne.n	8003c1e <__libc_init_array+0x2e>
 8003c12:	bd70      	pop	{r4, r5, r6, pc}
 8003c14:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c18:	4798      	blx	r3
 8003c1a:	3601      	adds	r6, #1
 8003c1c:	e7ee      	b.n	8003bfc <__libc_init_array+0xc>
 8003c1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c22:	4798      	blx	r3
 8003c24:	3601      	adds	r6, #1
 8003c26:	e7f2      	b.n	8003c0e <__libc_init_array+0x1e>
 8003c28:	08004c54 	.word	0x08004c54
 8003c2c:	08004c54 	.word	0x08004c54
 8003c30:	08004c54 	.word	0x08004c54
 8003c34:	08004c58 	.word	0x08004c58

08003c38 <memset>:
 8003c38:	4402      	add	r2, r0
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d100      	bne.n	8003c42 <memset+0xa>
 8003c40:	4770      	bx	lr
 8003c42:	f803 1b01 	strb.w	r1, [r3], #1
 8003c46:	e7f9      	b.n	8003c3c <memset+0x4>

08003c48 <iprintf>:
 8003c48:	b40f      	push	{r0, r1, r2, r3}
 8003c4a:	4b0a      	ldr	r3, [pc, #40]	; (8003c74 <iprintf+0x2c>)
 8003c4c:	b513      	push	{r0, r1, r4, lr}
 8003c4e:	681c      	ldr	r4, [r3, #0]
 8003c50:	b124      	cbz	r4, 8003c5c <iprintf+0x14>
 8003c52:	69a3      	ldr	r3, [r4, #24]
 8003c54:	b913      	cbnz	r3, 8003c5c <iprintf+0x14>
 8003c56:	4620      	mov	r0, r4
 8003c58:	f000 f866 	bl	8003d28 <__sinit>
 8003c5c:	ab05      	add	r3, sp, #20
 8003c5e:	9a04      	ldr	r2, [sp, #16]
 8003c60:	68a1      	ldr	r1, [r4, #8]
 8003c62:	9301      	str	r3, [sp, #4]
 8003c64:	4620      	mov	r0, r4
 8003c66:	f000 f9bd 	bl	8003fe4 <_vfiprintf_r>
 8003c6a:	b002      	add	sp, #8
 8003c6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c70:	b004      	add	sp, #16
 8003c72:	4770      	bx	lr
 8003c74:	2000000c 	.word	0x2000000c

08003c78 <std>:
 8003c78:	2300      	movs	r3, #0
 8003c7a:	b510      	push	{r4, lr}
 8003c7c:	4604      	mov	r4, r0
 8003c7e:	e9c0 3300 	strd	r3, r3, [r0]
 8003c82:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003c86:	6083      	str	r3, [r0, #8]
 8003c88:	8181      	strh	r1, [r0, #12]
 8003c8a:	6643      	str	r3, [r0, #100]	; 0x64
 8003c8c:	81c2      	strh	r2, [r0, #14]
 8003c8e:	6183      	str	r3, [r0, #24]
 8003c90:	4619      	mov	r1, r3
 8003c92:	2208      	movs	r2, #8
 8003c94:	305c      	adds	r0, #92	; 0x5c
 8003c96:	f7ff ffcf 	bl	8003c38 <memset>
 8003c9a:	4b05      	ldr	r3, [pc, #20]	; (8003cb0 <std+0x38>)
 8003c9c:	6263      	str	r3, [r4, #36]	; 0x24
 8003c9e:	4b05      	ldr	r3, [pc, #20]	; (8003cb4 <std+0x3c>)
 8003ca0:	62a3      	str	r3, [r4, #40]	; 0x28
 8003ca2:	4b05      	ldr	r3, [pc, #20]	; (8003cb8 <std+0x40>)
 8003ca4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003ca6:	4b05      	ldr	r3, [pc, #20]	; (8003cbc <std+0x44>)
 8003ca8:	6224      	str	r4, [r4, #32]
 8003caa:	6323      	str	r3, [r4, #48]	; 0x30
 8003cac:	bd10      	pop	{r4, pc}
 8003cae:	bf00      	nop
 8003cb0:	0800458d 	.word	0x0800458d
 8003cb4:	080045af 	.word	0x080045af
 8003cb8:	080045e7 	.word	0x080045e7
 8003cbc:	0800460b 	.word	0x0800460b

08003cc0 <_cleanup_r>:
 8003cc0:	4901      	ldr	r1, [pc, #4]	; (8003cc8 <_cleanup_r+0x8>)
 8003cc2:	f000 b8af 	b.w	8003e24 <_fwalk_reent>
 8003cc6:	bf00      	nop
 8003cc8:	080048e5 	.word	0x080048e5

08003ccc <__sfmoreglue>:
 8003ccc:	b570      	push	{r4, r5, r6, lr}
 8003cce:	2268      	movs	r2, #104	; 0x68
 8003cd0:	1e4d      	subs	r5, r1, #1
 8003cd2:	4355      	muls	r5, r2
 8003cd4:	460e      	mov	r6, r1
 8003cd6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003cda:	f000 f8e5 	bl	8003ea8 <_malloc_r>
 8003cde:	4604      	mov	r4, r0
 8003ce0:	b140      	cbz	r0, 8003cf4 <__sfmoreglue+0x28>
 8003ce2:	2100      	movs	r1, #0
 8003ce4:	e9c0 1600 	strd	r1, r6, [r0]
 8003ce8:	300c      	adds	r0, #12
 8003cea:	60a0      	str	r0, [r4, #8]
 8003cec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003cf0:	f7ff ffa2 	bl	8003c38 <memset>
 8003cf4:	4620      	mov	r0, r4
 8003cf6:	bd70      	pop	{r4, r5, r6, pc}

08003cf8 <__sfp_lock_acquire>:
 8003cf8:	4801      	ldr	r0, [pc, #4]	; (8003d00 <__sfp_lock_acquire+0x8>)
 8003cfa:	f000 b8b3 	b.w	8003e64 <__retarget_lock_acquire_recursive>
 8003cfe:	bf00      	nop
 8003d00:	20000179 	.word	0x20000179

08003d04 <__sfp_lock_release>:
 8003d04:	4801      	ldr	r0, [pc, #4]	; (8003d0c <__sfp_lock_release+0x8>)
 8003d06:	f000 b8ae 	b.w	8003e66 <__retarget_lock_release_recursive>
 8003d0a:	bf00      	nop
 8003d0c:	20000179 	.word	0x20000179

08003d10 <__sinit_lock_acquire>:
 8003d10:	4801      	ldr	r0, [pc, #4]	; (8003d18 <__sinit_lock_acquire+0x8>)
 8003d12:	f000 b8a7 	b.w	8003e64 <__retarget_lock_acquire_recursive>
 8003d16:	bf00      	nop
 8003d18:	2000017a 	.word	0x2000017a

08003d1c <__sinit_lock_release>:
 8003d1c:	4801      	ldr	r0, [pc, #4]	; (8003d24 <__sinit_lock_release+0x8>)
 8003d1e:	f000 b8a2 	b.w	8003e66 <__retarget_lock_release_recursive>
 8003d22:	bf00      	nop
 8003d24:	2000017a 	.word	0x2000017a

08003d28 <__sinit>:
 8003d28:	b510      	push	{r4, lr}
 8003d2a:	4604      	mov	r4, r0
 8003d2c:	f7ff fff0 	bl	8003d10 <__sinit_lock_acquire>
 8003d30:	69a3      	ldr	r3, [r4, #24]
 8003d32:	b11b      	cbz	r3, 8003d3c <__sinit+0x14>
 8003d34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d38:	f7ff bff0 	b.w	8003d1c <__sinit_lock_release>
 8003d3c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003d40:	6523      	str	r3, [r4, #80]	; 0x50
 8003d42:	4b13      	ldr	r3, [pc, #76]	; (8003d90 <__sinit+0x68>)
 8003d44:	4a13      	ldr	r2, [pc, #76]	; (8003d94 <__sinit+0x6c>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	62a2      	str	r2, [r4, #40]	; 0x28
 8003d4a:	42a3      	cmp	r3, r4
 8003d4c:	bf04      	itt	eq
 8003d4e:	2301      	moveq	r3, #1
 8003d50:	61a3      	streq	r3, [r4, #24]
 8003d52:	4620      	mov	r0, r4
 8003d54:	f000 f820 	bl	8003d98 <__sfp>
 8003d58:	6060      	str	r0, [r4, #4]
 8003d5a:	4620      	mov	r0, r4
 8003d5c:	f000 f81c 	bl	8003d98 <__sfp>
 8003d60:	60a0      	str	r0, [r4, #8]
 8003d62:	4620      	mov	r0, r4
 8003d64:	f000 f818 	bl	8003d98 <__sfp>
 8003d68:	2200      	movs	r2, #0
 8003d6a:	60e0      	str	r0, [r4, #12]
 8003d6c:	2104      	movs	r1, #4
 8003d6e:	6860      	ldr	r0, [r4, #4]
 8003d70:	f7ff ff82 	bl	8003c78 <std>
 8003d74:	68a0      	ldr	r0, [r4, #8]
 8003d76:	2201      	movs	r2, #1
 8003d78:	2109      	movs	r1, #9
 8003d7a:	f7ff ff7d 	bl	8003c78 <std>
 8003d7e:	68e0      	ldr	r0, [r4, #12]
 8003d80:	2202      	movs	r2, #2
 8003d82:	2112      	movs	r1, #18
 8003d84:	f7ff ff78 	bl	8003c78 <std>
 8003d88:	2301      	movs	r3, #1
 8003d8a:	61a3      	str	r3, [r4, #24]
 8003d8c:	e7d2      	b.n	8003d34 <__sinit+0xc>
 8003d8e:	bf00      	nop
 8003d90:	08004bb4 	.word	0x08004bb4
 8003d94:	08003cc1 	.word	0x08003cc1

08003d98 <__sfp>:
 8003d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d9a:	4607      	mov	r7, r0
 8003d9c:	f7ff ffac 	bl	8003cf8 <__sfp_lock_acquire>
 8003da0:	4b1e      	ldr	r3, [pc, #120]	; (8003e1c <__sfp+0x84>)
 8003da2:	681e      	ldr	r6, [r3, #0]
 8003da4:	69b3      	ldr	r3, [r6, #24]
 8003da6:	b913      	cbnz	r3, 8003dae <__sfp+0x16>
 8003da8:	4630      	mov	r0, r6
 8003daa:	f7ff ffbd 	bl	8003d28 <__sinit>
 8003dae:	3648      	adds	r6, #72	; 0x48
 8003db0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003db4:	3b01      	subs	r3, #1
 8003db6:	d503      	bpl.n	8003dc0 <__sfp+0x28>
 8003db8:	6833      	ldr	r3, [r6, #0]
 8003dba:	b30b      	cbz	r3, 8003e00 <__sfp+0x68>
 8003dbc:	6836      	ldr	r6, [r6, #0]
 8003dbe:	e7f7      	b.n	8003db0 <__sfp+0x18>
 8003dc0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003dc4:	b9d5      	cbnz	r5, 8003dfc <__sfp+0x64>
 8003dc6:	4b16      	ldr	r3, [pc, #88]	; (8003e20 <__sfp+0x88>)
 8003dc8:	60e3      	str	r3, [r4, #12]
 8003dca:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003dce:	6665      	str	r5, [r4, #100]	; 0x64
 8003dd0:	f000 f847 	bl	8003e62 <__retarget_lock_init_recursive>
 8003dd4:	f7ff ff96 	bl	8003d04 <__sfp_lock_release>
 8003dd8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003ddc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003de0:	6025      	str	r5, [r4, #0]
 8003de2:	61a5      	str	r5, [r4, #24]
 8003de4:	2208      	movs	r2, #8
 8003de6:	4629      	mov	r1, r5
 8003de8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003dec:	f7ff ff24 	bl	8003c38 <memset>
 8003df0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003df4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003df8:	4620      	mov	r0, r4
 8003dfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003dfc:	3468      	adds	r4, #104	; 0x68
 8003dfe:	e7d9      	b.n	8003db4 <__sfp+0x1c>
 8003e00:	2104      	movs	r1, #4
 8003e02:	4638      	mov	r0, r7
 8003e04:	f7ff ff62 	bl	8003ccc <__sfmoreglue>
 8003e08:	4604      	mov	r4, r0
 8003e0a:	6030      	str	r0, [r6, #0]
 8003e0c:	2800      	cmp	r0, #0
 8003e0e:	d1d5      	bne.n	8003dbc <__sfp+0x24>
 8003e10:	f7ff ff78 	bl	8003d04 <__sfp_lock_release>
 8003e14:	230c      	movs	r3, #12
 8003e16:	603b      	str	r3, [r7, #0]
 8003e18:	e7ee      	b.n	8003df8 <__sfp+0x60>
 8003e1a:	bf00      	nop
 8003e1c:	08004bb4 	.word	0x08004bb4
 8003e20:	ffff0001 	.word	0xffff0001

08003e24 <_fwalk_reent>:
 8003e24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003e28:	4606      	mov	r6, r0
 8003e2a:	4688      	mov	r8, r1
 8003e2c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003e30:	2700      	movs	r7, #0
 8003e32:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003e36:	f1b9 0901 	subs.w	r9, r9, #1
 8003e3a:	d505      	bpl.n	8003e48 <_fwalk_reent+0x24>
 8003e3c:	6824      	ldr	r4, [r4, #0]
 8003e3e:	2c00      	cmp	r4, #0
 8003e40:	d1f7      	bne.n	8003e32 <_fwalk_reent+0xe>
 8003e42:	4638      	mov	r0, r7
 8003e44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003e48:	89ab      	ldrh	r3, [r5, #12]
 8003e4a:	2b01      	cmp	r3, #1
 8003e4c:	d907      	bls.n	8003e5e <_fwalk_reent+0x3a>
 8003e4e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003e52:	3301      	adds	r3, #1
 8003e54:	d003      	beq.n	8003e5e <_fwalk_reent+0x3a>
 8003e56:	4629      	mov	r1, r5
 8003e58:	4630      	mov	r0, r6
 8003e5a:	47c0      	blx	r8
 8003e5c:	4307      	orrs	r7, r0
 8003e5e:	3568      	adds	r5, #104	; 0x68
 8003e60:	e7e9      	b.n	8003e36 <_fwalk_reent+0x12>

08003e62 <__retarget_lock_init_recursive>:
 8003e62:	4770      	bx	lr

08003e64 <__retarget_lock_acquire_recursive>:
 8003e64:	4770      	bx	lr

08003e66 <__retarget_lock_release_recursive>:
 8003e66:	4770      	bx	lr

08003e68 <sbrk_aligned>:
 8003e68:	b570      	push	{r4, r5, r6, lr}
 8003e6a:	4e0e      	ldr	r6, [pc, #56]	; (8003ea4 <sbrk_aligned+0x3c>)
 8003e6c:	460c      	mov	r4, r1
 8003e6e:	6831      	ldr	r1, [r6, #0]
 8003e70:	4605      	mov	r5, r0
 8003e72:	b911      	cbnz	r1, 8003e7a <sbrk_aligned+0x12>
 8003e74:	f000 fb7a 	bl	800456c <_sbrk_r>
 8003e78:	6030      	str	r0, [r6, #0]
 8003e7a:	4621      	mov	r1, r4
 8003e7c:	4628      	mov	r0, r5
 8003e7e:	f000 fb75 	bl	800456c <_sbrk_r>
 8003e82:	1c43      	adds	r3, r0, #1
 8003e84:	d00a      	beq.n	8003e9c <sbrk_aligned+0x34>
 8003e86:	1cc4      	adds	r4, r0, #3
 8003e88:	f024 0403 	bic.w	r4, r4, #3
 8003e8c:	42a0      	cmp	r0, r4
 8003e8e:	d007      	beq.n	8003ea0 <sbrk_aligned+0x38>
 8003e90:	1a21      	subs	r1, r4, r0
 8003e92:	4628      	mov	r0, r5
 8003e94:	f000 fb6a 	bl	800456c <_sbrk_r>
 8003e98:	3001      	adds	r0, #1
 8003e9a:	d101      	bne.n	8003ea0 <sbrk_aligned+0x38>
 8003e9c:	f04f 34ff 	mov.w	r4, #4294967295
 8003ea0:	4620      	mov	r0, r4
 8003ea2:	bd70      	pop	{r4, r5, r6, pc}
 8003ea4:	20000180 	.word	0x20000180

08003ea8 <_malloc_r>:
 8003ea8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003eac:	1ccd      	adds	r5, r1, #3
 8003eae:	f025 0503 	bic.w	r5, r5, #3
 8003eb2:	3508      	adds	r5, #8
 8003eb4:	2d0c      	cmp	r5, #12
 8003eb6:	bf38      	it	cc
 8003eb8:	250c      	movcc	r5, #12
 8003eba:	2d00      	cmp	r5, #0
 8003ebc:	4607      	mov	r7, r0
 8003ebe:	db01      	blt.n	8003ec4 <_malloc_r+0x1c>
 8003ec0:	42a9      	cmp	r1, r5
 8003ec2:	d905      	bls.n	8003ed0 <_malloc_r+0x28>
 8003ec4:	230c      	movs	r3, #12
 8003ec6:	603b      	str	r3, [r7, #0]
 8003ec8:	2600      	movs	r6, #0
 8003eca:	4630      	mov	r0, r6
 8003ecc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ed0:	4e2e      	ldr	r6, [pc, #184]	; (8003f8c <_malloc_r+0xe4>)
 8003ed2:	f000 fdbb 	bl	8004a4c <__malloc_lock>
 8003ed6:	6833      	ldr	r3, [r6, #0]
 8003ed8:	461c      	mov	r4, r3
 8003eda:	bb34      	cbnz	r4, 8003f2a <_malloc_r+0x82>
 8003edc:	4629      	mov	r1, r5
 8003ede:	4638      	mov	r0, r7
 8003ee0:	f7ff ffc2 	bl	8003e68 <sbrk_aligned>
 8003ee4:	1c43      	adds	r3, r0, #1
 8003ee6:	4604      	mov	r4, r0
 8003ee8:	d14d      	bne.n	8003f86 <_malloc_r+0xde>
 8003eea:	6834      	ldr	r4, [r6, #0]
 8003eec:	4626      	mov	r6, r4
 8003eee:	2e00      	cmp	r6, #0
 8003ef0:	d140      	bne.n	8003f74 <_malloc_r+0xcc>
 8003ef2:	6823      	ldr	r3, [r4, #0]
 8003ef4:	4631      	mov	r1, r6
 8003ef6:	4638      	mov	r0, r7
 8003ef8:	eb04 0803 	add.w	r8, r4, r3
 8003efc:	f000 fb36 	bl	800456c <_sbrk_r>
 8003f00:	4580      	cmp	r8, r0
 8003f02:	d13a      	bne.n	8003f7a <_malloc_r+0xd2>
 8003f04:	6821      	ldr	r1, [r4, #0]
 8003f06:	3503      	adds	r5, #3
 8003f08:	1a6d      	subs	r5, r5, r1
 8003f0a:	f025 0503 	bic.w	r5, r5, #3
 8003f0e:	3508      	adds	r5, #8
 8003f10:	2d0c      	cmp	r5, #12
 8003f12:	bf38      	it	cc
 8003f14:	250c      	movcc	r5, #12
 8003f16:	4629      	mov	r1, r5
 8003f18:	4638      	mov	r0, r7
 8003f1a:	f7ff ffa5 	bl	8003e68 <sbrk_aligned>
 8003f1e:	3001      	adds	r0, #1
 8003f20:	d02b      	beq.n	8003f7a <_malloc_r+0xd2>
 8003f22:	6823      	ldr	r3, [r4, #0]
 8003f24:	442b      	add	r3, r5
 8003f26:	6023      	str	r3, [r4, #0]
 8003f28:	e00e      	b.n	8003f48 <_malloc_r+0xa0>
 8003f2a:	6822      	ldr	r2, [r4, #0]
 8003f2c:	1b52      	subs	r2, r2, r5
 8003f2e:	d41e      	bmi.n	8003f6e <_malloc_r+0xc6>
 8003f30:	2a0b      	cmp	r2, #11
 8003f32:	d916      	bls.n	8003f62 <_malloc_r+0xba>
 8003f34:	1961      	adds	r1, r4, r5
 8003f36:	42a3      	cmp	r3, r4
 8003f38:	6025      	str	r5, [r4, #0]
 8003f3a:	bf18      	it	ne
 8003f3c:	6059      	strne	r1, [r3, #4]
 8003f3e:	6863      	ldr	r3, [r4, #4]
 8003f40:	bf08      	it	eq
 8003f42:	6031      	streq	r1, [r6, #0]
 8003f44:	5162      	str	r2, [r4, r5]
 8003f46:	604b      	str	r3, [r1, #4]
 8003f48:	4638      	mov	r0, r7
 8003f4a:	f104 060b 	add.w	r6, r4, #11
 8003f4e:	f000 fd83 	bl	8004a58 <__malloc_unlock>
 8003f52:	f026 0607 	bic.w	r6, r6, #7
 8003f56:	1d23      	adds	r3, r4, #4
 8003f58:	1af2      	subs	r2, r6, r3
 8003f5a:	d0b6      	beq.n	8003eca <_malloc_r+0x22>
 8003f5c:	1b9b      	subs	r3, r3, r6
 8003f5e:	50a3      	str	r3, [r4, r2]
 8003f60:	e7b3      	b.n	8003eca <_malloc_r+0x22>
 8003f62:	6862      	ldr	r2, [r4, #4]
 8003f64:	42a3      	cmp	r3, r4
 8003f66:	bf0c      	ite	eq
 8003f68:	6032      	streq	r2, [r6, #0]
 8003f6a:	605a      	strne	r2, [r3, #4]
 8003f6c:	e7ec      	b.n	8003f48 <_malloc_r+0xa0>
 8003f6e:	4623      	mov	r3, r4
 8003f70:	6864      	ldr	r4, [r4, #4]
 8003f72:	e7b2      	b.n	8003eda <_malloc_r+0x32>
 8003f74:	4634      	mov	r4, r6
 8003f76:	6876      	ldr	r6, [r6, #4]
 8003f78:	e7b9      	b.n	8003eee <_malloc_r+0x46>
 8003f7a:	230c      	movs	r3, #12
 8003f7c:	603b      	str	r3, [r7, #0]
 8003f7e:	4638      	mov	r0, r7
 8003f80:	f000 fd6a 	bl	8004a58 <__malloc_unlock>
 8003f84:	e7a1      	b.n	8003eca <_malloc_r+0x22>
 8003f86:	6025      	str	r5, [r4, #0]
 8003f88:	e7de      	b.n	8003f48 <_malloc_r+0xa0>
 8003f8a:	bf00      	nop
 8003f8c:	2000017c 	.word	0x2000017c

08003f90 <__sfputc_r>:
 8003f90:	6893      	ldr	r3, [r2, #8]
 8003f92:	3b01      	subs	r3, #1
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	b410      	push	{r4}
 8003f98:	6093      	str	r3, [r2, #8]
 8003f9a:	da08      	bge.n	8003fae <__sfputc_r+0x1e>
 8003f9c:	6994      	ldr	r4, [r2, #24]
 8003f9e:	42a3      	cmp	r3, r4
 8003fa0:	db01      	blt.n	8003fa6 <__sfputc_r+0x16>
 8003fa2:	290a      	cmp	r1, #10
 8003fa4:	d103      	bne.n	8003fae <__sfputc_r+0x1e>
 8003fa6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003faa:	f000 bb33 	b.w	8004614 <__swbuf_r>
 8003fae:	6813      	ldr	r3, [r2, #0]
 8003fb0:	1c58      	adds	r0, r3, #1
 8003fb2:	6010      	str	r0, [r2, #0]
 8003fb4:	7019      	strb	r1, [r3, #0]
 8003fb6:	4608      	mov	r0, r1
 8003fb8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003fbc:	4770      	bx	lr

08003fbe <__sfputs_r>:
 8003fbe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fc0:	4606      	mov	r6, r0
 8003fc2:	460f      	mov	r7, r1
 8003fc4:	4614      	mov	r4, r2
 8003fc6:	18d5      	adds	r5, r2, r3
 8003fc8:	42ac      	cmp	r4, r5
 8003fca:	d101      	bne.n	8003fd0 <__sfputs_r+0x12>
 8003fcc:	2000      	movs	r0, #0
 8003fce:	e007      	b.n	8003fe0 <__sfputs_r+0x22>
 8003fd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003fd4:	463a      	mov	r2, r7
 8003fd6:	4630      	mov	r0, r6
 8003fd8:	f7ff ffda 	bl	8003f90 <__sfputc_r>
 8003fdc:	1c43      	adds	r3, r0, #1
 8003fde:	d1f3      	bne.n	8003fc8 <__sfputs_r+0xa>
 8003fe0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003fe4 <_vfiprintf_r>:
 8003fe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fe8:	460d      	mov	r5, r1
 8003fea:	b09d      	sub	sp, #116	; 0x74
 8003fec:	4614      	mov	r4, r2
 8003fee:	4698      	mov	r8, r3
 8003ff0:	4606      	mov	r6, r0
 8003ff2:	b118      	cbz	r0, 8003ffc <_vfiprintf_r+0x18>
 8003ff4:	6983      	ldr	r3, [r0, #24]
 8003ff6:	b90b      	cbnz	r3, 8003ffc <_vfiprintf_r+0x18>
 8003ff8:	f7ff fe96 	bl	8003d28 <__sinit>
 8003ffc:	4b89      	ldr	r3, [pc, #548]	; (8004224 <_vfiprintf_r+0x240>)
 8003ffe:	429d      	cmp	r5, r3
 8004000:	d11b      	bne.n	800403a <_vfiprintf_r+0x56>
 8004002:	6875      	ldr	r5, [r6, #4]
 8004004:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004006:	07d9      	lsls	r1, r3, #31
 8004008:	d405      	bmi.n	8004016 <_vfiprintf_r+0x32>
 800400a:	89ab      	ldrh	r3, [r5, #12]
 800400c:	059a      	lsls	r2, r3, #22
 800400e:	d402      	bmi.n	8004016 <_vfiprintf_r+0x32>
 8004010:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004012:	f7ff ff27 	bl	8003e64 <__retarget_lock_acquire_recursive>
 8004016:	89ab      	ldrh	r3, [r5, #12]
 8004018:	071b      	lsls	r3, r3, #28
 800401a:	d501      	bpl.n	8004020 <_vfiprintf_r+0x3c>
 800401c:	692b      	ldr	r3, [r5, #16]
 800401e:	b9eb      	cbnz	r3, 800405c <_vfiprintf_r+0x78>
 8004020:	4629      	mov	r1, r5
 8004022:	4630      	mov	r0, r6
 8004024:	f000 fb5a 	bl	80046dc <__swsetup_r>
 8004028:	b1c0      	cbz	r0, 800405c <_vfiprintf_r+0x78>
 800402a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800402c:	07dc      	lsls	r4, r3, #31
 800402e:	d50e      	bpl.n	800404e <_vfiprintf_r+0x6a>
 8004030:	f04f 30ff 	mov.w	r0, #4294967295
 8004034:	b01d      	add	sp, #116	; 0x74
 8004036:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800403a:	4b7b      	ldr	r3, [pc, #492]	; (8004228 <_vfiprintf_r+0x244>)
 800403c:	429d      	cmp	r5, r3
 800403e:	d101      	bne.n	8004044 <_vfiprintf_r+0x60>
 8004040:	68b5      	ldr	r5, [r6, #8]
 8004042:	e7df      	b.n	8004004 <_vfiprintf_r+0x20>
 8004044:	4b79      	ldr	r3, [pc, #484]	; (800422c <_vfiprintf_r+0x248>)
 8004046:	429d      	cmp	r5, r3
 8004048:	bf08      	it	eq
 800404a:	68f5      	ldreq	r5, [r6, #12]
 800404c:	e7da      	b.n	8004004 <_vfiprintf_r+0x20>
 800404e:	89ab      	ldrh	r3, [r5, #12]
 8004050:	0598      	lsls	r0, r3, #22
 8004052:	d4ed      	bmi.n	8004030 <_vfiprintf_r+0x4c>
 8004054:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004056:	f7ff ff06 	bl	8003e66 <__retarget_lock_release_recursive>
 800405a:	e7e9      	b.n	8004030 <_vfiprintf_r+0x4c>
 800405c:	2300      	movs	r3, #0
 800405e:	9309      	str	r3, [sp, #36]	; 0x24
 8004060:	2320      	movs	r3, #32
 8004062:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004066:	f8cd 800c 	str.w	r8, [sp, #12]
 800406a:	2330      	movs	r3, #48	; 0x30
 800406c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004230 <_vfiprintf_r+0x24c>
 8004070:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004074:	f04f 0901 	mov.w	r9, #1
 8004078:	4623      	mov	r3, r4
 800407a:	469a      	mov	sl, r3
 800407c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004080:	b10a      	cbz	r2, 8004086 <_vfiprintf_r+0xa2>
 8004082:	2a25      	cmp	r2, #37	; 0x25
 8004084:	d1f9      	bne.n	800407a <_vfiprintf_r+0x96>
 8004086:	ebba 0b04 	subs.w	fp, sl, r4
 800408a:	d00b      	beq.n	80040a4 <_vfiprintf_r+0xc0>
 800408c:	465b      	mov	r3, fp
 800408e:	4622      	mov	r2, r4
 8004090:	4629      	mov	r1, r5
 8004092:	4630      	mov	r0, r6
 8004094:	f7ff ff93 	bl	8003fbe <__sfputs_r>
 8004098:	3001      	adds	r0, #1
 800409a:	f000 80aa 	beq.w	80041f2 <_vfiprintf_r+0x20e>
 800409e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80040a0:	445a      	add	r2, fp
 80040a2:	9209      	str	r2, [sp, #36]	; 0x24
 80040a4:	f89a 3000 	ldrb.w	r3, [sl]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	f000 80a2 	beq.w	80041f2 <_vfiprintf_r+0x20e>
 80040ae:	2300      	movs	r3, #0
 80040b0:	f04f 32ff 	mov.w	r2, #4294967295
 80040b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80040b8:	f10a 0a01 	add.w	sl, sl, #1
 80040bc:	9304      	str	r3, [sp, #16]
 80040be:	9307      	str	r3, [sp, #28]
 80040c0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80040c4:	931a      	str	r3, [sp, #104]	; 0x68
 80040c6:	4654      	mov	r4, sl
 80040c8:	2205      	movs	r2, #5
 80040ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80040ce:	4858      	ldr	r0, [pc, #352]	; (8004230 <_vfiprintf_r+0x24c>)
 80040d0:	f7fc f886 	bl	80001e0 <memchr>
 80040d4:	9a04      	ldr	r2, [sp, #16]
 80040d6:	b9d8      	cbnz	r0, 8004110 <_vfiprintf_r+0x12c>
 80040d8:	06d1      	lsls	r1, r2, #27
 80040da:	bf44      	itt	mi
 80040dc:	2320      	movmi	r3, #32
 80040de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80040e2:	0713      	lsls	r3, r2, #28
 80040e4:	bf44      	itt	mi
 80040e6:	232b      	movmi	r3, #43	; 0x2b
 80040e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80040ec:	f89a 3000 	ldrb.w	r3, [sl]
 80040f0:	2b2a      	cmp	r3, #42	; 0x2a
 80040f2:	d015      	beq.n	8004120 <_vfiprintf_r+0x13c>
 80040f4:	9a07      	ldr	r2, [sp, #28]
 80040f6:	4654      	mov	r4, sl
 80040f8:	2000      	movs	r0, #0
 80040fa:	f04f 0c0a 	mov.w	ip, #10
 80040fe:	4621      	mov	r1, r4
 8004100:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004104:	3b30      	subs	r3, #48	; 0x30
 8004106:	2b09      	cmp	r3, #9
 8004108:	d94e      	bls.n	80041a8 <_vfiprintf_r+0x1c4>
 800410a:	b1b0      	cbz	r0, 800413a <_vfiprintf_r+0x156>
 800410c:	9207      	str	r2, [sp, #28]
 800410e:	e014      	b.n	800413a <_vfiprintf_r+0x156>
 8004110:	eba0 0308 	sub.w	r3, r0, r8
 8004114:	fa09 f303 	lsl.w	r3, r9, r3
 8004118:	4313      	orrs	r3, r2
 800411a:	9304      	str	r3, [sp, #16]
 800411c:	46a2      	mov	sl, r4
 800411e:	e7d2      	b.n	80040c6 <_vfiprintf_r+0xe2>
 8004120:	9b03      	ldr	r3, [sp, #12]
 8004122:	1d19      	adds	r1, r3, #4
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	9103      	str	r1, [sp, #12]
 8004128:	2b00      	cmp	r3, #0
 800412a:	bfbb      	ittet	lt
 800412c:	425b      	neglt	r3, r3
 800412e:	f042 0202 	orrlt.w	r2, r2, #2
 8004132:	9307      	strge	r3, [sp, #28]
 8004134:	9307      	strlt	r3, [sp, #28]
 8004136:	bfb8      	it	lt
 8004138:	9204      	strlt	r2, [sp, #16]
 800413a:	7823      	ldrb	r3, [r4, #0]
 800413c:	2b2e      	cmp	r3, #46	; 0x2e
 800413e:	d10c      	bne.n	800415a <_vfiprintf_r+0x176>
 8004140:	7863      	ldrb	r3, [r4, #1]
 8004142:	2b2a      	cmp	r3, #42	; 0x2a
 8004144:	d135      	bne.n	80041b2 <_vfiprintf_r+0x1ce>
 8004146:	9b03      	ldr	r3, [sp, #12]
 8004148:	1d1a      	adds	r2, r3, #4
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	9203      	str	r2, [sp, #12]
 800414e:	2b00      	cmp	r3, #0
 8004150:	bfb8      	it	lt
 8004152:	f04f 33ff 	movlt.w	r3, #4294967295
 8004156:	3402      	adds	r4, #2
 8004158:	9305      	str	r3, [sp, #20]
 800415a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004240 <_vfiprintf_r+0x25c>
 800415e:	7821      	ldrb	r1, [r4, #0]
 8004160:	2203      	movs	r2, #3
 8004162:	4650      	mov	r0, sl
 8004164:	f7fc f83c 	bl	80001e0 <memchr>
 8004168:	b140      	cbz	r0, 800417c <_vfiprintf_r+0x198>
 800416a:	2340      	movs	r3, #64	; 0x40
 800416c:	eba0 000a 	sub.w	r0, r0, sl
 8004170:	fa03 f000 	lsl.w	r0, r3, r0
 8004174:	9b04      	ldr	r3, [sp, #16]
 8004176:	4303      	orrs	r3, r0
 8004178:	3401      	adds	r4, #1
 800417a:	9304      	str	r3, [sp, #16]
 800417c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004180:	482c      	ldr	r0, [pc, #176]	; (8004234 <_vfiprintf_r+0x250>)
 8004182:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004186:	2206      	movs	r2, #6
 8004188:	f7fc f82a 	bl	80001e0 <memchr>
 800418c:	2800      	cmp	r0, #0
 800418e:	d03f      	beq.n	8004210 <_vfiprintf_r+0x22c>
 8004190:	4b29      	ldr	r3, [pc, #164]	; (8004238 <_vfiprintf_r+0x254>)
 8004192:	bb1b      	cbnz	r3, 80041dc <_vfiprintf_r+0x1f8>
 8004194:	9b03      	ldr	r3, [sp, #12]
 8004196:	3307      	adds	r3, #7
 8004198:	f023 0307 	bic.w	r3, r3, #7
 800419c:	3308      	adds	r3, #8
 800419e:	9303      	str	r3, [sp, #12]
 80041a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80041a2:	443b      	add	r3, r7
 80041a4:	9309      	str	r3, [sp, #36]	; 0x24
 80041a6:	e767      	b.n	8004078 <_vfiprintf_r+0x94>
 80041a8:	fb0c 3202 	mla	r2, ip, r2, r3
 80041ac:	460c      	mov	r4, r1
 80041ae:	2001      	movs	r0, #1
 80041b0:	e7a5      	b.n	80040fe <_vfiprintf_r+0x11a>
 80041b2:	2300      	movs	r3, #0
 80041b4:	3401      	adds	r4, #1
 80041b6:	9305      	str	r3, [sp, #20]
 80041b8:	4619      	mov	r1, r3
 80041ba:	f04f 0c0a 	mov.w	ip, #10
 80041be:	4620      	mov	r0, r4
 80041c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80041c4:	3a30      	subs	r2, #48	; 0x30
 80041c6:	2a09      	cmp	r2, #9
 80041c8:	d903      	bls.n	80041d2 <_vfiprintf_r+0x1ee>
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d0c5      	beq.n	800415a <_vfiprintf_r+0x176>
 80041ce:	9105      	str	r1, [sp, #20]
 80041d0:	e7c3      	b.n	800415a <_vfiprintf_r+0x176>
 80041d2:	fb0c 2101 	mla	r1, ip, r1, r2
 80041d6:	4604      	mov	r4, r0
 80041d8:	2301      	movs	r3, #1
 80041da:	e7f0      	b.n	80041be <_vfiprintf_r+0x1da>
 80041dc:	ab03      	add	r3, sp, #12
 80041de:	9300      	str	r3, [sp, #0]
 80041e0:	462a      	mov	r2, r5
 80041e2:	4b16      	ldr	r3, [pc, #88]	; (800423c <_vfiprintf_r+0x258>)
 80041e4:	a904      	add	r1, sp, #16
 80041e6:	4630      	mov	r0, r6
 80041e8:	f3af 8000 	nop.w
 80041ec:	4607      	mov	r7, r0
 80041ee:	1c78      	adds	r0, r7, #1
 80041f0:	d1d6      	bne.n	80041a0 <_vfiprintf_r+0x1bc>
 80041f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80041f4:	07d9      	lsls	r1, r3, #31
 80041f6:	d405      	bmi.n	8004204 <_vfiprintf_r+0x220>
 80041f8:	89ab      	ldrh	r3, [r5, #12]
 80041fa:	059a      	lsls	r2, r3, #22
 80041fc:	d402      	bmi.n	8004204 <_vfiprintf_r+0x220>
 80041fe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004200:	f7ff fe31 	bl	8003e66 <__retarget_lock_release_recursive>
 8004204:	89ab      	ldrh	r3, [r5, #12]
 8004206:	065b      	lsls	r3, r3, #25
 8004208:	f53f af12 	bmi.w	8004030 <_vfiprintf_r+0x4c>
 800420c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800420e:	e711      	b.n	8004034 <_vfiprintf_r+0x50>
 8004210:	ab03      	add	r3, sp, #12
 8004212:	9300      	str	r3, [sp, #0]
 8004214:	462a      	mov	r2, r5
 8004216:	4b09      	ldr	r3, [pc, #36]	; (800423c <_vfiprintf_r+0x258>)
 8004218:	a904      	add	r1, sp, #16
 800421a:	4630      	mov	r0, r6
 800421c:	f000 f880 	bl	8004320 <_printf_i>
 8004220:	e7e4      	b.n	80041ec <_vfiprintf_r+0x208>
 8004222:	bf00      	nop
 8004224:	08004bd8 	.word	0x08004bd8
 8004228:	08004bf8 	.word	0x08004bf8
 800422c:	08004bb8 	.word	0x08004bb8
 8004230:	08004c18 	.word	0x08004c18
 8004234:	08004c22 	.word	0x08004c22
 8004238:	00000000 	.word	0x00000000
 800423c:	08003fbf 	.word	0x08003fbf
 8004240:	08004c1e 	.word	0x08004c1e

08004244 <_printf_common>:
 8004244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004248:	4616      	mov	r6, r2
 800424a:	4699      	mov	r9, r3
 800424c:	688a      	ldr	r2, [r1, #8]
 800424e:	690b      	ldr	r3, [r1, #16]
 8004250:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004254:	4293      	cmp	r3, r2
 8004256:	bfb8      	it	lt
 8004258:	4613      	movlt	r3, r2
 800425a:	6033      	str	r3, [r6, #0]
 800425c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004260:	4607      	mov	r7, r0
 8004262:	460c      	mov	r4, r1
 8004264:	b10a      	cbz	r2, 800426a <_printf_common+0x26>
 8004266:	3301      	adds	r3, #1
 8004268:	6033      	str	r3, [r6, #0]
 800426a:	6823      	ldr	r3, [r4, #0]
 800426c:	0699      	lsls	r1, r3, #26
 800426e:	bf42      	ittt	mi
 8004270:	6833      	ldrmi	r3, [r6, #0]
 8004272:	3302      	addmi	r3, #2
 8004274:	6033      	strmi	r3, [r6, #0]
 8004276:	6825      	ldr	r5, [r4, #0]
 8004278:	f015 0506 	ands.w	r5, r5, #6
 800427c:	d106      	bne.n	800428c <_printf_common+0x48>
 800427e:	f104 0a19 	add.w	sl, r4, #25
 8004282:	68e3      	ldr	r3, [r4, #12]
 8004284:	6832      	ldr	r2, [r6, #0]
 8004286:	1a9b      	subs	r3, r3, r2
 8004288:	42ab      	cmp	r3, r5
 800428a:	dc26      	bgt.n	80042da <_printf_common+0x96>
 800428c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004290:	1e13      	subs	r3, r2, #0
 8004292:	6822      	ldr	r2, [r4, #0]
 8004294:	bf18      	it	ne
 8004296:	2301      	movne	r3, #1
 8004298:	0692      	lsls	r2, r2, #26
 800429a:	d42b      	bmi.n	80042f4 <_printf_common+0xb0>
 800429c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80042a0:	4649      	mov	r1, r9
 80042a2:	4638      	mov	r0, r7
 80042a4:	47c0      	blx	r8
 80042a6:	3001      	adds	r0, #1
 80042a8:	d01e      	beq.n	80042e8 <_printf_common+0xa4>
 80042aa:	6823      	ldr	r3, [r4, #0]
 80042ac:	68e5      	ldr	r5, [r4, #12]
 80042ae:	6832      	ldr	r2, [r6, #0]
 80042b0:	f003 0306 	and.w	r3, r3, #6
 80042b4:	2b04      	cmp	r3, #4
 80042b6:	bf08      	it	eq
 80042b8:	1aad      	subeq	r5, r5, r2
 80042ba:	68a3      	ldr	r3, [r4, #8]
 80042bc:	6922      	ldr	r2, [r4, #16]
 80042be:	bf0c      	ite	eq
 80042c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80042c4:	2500      	movne	r5, #0
 80042c6:	4293      	cmp	r3, r2
 80042c8:	bfc4      	itt	gt
 80042ca:	1a9b      	subgt	r3, r3, r2
 80042cc:	18ed      	addgt	r5, r5, r3
 80042ce:	2600      	movs	r6, #0
 80042d0:	341a      	adds	r4, #26
 80042d2:	42b5      	cmp	r5, r6
 80042d4:	d11a      	bne.n	800430c <_printf_common+0xc8>
 80042d6:	2000      	movs	r0, #0
 80042d8:	e008      	b.n	80042ec <_printf_common+0xa8>
 80042da:	2301      	movs	r3, #1
 80042dc:	4652      	mov	r2, sl
 80042de:	4649      	mov	r1, r9
 80042e0:	4638      	mov	r0, r7
 80042e2:	47c0      	blx	r8
 80042e4:	3001      	adds	r0, #1
 80042e6:	d103      	bne.n	80042f0 <_printf_common+0xac>
 80042e8:	f04f 30ff 	mov.w	r0, #4294967295
 80042ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042f0:	3501      	adds	r5, #1
 80042f2:	e7c6      	b.n	8004282 <_printf_common+0x3e>
 80042f4:	18e1      	adds	r1, r4, r3
 80042f6:	1c5a      	adds	r2, r3, #1
 80042f8:	2030      	movs	r0, #48	; 0x30
 80042fa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80042fe:	4422      	add	r2, r4
 8004300:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004304:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004308:	3302      	adds	r3, #2
 800430a:	e7c7      	b.n	800429c <_printf_common+0x58>
 800430c:	2301      	movs	r3, #1
 800430e:	4622      	mov	r2, r4
 8004310:	4649      	mov	r1, r9
 8004312:	4638      	mov	r0, r7
 8004314:	47c0      	blx	r8
 8004316:	3001      	adds	r0, #1
 8004318:	d0e6      	beq.n	80042e8 <_printf_common+0xa4>
 800431a:	3601      	adds	r6, #1
 800431c:	e7d9      	b.n	80042d2 <_printf_common+0x8e>
	...

08004320 <_printf_i>:
 8004320:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004324:	7e0f      	ldrb	r7, [r1, #24]
 8004326:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004328:	2f78      	cmp	r7, #120	; 0x78
 800432a:	4691      	mov	r9, r2
 800432c:	4680      	mov	r8, r0
 800432e:	460c      	mov	r4, r1
 8004330:	469a      	mov	sl, r3
 8004332:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004336:	d807      	bhi.n	8004348 <_printf_i+0x28>
 8004338:	2f62      	cmp	r7, #98	; 0x62
 800433a:	d80a      	bhi.n	8004352 <_printf_i+0x32>
 800433c:	2f00      	cmp	r7, #0
 800433e:	f000 80d8 	beq.w	80044f2 <_printf_i+0x1d2>
 8004342:	2f58      	cmp	r7, #88	; 0x58
 8004344:	f000 80a3 	beq.w	800448e <_printf_i+0x16e>
 8004348:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800434c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004350:	e03a      	b.n	80043c8 <_printf_i+0xa8>
 8004352:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004356:	2b15      	cmp	r3, #21
 8004358:	d8f6      	bhi.n	8004348 <_printf_i+0x28>
 800435a:	a101      	add	r1, pc, #4	; (adr r1, 8004360 <_printf_i+0x40>)
 800435c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004360:	080043b9 	.word	0x080043b9
 8004364:	080043cd 	.word	0x080043cd
 8004368:	08004349 	.word	0x08004349
 800436c:	08004349 	.word	0x08004349
 8004370:	08004349 	.word	0x08004349
 8004374:	08004349 	.word	0x08004349
 8004378:	080043cd 	.word	0x080043cd
 800437c:	08004349 	.word	0x08004349
 8004380:	08004349 	.word	0x08004349
 8004384:	08004349 	.word	0x08004349
 8004388:	08004349 	.word	0x08004349
 800438c:	080044d9 	.word	0x080044d9
 8004390:	080043fd 	.word	0x080043fd
 8004394:	080044bb 	.word	0x080044bb
 8004398:	08004349 	.word	0x08004349
 800439c:	08004349 	.word	0x08004349
 80043a0:	080044fb 	.word	0x080044fb
 80043a4:	08004349 	.word	0x08004349
 80043a8:	080043fd 	.word	0x080043fd
 80043ac:	08004349 	.word	0x08004349
 80043b0:	08004349 	.word	0x08004349
 80043b4:	080044c3 	.word	0x080044c3
 80043b8:	682b      	ldr	r3, [r5, #0]
 80043ba:	1d1a      	adds	r2, r3, #4
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	602a      	str	r2, [r5, #0]
 80043c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80043c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80043c8:	2301      	movs	r3, #1
 80043ca:	e0a3      	b.n	8004514 <_printf_i+0x1f4>
 80043cc:	6820      	ldr	r0, [r4, #0]
 80043ce:	6829      	ldr	r1, [r5, #0]
 80043d0:	0606      	lsls	r6, r0, #24
 80043d2:	f101 0304 	add.w	r3, r1, #4
 80043d6:	d50a      	bpl.n	80043ee <_printf_i+0xce>
 80043d8:	680e      	ldr	r6, [r1, #0]
 80043da:	602b      	str	r3, [r5, #0]
 80043dc:	2e00      	cmp	r6, #0
 80043de:	da03      	bge.n	80043e8 <_printf_i+0xc8>
 80043e0:	232d      	movs	r3, #45	; 0x2d
 80043e2:	4276      	negs	r6, r6
 80043e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80043e8:	485e      	ldr	r0, [pc, #376]	; (8004564 <_printf_i+0x244>)
 80043ea:	230a      	movs	r3, #10
 80043ec:	e019      	b.n	8004422 <_printf_i+0x102>
 80043ee:	680e      	ldr	r6, [r1, #0]
 80043f0:	602b      	str	r3, [r5, #0]
 80043f2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80043f6:	bf18      	it	ne
 80043f8:	b236      	sxthne	r6, r6
 80043fa:	e7ef      	b.n	80043dc <_printf_i+0xbc>
 80043fc:	682b      	ldr	r3, [r5, #0]
 80043fe:	6820      	ldr	r0, [r4, #0]
 8004400:	1d19      	adds	r1, r3, #4
 8004402:	6029      	str	r1, [r5, #0]
 8004404:	0601      	lsls	r1, r0, #24
 8004406:	d501      	bpl.n	800440c <_printf_i+0xec>
 8004408:	681e      	ldr	r6, [r3, #0]
 800440a:	e002      	b.n	8004412 <_printf_i+0xf2>
 800440c:	0646      	lsls	r6, r0, #25
 800440e:	d5fb      	bpl.n	8004408 <_printf_i+0xe8>
 8004410:	881e      	ldrh	r6, [r3, #0]
 8004412:	4854      	ldr	r0, [pc, #336]	; (8004564 <_printf_i+0x244>)
 8004414:	2f6f      	cmp	r7, #111	; 0x6f
 8004416:	bf0c      	ite	eq
 8004418:	2308      	moveq	r3, #8
 800441a:	230a      	movne	r3, #10
 800441c:	2100      	movs	r1, #0
 800441e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004422:	6865      	ldr	r5, [r4, #4]
 8004424:	60a5      	str	r5, [r4, #8]
 8004426:	2d00      	cmp	r5, #0
 8004428:	bfa2      	ittt	ge
 800442a:	6821      	ldrge	r1, [r4, #0]
 800442c:	f021 0104 	bicge.w	r1, r1, #4
 8004430:	6021      	strge	r1, [r4, #0]
 8004432:	b90e      	cbnz	r6, 8004438 <_printf_i+0x118>
 8004434:	2d00      	cmp	r5, #0
 8004436:	d04d      	beq.n	80044d4 <_printf_i+0x1b4>
 8004438:	4615      	mov	r5, r2
 800443a:	fbb6 f1f3 	udiv	r1, r6, r3
 800443e:	fb03 6711 	mls	r7, r3, r1, r6
 8004442:	5dc7      	ldrb	r7, [r0, r7]
 8004444:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004448:	4637      	mov	r7, r6
 800444a:	42bb      	cmp	r3, r7
 800444c:	460e      	mov	r6, r1
 800444e:	d9f4      	bls.n	800443a <_printf_i+0x11a>
 8004450:	2b08      	cmp	r3, #8
 8004452:	d10b      	bne.n	800446c <_printf_i+0x14c>
 8004454:	6823      	ldr	r3, [r4, #0]
 8004456:	07de      	lsls	r6, r3, #31
 8004458:	d508      	bpl.n	800446c <_printf_i+0x14c>
 800445a:	6923      	ldr	r3, [r4, #16]
 800445c:	6861      	ldr	r1, [r4, #4]
 800445e:	4299      	cmp	r1, r3
 8004460:	bfde      	ittt	le
 8004462:	2330      	movle	r3, #48	; 0x30
 8004464:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004468:	f105 35ff 	addle.w	r5, r5, #4294967295
 800446c:	1b52      	subs	r2, r2, r5
 800446e:	6122      	str	r2, [r4, #16]
 8004470:	f8cd a000 	str.w	sl, [sp]
 8004474:	464b      	mov	r3, r9
 8004476:	aa03      	add	r2, sp, #12
 8004478:	4621      	mov	r1, r4
 800447a:	4640      	mov	r0, r8
 800447c:	f7ff fee2 	bl	8004244 <_printf_common>
 8004480:	3001      	adds	r0, #1
 8004482:	d14c      	bne.n	800451e <_printf_i+0x1fe>
 8004484:	f04f 30ff 	mov.w	r0, #4294967295
 8004488:	b004      	add	sp, #16
 800448a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800448e:	4835      	ldr	r0, [pc, #212]	; (8004564 <_printf_i+0x244>)
 8004490:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004494:	6829      	ldr	r1, [r5, #0]
 8004496:	6823      	ldr	r3, [r4, #0]
 8004498:	f851 6b04 	ldr.w	r6, [r1], #4
 800449c:	6029      	str	r1, [r5, #0]
 800449e:	061d      	lsls	r5, r3, #24
 80044a0:	d514      	bpl.n	80044cc <_printf_i+0x1ac>
 80044a2:	07df      	lsls	r7, r3, #31
 80044a4:	bf44      	itt	mi
 80044a6:	f043 0320 	orrmi.w	r3, r3, #32
 80044aa:	6023      	strmi	r3, [r4, #0]
 80044ac:	b91e      	cbnz	r6, 80044b6 <_printf_i+0x196>
 80044ae:	6823      	ldr	r3, [r4, #0]
 80044b0:	f023 0320 	bic.w	r3, r3, #32
 80044b4:	6023      	str	r3, [r4, #0]
 80044b6:	2310      	movs	r3, #16
 80044b8:	e7b0      	b.n	800441c <_printf_i+0xfc>
 80044ba:	6823      	ldr	r3, [r4, #0]
 80044bc:	f043 0320 	orr.w	r3, r3, #32
 80044c0:	6023      	str	r3, [r4, #0]
 80044c2:	2378      	movs	r3, #120	; 0x78
 80044c4:	4828      	ldr	r0, [pc, #160]	; (8004568 <_printf_i+0x248>)
 80044c6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80044ca:	e7e3      	b.n	8004494 <_printf_i+0x174>
 80044cc:	0659      	lsls	r1, r3, #25
 80044ce:	bf48      	it	mi
 80044d0:	b2b6      	uxthmi	r6, r6
 80044d2:	e7e6      	b.n	80044a2 <_printf_i+0x182>
 80044d4:	4615      	mov	r5, r2
 80044d6:	e7bb      	b.n	8004450 <_printf_i+0x130>
 80044d8:	682b      	ldr	r3, [r5, #0]
 80044da:	6826      	ldr	r6, [r4, #0]
 80044dc:	6961      	ldr	r1, [r4, #20]
 80044de:	1d18      	adds	r0, r3, #4
 80044e0:	6028      	str	r0, [r5, #0]
 80044e2:	0635      	lsls	r5, r6, #24
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	d501      	bpl.n	80044ec <_printf_i+0x1cc>
 80044e8:	6019      	str	r1, [r3, #0]
 80044ea:	e002      	b.n	80044f2 <_printf_i+0x1d2>
 80044ec:	0670      	lsls	r0, r6, #25
 80044ee:	d5fb      	bpl.n	80044e8 <_printf_i+0x1c8>
 80044f0:	8019      	strh	r1, [r3, #0]
 80044f2:	2300      	movs	r3, #0
 80044f4:	6123      	str	r3, [r4, #16]
 80044f6:	4615      	mov	r5, r2
 80044f8:	e7ba      	b.n	8004470 <_printf_i+0x150>
 80044fa:	682b      	ldr	r3, [r5, #0]
 80044fc:	1d1a      	adds	r2, r3, #4
 80044fe:	602a      	str	r2, [r5, #0]
 8004500:	681d      	ldr	r5, [r3, #0]
 8004502:	6862      	ldr	r2, [r4, #4]
 8004504:	2100      	movs	r1, #0
 8004506:	4628      	mov	r0, r5
 8004508:	f7fb fe6a 	bl	80001e0 <memchr>
 800450c:	b108      	cbz	r0, 8004512 <_printf_i+0x1f2>
 800450e:	1b40      	subs	r0, r0, r5
 8004510:	6060      	str	r0, [r4, #4]
 8004512:	6863      	ldr	r3, [r4, #4]
 8004514:	6123      	str	r3, [r4, #16]
 8004516:	2300      	movs	r3, #0
 8004518:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800451c:	e7a8      	b.n	8004470 <_printf_i+0x150>
 800451e:	6923      	ldr	r3, [r4, #16]
 8004520:	462a      	mov	r2, r5
 8004522:	4649      	mov	r1, r9
 8004524:	4640      	mov	r0, r8
 8004526:	47d0      	blx	sl
 8004528:	3001      	adds	r0, #1
 800452a:	d0ab      	beq.n	8004484 <_printf_i+0x164>
 800452c:	6823      	ldr	r3, [r4, #0]
 800452e:	079b      	lsls	r3, r3, #30
 8004530:	d413      	bmi.n	800455a <_printf_i+0x23a>
 8004532:	68e0      	ldr	r0, [r4, #12]
 8004534:	9b03      	ldr	r3, [sp, #12]
 8004536:	4298      	cmp	r0, r3
 8004538:	bfb8      	it	lt
 800453a:	4618      	movlt	r0, r3
 800453c:	e7a4      	b.n	8004488 <_printf_i+0x168>
 800453e:	2301      	movs	r3, #1
 8004540:	4632      	mov	r2, r6
 8004542:	4649      	mov	r1, r9
 8004544:	4640      	mov	r0, r8
 8004546:	47d0      	blx	sl
 8004548:	3001      	adds	r0, #1
 800454a:	d09b      	beq.n	8004484 <_printf_i+0x164>
 800454c:	3501      	adds	r5, #1
 800454e:	68e3      	ldr	r3, [r4, #12]
 8004550:	9903      	ldr	r1, [sp, #12]
 8004552:	1a5b      	subs	r3, r3, r1
 8004554:	42ab      	cmp	r3, r5
 8004556:	dcf2      	bgt.n	800453e <_printf_i+0x21e>
 8004558:	e7eb      	b.n	8004532 <_printf_i+0x212>
 800455a:	2500      	movs	r5, #0
 800455c:	f104 0619 	add.w	r6, r4, #25
 8004560:	e7f5      	b.n	800454e <_printf_i+0x22e>
 8004562:	bf00      	nop
 8004564:	08004c29 	.word	0x08004c29
 8004568:	08004c3a 	.word	0x08004c3a

0800456c <_sbrk_r>:
 800456c:	b538      	push	{r3, r4, r5, lr}
 800456e:	4d06      	ldr	r5, [pc, #24]	; (8004588 <_sbrk_r+0x1c>)
 8004570:	2300      	movs	r3, #0
 8004572:	4604      	mov	r4, r0
 8004574:	4608      	mov	r0, r1
 8004576:	602b      	str	r3, [r5, #0]
 8004578:	f7fc fcec 	bl	8000f54 <_sbrk>
 800457c:	1c43      	adds	r3, r0, #1
 800457e:	d102      	bne.n	8004586 <_sbrk_r+0x1a>
 8004580:	682b      	ldr	r3, [r5, #0]
 8004582:	b103      	cbz	r3, 8004586 <_sbrk_r+0x1a>
 8004584:	6023      	str	r3, [r4, #0]
 8004586:	bd38      	pop	{r3, r4, r5, pc}
 8004588:	20000184 	.word	0x20000184

0800458c <__sread>:
 800458c:	b510      	push	{r4, lr}
 800458e:	460c      	mov	r4, r1
 8004590:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004594:	f000 fab2 	bl	8004afc <_read_r>
 8004598:	2800      	cmp	r0, #0
 800459a:	bfab      	itete	ge
 800459c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800459e:	89a3      	ldrhlt	r3, [r4, #12]
 80045a0:	181b      	addge	r3, r3, r0
 80045a2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80045a6:	bfac      	ite	ge
 80045a8:	6563      	strge	r3, [r4, #84]	; 0x54
 80045aa:	81a3      	strhlt	r3, [r4, #12]
 80045ac:	bd10      	pop	{r4, pc}

080045ae <__swrite>:
 80045ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045b2:	461f      	mov	r7, r3
 80045b4:	898b      	ldrh	r3, [r1, #12]
 80045b6:	05db      	lsls	r3, r3, #23
 80045b8:	4605      	mov	r5, r0
 80045ba:	460c      	mov	r4, r1
 80045bc:	4616      	mov	r6, r2
 80045be:	d505      	bpl.n	80045cc <__swrite+0x1e>
 80045c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80045c4:	2302      	movs	r3, #2
 80045c6:	2200      	movs	r2, #0
 80045c8:	f000 f9c8 	bl	800495c <_lseek_r>
 80045cc:	89a3      	ldrh	r3, [r4, #12]
 80045ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80045d2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80045d6:	81a3      	strh	r3, [r4, #12]
 80045d8:	4632      	mov	r2, r6
 80045da:	463b      	mov	r3, r7
 80045dc:	4628      	mov	r0, r5
 80045de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80045e2:	f000 b869 	b.w	80046b8 <_write_r>

080045e6 <__sseek>:
 80045e6:	b510      	push	{r4, lr}
 80045e8:	460c      	mov	r4, r1
 80045ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80045ee:	f000 f9b5 	bl	800495c <_lseek_r>
 80045f2:	1c43      	adds	r3, r0, #1
 80045f4:	89a3      	ldrh	r3, [r4, #12]
 80045f6:	bf15      	itete	ne
 80045f8:	6560      	strne	r0, [r4, #84]	; 0x54
 80045fa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80045fe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004602:	81a3      	strheq	r3, [r4, #12]
 8004604:	bf18      	it	ne
 8004606:	81a3      	strhne	r3, [r4, #12]
 8004608:	bd10      	pop	{r4, pc}

0800460a <__sclose>:
 800460a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800460e:	f000 b8d3 	b.w	80047b8 <_close_r>
	...

08004614 <__swbuf_r>:
 8004614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004616:	460e      	mov	r6, r1
 8004618:	4614      	mov	r4, r2
 800461a:	4605      	mov	r5, r0
 800461c:	b118      	cbz	r0, 8004626 <__swbuf_r+0x12>
 800461e:	6983      	ldr	r3, [r0, #24]
 8004620:	b90b      	cbnz	r3, 8004626 <__swbuf_r+0x12>
 8004622:	f7ff fb81 	bl	8003d28 <__sinit>
 8004626:	4b21      	ldr	r3, [pc, #132]	; (80046ac <__swbuf_r+0x98>)
 8004628:	429c      	cmp	r4, r3
 800462a:	d12b      	bne.n	8004684 <__swbuf_r+0x70>
 800462c:	686c      	ldr	r4, [r5, #4]
 800462e:	69a3      	ldr	r3, [r4, #24]
 8004630:	60a3      	str	r3, [r4, #8]
 8004632:	89a3      	ldrh	r3, [r4, #12]
 8004634:	071a      	lsls	r2, r3, #28
 8004636:	d52f      	bpl.n	8004698 <__swbuf_r+0x84>
 8004638:	6923      	ldr	r3, [r4, #16]
 800463a:	b36b      	cbz	r3, 8004698 <__swbuf_r+0x84>
 800463c:	6923      	ldr	r3, [r4, #16]
 800463e:	6820      	ldr	r0, [r4, #0]
 8004640:	1ac0      	subs	r0, r0, r3
 8004642:	6963      	ldr	r3, [r4, #20]
 8004644:	b2f6      	uxtb	r6, r6
 8004646:	4283      	cmp	r3, r0
 8004648:	4637      	mov	r7, r6
 800464a:	dc04      	bgt.n	8004656 <__swbuf_r+0x42>
 800464c:	4621      	mov	r1, r4
 800464e:	4628      	mov	r0, r5
 8004650:	f000 f948 	bl	80048e4 <_fflush_r>
 8004654:	bb30      	cbnz	r0, 80046a4 <__swbuf_r+0x90>
 8004656:	68a3      	ldr	r3, [r4, #8]
 8004658:	3b01      	subs	r3, #1
 800465a:	60a3      	str	r3, [r4, #8]
 800465c:	6823      	ldr	r3, [r4, #0]
 800465e:	1c5a      	adds	r2, r3, #1
 8004660:	6022      	str	r2, [r4, #0]
 8004662:	701e      	strb	r6, [r3, #0]
 8004664:	6963      	ldr	r3, [r4, #20]
 8004666:	3001      	adds	r0, #1
 8004668:	4283      	cmp	r3, r0
 800466a:	d004      	beq.n	8004676 <__swbuf_r+0x62>
 800466c:	89a3      	ldrh	r3, [r4, #12]
 800466e:	07db      	lsls	r3, r3, #31
 8004670:	d506      	bpl.n	8004680 <__swbuf_r+0x6c>
 8004672:	2e0a      	cmp	r6, #10
 8004674:	d104      	bne.n	8004680 <__swbuf_r+0x6c>
 8004676:	4621      	mov	r1, r4
 8004678:	4628      	mov	r0, r5
 800467a:	f000 f933 	bl	80048e4 <_fflush_r>
 800467e:	b988      	cbnz	r0, 80046a4 <__swbuf_r+0x90>
 8004680:	4638      	mov	r0, r7
 8004682:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004684:	4b0a      	ldr	r3, [pc, #40]	; (80046b0 <__swbuf_r+0x9c>)
 8004686:	429c      	cmp	r4, r3
 8004688:	d101      	bne.n	800468e <__swbuf_r+0x7a>
 800468a:	68ac      	ldr	r4, [r5, #8]
 800468c:	e7cf      	b.n	800462e <__swbuf_r+0x1a>
 800468e:	4b09      	ldr	r3, [pc, #36]	; (80046b4 <__swbuf_r+0xa0>)
 8004690:	429c      	cmp	r4, r3
 8004692:	bf08      	it	eq
 8004694:	68ec      	ldreq	r4, [r5, #12]
 8004696:	e7ca      	b.n	800462e <__swbuf_r+0x1a>
 8004698:	4621      	mov	r1, r4
 800469a:	4628      	mov	r0, r5
 800469c:	f000 f81e 	bl	80046dc <__swsetup_r>
 80046a0:	2800      	cmp	r0, #0
 80046a2:	d0cb      	beq.n	800463c <__swbuf_r+0x28>
 80046a4:	f04f 37ff 	mov.w	r7, #4294967295
 80046a8:	e7ea      	b.n	8004680 <__swbuf_r+0x6c>
 80046aa:	bf00      	nop
 80046ac:	08004bd8 	.word	0x08004bd8
 80046b0:	08004bf8 	.word	0x08004bf8
 80046b4:	08004bb8 	.word	0x08004bb8

080046b8 <_write_r>:
 80046b8:	b538      	push	{r3, r4, r5, lr}
 80046ba:	4d07      	ldr	r5, [pc, #28]	; (80046d8 <_write_r+0x20>)
 80046bc:	4604      	mov	r4, r0
 80046be:	4608      	mov	r0, r1
 80046c0:	4611      	mov	r1, r2
 80046c2:	2200      	movs	r2, #0
 80046c4:	602a      	str	r2, [r5, #0]
 80046c6:	461a      	mov	r2, r3
 80046c8:	f7fc fbf3 	bl	8000eb2 <_write>
 80046cc:	1c43      	adds	r3, r0, #1
 80046ce:	d102      	bne.n	80046d6 <_write_r+0x1e>
 80046d0:	682b      	ldr	r3, [r5, #0]
 80046d2:	b103      	cbz	r3, 80046d6 <_write_r+0x1e>
 80046d4:	6023      	str	r3, [r4, #0]
 80046d6:	bd38      	pop	{r3, r4, r5, pc}
 80046d8:	20000184 	.word	0x20000184

080046dc <__swsetup_r>:
 80046dc:	4b32      	ldr	r3, [pc, #200]	; (80047a8 <__swsetup_r+0xcc>)
 80046de:	b570      	push	{r4, r5, r6, lr}
 80046e0:	681d      	ldr	r5, [r3, #0]
 80046e2:	4606      	mov	r6, r0
 80046e4:	460c      	mov	r4, r1
 80046e6:	b125      	cbz	r5, 80046f2 <__swsetup_r+0x16>
 80046e8:	69ab      	ldr	r3, [r5, #24]
 80046ea:	b913      	cbnz	r3, 80046f2 <__swsetup_r+0x16>
 80046ec:	4628      	mov	r0, r5
 80046ee:	f7ff fb1b 	bl	8003d28 <__sinit>
 80046f2:	4b2e      	ldr	r3, [pc, #184]	; (80047ac <__swsetup_r+0xd0>)
 80046f4:	429c      	cmp	r4, r3
 80046f6:	d10f      	bne.n	8004718 <__swsetup_r+0x3c>
 80046f8:	686c      	ldr	r4, [r5, #4]
 80046fa:	89a3      	ldrh	r3, [r4, #12]
 80046fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004700:	0719      	lsls	r1, r3, #28
 8004702:	d42c      	bmi.n	800475e <__swsetup_r+0x82>
 8004704:	06dd      	lsls	r5, r3, #27
 8004706:	d411      	bmi.n	800472c <__swsetup_r+0x50>
 8004708:	2309      	movs	r3, #9
 800470a:	6033      	str	r3, [r6, #0]
 800470c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004710:	81a3      	strh	r3, [r4, #12]
 8004712:	f04f 30ff 	mov.w	r0, #4294967295
 8004716:	e03e      	b.n	8004796 <__swsetup_r+0xba>
 8004718:	4b25      	ldr	r3, [pc, #148]	; (80047b0 <__swsetup_r+0xd4>)
 800471a:	429c      	cmp	r4, r3
 800471c:	d101      	bne.n	8004722 <__swsetup_r+0x46>
 800471e:	68ac      	ldr	r4, [r5, #8]
 8004720:	e7eb      	b.n	80046fa <__swsetup_r+0x1e>
 8004722:	4b24      	ldr	r3, [pc, #144]	; (80047b4 <__swsetup_r+0xd8>)
 8004724:	429c      	cmp	r4, r3
 8004726:	bf08      	it	eq
 8004728:	68ec      	ldreq	r4, [r5, #12]
 800472a:	e7e6      	b.n	80046fa <__swsetup_r+0x1e>
 800472c:	0758      	lsls	r0, r3, #29
 800472e:	d512      	bpl.n	8004756 <__swsetup_r+0x7a>
 8004730:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004732:	b141      	cbz	r1, 8004746 <__swsetup_r+0x6a>
 8004734:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004738:	4299      	cmp	r1, r3
 800473a:	d002      	beq.n	8004742 <__swsetup_r+0x66>
 800473c:	4630      	mov	r0, r6
 800473e:	f000 f991 	bl	8004a64 <_free_r>
 8004742:	2300      	movs	r3, #0
 8004744:	6363      	str	r3, [r4, #52]	; 0x34
 8004746:	89a3      	ldrh	r3, [r4, #12]
 8004748:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800474c:	81a3      	strh	r3, [r4, #12]
 800474e:	2300      	movs	r3, #0
 8004750:	6063      	str	r3, [r4, #4]
 8004752:	6923      	ldr	r3, [r4, #16]
 8004754:	6023      	str	r3, [r4, #0]
 8004756:	89a3      	ldrh	r3, [r4, #12]
 8004758:	f043 0308 	orr.w	r3, r3, #8
 800475c:	81a3      	strh	r3, [r4, #12]
 800475e:	6923      	ldr	r3, [r4, #16]
 8004760:	b94b      	cbnz	r3, 8004776 <__swsetup_r+0x9a>
 8004762:	89a3      	ldrh	r3, [r4, #12]
 8004764:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004768:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800476c:	d003      	beq.n	8004776 <__swsetup_r+0x9a>
 800476e:	4621      	mov	r1, r4
 8004770:	4630      	mov	r0, r6
 8004772:	f000 f92b 	bl	80049cc <__smakebuf_r>
 8004776:	89a0      	ldrh	r0, [r4, #12]
 8004778:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800477c:	f010 0301 	ands.w	r3, r0, #1
 8004780:	d00a      	beq.n	8004798 <__swsetup_r+0xbc>
 8004782:	2300      	movs	r3, #0
 8004784:	60a3      	str	r3, [r4, #8]
 8004786:	6963      	ldr	r3, [r4, #20]
 8004788:	425b      	negs	r3, r3
 800478a:	61a3      	str	r3, [r4, #24]
 800478c:	6923      	ldr	r3, [r4, #16]
 800478e:	b943      	cbnz	r3, 80047a2 <__swsetup_r+0xc6>
 8004790:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004794:	d1ba      	bne.n	800470c <__swsetup_r+0x30>
 8004796:	bd70      	pop	{r4, r5, r6, pc}
 8004798:	0781      	lsls	r1, r0, #30
 800479a:	bf58      	it	pl
 800479c:	6963      	ldrpl	r3, [r4, #20]
 800479e:	60a3      	str	r3, [r4, #8]
 80047a0:	e7f4      	b.n	800478c <__swsetup_r+0xb0>
 80047a2:	2000      	movs	r0, #0
 80047a4:	e7f7      	b.n	8004796 <__swsetup_r+0xba>
 80047a6:	bf00      	nop
 80047a8:	2000000c 	.word	0x2000000c
 80047ac:	08004bd8 	.word	0x08004bd8
 80047b0:	08004bf8 	.word	0x08004bf8
 80047b4:	08004bb8 	.word	0x08004bb8

080047b8 <_close_r>:
 80047b8:	b538      	push	{r3, r4, r5, lr}
 80047ba:	4d06      	ldr	r5, [pc, #24]	; (80047d4 <_close_r+0x1c>)
 80047bc:	2300      	movs	r3, #0
 80047be:	4604      	mov	r4, r0
 80047c0:	4608      	mov	r0, r1
 80047c2:	602b      	str	r3, [r5, #0]
 80047c4:	f7fc fb91 	bl	8000eea <_close>
 80047c8:	1c43      	adds	r3, r0, #1
 80047ca:	d102      	bne.n	80047d2 <_close_r+0x1a>
 80047cc:	682b      	ldr	r3, [r5, #0]
 80047ce:	b103      	cbz	r3, 80047d2 <_close_r+0x1a>
 80047d0:	6023      	str	r3, [r4, #0]
 80047d2:	bd38      	pop	{r3, r4, r5, pc}
 80047d4:	20000184 	.word	0x20000184

080047d8 <__sflush_r>:
 80047d8:	898a      	ldrh	r2, [r1, #12]
 80047da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80047de:	4605      	mov	r5, r0
 80047e0:	0710      	lsls	r0, r2, #28
 80047e2:	460c      	mov	r4, r1
 80047e4:	d458      	bmi.n	8004898 <__sflush_r+0xc0>
 80047e6:	684b      	ldr	r3, [r1, #4]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	dc05      	bgt.n	80047f8 <__sflush_r+0x20>
 80047ec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	dc02      	bgt.n	80047f8 <__sflush_r+0x20>
 80047f2:	2000      	movs	r0, #0
 80047f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80047f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80047fa:	2e00      	cmp	r6, #0
 80047fc:	d0f9      	beq.n	80047f2 <__sflush_r+0x1a>
 80047fe:	2300      	movs	r3, #0
 8004800:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004804:	682f      	ldr	r7, [r5, #0]
 8004806:	602b      	str	r3, [r5, #0]
 8004808:	d032      	beq.n	8004870 <__sflush_r+0x98>
 800480a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800480c:	89a3      	ldrh	r3, [r4, #12]
 800480e:	075a      	lsls	r2, r3, #29
 8004810:	d505      	bpl.n	800481e <__sflush_r+0x46>
 8004812:	6863      	ldr	r3, [r4, #4]
 8004814:	1ac0      	subs	r0, r0, r3
 8004816:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004818:	b10b      	cbz	r3, 800481e <__sflush_r+0x46>
 800481a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800481c:	1ac0      	subs	r0, r0, r3
 800481e:	2300      	movs	r3, #0
 8004820:	4602      	mov	r2, r0
 8004822:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004824:	6a21      	ldr	r1, [r4, #32]
 8004826:	4628      	mov	r0, r5
 8004828:	47b0      	blx	r6
 800482a:	1c43      	adds	r3, r0, #1
 800482c:	89a3      	ldrh	r3, [r4, #12]
 800482e:	d106      	bne.n	800483e <__sflush_r+0x66>
 8004830:	6829      	ldr	r1, [r5, #0]
 8004832:	291d      	cmp	r1, #29
 8004834:	d82c      	bhi.n	8004890 <__sflush_r+0xb8>
 8004836:	4a2a      	ldr	r2, [pc, #168]	; (80048e0 <__sflush_r+0x108>)
 8004838:	40ca      	lsrs	r2, r1
 800483a:	07d6      	lsls	r6, r2, #31
 800483c:	d528      	bpl.n	8004890 <__sflush_r+0xb8>
 800483e:	2200      	movs	r2, #0
 8004840:	6062      	str	r2, [r4, #4]
 8004842:	04d9      	lsls	r1, r3, #19
 8004844:	6922      	ldr	r2, [r4, #16]
 8004846:	6022      	str	r2, [r4, #0]
 8004848:	d504      	bpl.n	8004854 <__sflush_r+0x7c>
 800484a:	1c42      	adds	r2, r0, #1
 800484c:	d101      	bne.n	8004852 <__sflush_r+0x7a>
 800484e:	682b      	ldr	r3, [r5, #0]
 8004850:	b903      	cbnz	r3, 8004854 <__sflush_r+0x7c>
 8004852:	6560      	str	r0, [r4, #84]	; 0x54
 8004854:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004856:	602f      	str	r7, [r5, #0]
 8004858:	2900      	cmp	r1, #0
 800485a:	d0ca      	beq.n	80047f2 <__sflush_r+0x1a>
 800485c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004860:	4299      	cmp	r1, r3
 8004862:	d002      	beq.n	800486a <__sflush_r+0x92>
 8004864:	4628      	mov	r0, r5
 8004866:	f000 f8fd 	bl	8004a64 <_free_r>
 800486a:	2000      	movs	r0, #0
 800486c:	6360      	str	r0, [r4, #52]	; 0x34
 800486e:	e7c1      	b.n	80047f4 <__sflush_r+0x1c>
 8004870:	6a21      	ldr	r1, [r4, #32]
 8004872:	2301      	movs	r3, #1
 8004874:	4628      	mov	r0, r5
 8004876:	47b0      	blx	r6
 8004878:	1c41      	adds	r1, r0, #1
 800487a:	d1c7      	bne.n	800480c <__sflush_r+0x34>
 800487c:	682b      	ldr	r3, [r5, #0]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d0c4      	beq.n	800480c <__sflush_r+0x34>
 8004882:	2b1d      	cmp	r3, #29
 8004884:	d001      	beq.n	800488a <__sflush_r+0xb2>
 8004886:	2b16      	cmp	r3, #22
 8004888:	d101      	bne.n	800488e <__sflush_r+0xb6>
 800488a:	602f      	str	r7, [r5, #0]
 800488c:	e7b1      	b.n	80047f2 <__sflush_r+0x1a>
 800488e:	89a3      	ldrh	r3, [r4, #12]
 8004890:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004894:	81a3      	strh	r3, [r4, #12]
 8004896:	e7ad      	b.n	80047f4 <__sflush_r+0x1c>
 8004898:	690f      	ldr	r7, [r1, #16]
 800489a:	2f00      	cmp	r7, #0
 800489c:	d0a9      	beq.n	80047f2 <__sflush_r+0x1a>
 800489e:	0793      	lsls	r3, r2, #30
 80048a0:	680e      	ldr	r6, [r1, #0]
 80048a2:	bf08      	it	eq
 80048a4:	694b      	ldreq	r3, [r1, #20]
 80048a6:	600f      	str	r7, [r1, #0]
 80048a8:	bf18      	it	ne
 80048aa:	2300      	movne	r3, #0
 80048ac:	eba6 0807 	sub.w	r8, r6, r7
 80048b0:	608b      	str	r3, [r1, #8]
 80048b2:	f1b8 0f00 	cmp.w	r8, #0
 80048b6:	dd9c      	ble.n	80047f2 <__sflush_r+0x1a>
 80048b8:	6a21      	ldr	r1, [r4, #32]
 80048ba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80048bc:	4643      	mov	r3, r8
 80048be:	463a      	mov	r2, r7
 80048c0:	4628      	mov	r0, r5
 80048c2:	47b0      	blx	r6
 80048c4:	2800      	cmp	r0, #0
 80048c6:	dc06      	bgt.n	80048d6 <__sflush_r+0xfe>
 80048c8:	89a3      	ldrh	r3, [r4, #12]
 80048ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80048ce:	81a3      	strh	r3, [r4, #12]
 80048d0:	f04f 30ff 	mov.w	r0, #4294967295
 80048d4:	e78e      	b.n	80047f4 <__sflush_r+0x1c>
 80048d6:	4407      	add	r7, r0
 80048d8:	eba8 0800 	sub.w	r8, r8, r0
 80048dc:	e7e9      	b.n	80048b2 <__sflush_r+0xda>
 80048de:	bf00      	nop
 80048e0:	20400001 	.word	0x20400001

080048e4 <_fflush_r>:
 80048e4:	b538      	push	{r3, r4, r5, lr}
 80048e6:	690b      	ldr	r3, [r1, #16]
 80048e8:	4605      	mov	r5, r0
 80048ea:	460c      	mov	r4, r1
 80048ec:	b913      	cbnz	r3, 80048f4 <_fflush_r+0x10>
 80048ee:	2500      	movs	r5, #0
 80048f0:	4628      	mov	r0, r5
 80048f2:	bd38      	pop	{r3, r4, r5, pc}
 80048f4:	b118      	cbz	r0, 80048fe <_fflush_r+0x1a>
 80048f6:	6983      	ldr	r3, [r0, #24]
 80048f8:	b90b      	cbnz	r3, 80048fe <_fflush_r+0x1a>
 80048fa:	f7ff fa15 	bl	8003d28 <__sinit>
 80048fe:	4b14      	ldr	r3, [pc, #80]	; (8004950 <_fflush_r+0x6c>)
 8004900:	429c      	cmp	r4, r3
 8004902:	d11b      	bne.n	800493c <_fflush_r+0x58>
 8004904:	686c      	ldr	r4, [r5, #4]
 8004906:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d0ef      	beq.n	80048ee <_fflush_r+0xa>
 800490e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004910:	07d0      	lsls	r0, r2, #31
 8004912:	d404      	bmi.n	800491e <_fflush_r+0x3a>
 8004914:	0599      	lsls	r1, r3, #22
 8004916:	d402      	bmi.n	800491e <_fflush_r+0x3a>
 8004918:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800491a:	f7ff faa3 	bl	8003e64 <__retarget_lock_acquire_recursive>
 800491e:	4628      	mov	r0, r5
 8004920:	4621      	mov	r1, r4
 8004922:	f7ff ff59 	bl	80047d8 <__sflush_r>
 8004926:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004928:	07da      	lsls	r2, r3, #31
 800492a:	4605      	mov	r5, r0
 800492c:	d4e0      	bmi.n	80048f0 <_fflush_r+0xc>
 800492e:	89a3      	ldrh	r3, [r4, #12]
 8004930:	059b      	lsls	r3, r3, #22
 8004932:	d4dd      	bmi.n	80048f0 <_fflush_r+0xc>
 8004934:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004936:	f7ff fa96 	bl	8003e66 <__retarget_lock_release_recursive>
 800493a:	e7d9      	b.n	80048f0 <_fflush_r+0xc>
 800493c:	4b05      	ldr	r3, [pc, #20]	; (8004954 <_fflush_r+0x70>)
 800493e:	429c      	cmp	r4, r3
 8004940:	d101      	bne.n	8004946 <_fflush_r+0x62>
 8004942:	68ac      	ldr	r4, [r5, #8]
 8004944:	e7df      	b.n	8004906 <_fflush_r+0x22>
 8004946:	4b04      	ldr	r3, [pc, #16]	; (8004958 <_fflush_r+0x74>)
 8004948:	429c      	cmp	r4, r3
 800494a:	bf08      	it	eq
 800494c:	68ec      	ldreq	r4, [r5, #12]
 800494e:	e7da      	b.n	8004906 <_fflush_r+0x22>
 8004950:	08004bd8 	.word	0x08004bd8
 8004954:	08004bf8 	.word	0x08004bf8
 8004958:	08004bb8 	.word	0x08004bb8

0800495c <_lseek_r>:
 800495c:	b538      	push	{r3, r4, r5, lr}
 800495e:	4d07      	ldr	r5, [pc, #28]	; (800497c <_lseek_r+0x20>)
 8004960:	4604      	mov	r4, r0
 8004962:	4608      	mov	r0, r1
 8004964:	4611      	mov	r1, r2
 8004966:	2200      	movs	r2, #0
 8004968:	602a      	str	r2, [r5, #0]
 800496a:	461a      	mov	r2, r3
 800496c:	f7fc fae4 	bl	8000f38 <_lseek>
 8004970:	1c43      	adds	r3, r0, #1
 8004972:	d102      	bne.n	800497a <_lseek_r+0x1e>
 8004974:	682b      	ldr	r3, [r5, #0]
 8004976:	b103      	cbz	r3, 800497a <_lseek_r+0x1e>
 8004978:	6023      	str	r3, [r4, #0]
 800497a:	bd38      	pop	{r3, r4, r5, pc}
 800497c:	20000184 	.word	0x20000184

08004980 <__swhatbuf_r>:
 8004980:	b570      	push	{r4, r5, r6, lr}
 8004982:	460e      	mov	r6, r1
 8004984:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004988:	2900      	cmp	r1, #0
 800498a:	b096      	sub	sp, #88	; 0x58
 800498c:	4614      	mov	r4, r2
 800498e:	461d      	mov	r5, r3
 8004990:	da08      	bge.n	80049a4 <__swhatbuf_r+0x24>
 8004992:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004996:	2200      	movs	r2, #0
 8004998:	602a      	str	r2, [r5, #0]
 800499a:	061a      	lsls	r2, r3, #24
 800499c:	d410      	bmi.n	80049c0 <__swhatbuf_r+0x40>
 800499e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80049a2:	e00e      	b.n	80049c2 <__swhatbuf_r+0x42>
 80049a4:	466a      	mov	r2, sp
 80049a6:	f000 f8bb 	bl	8004b20 <_fstat_r>
 80049aa:	2800      	cmp	r0, #0
 80049ac:	dbf1      	blt.n	8004992 <__swhatbuf_r+0x12>
 80049ae:	9a01      	ldr	r2, [sp, #4]
 80049b0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80049b4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80049b8:	425a      	negs	r2, r3
 80049ba:	415a      	adcs	r2, r3
 80049bc:	602a      	str	r2, [r5, #0]
 80049be:	e7ee      	b.n	800499e <__swhatbuf_r+0x1e>
 80049c0:	2340      	movs	r3, #64	; 0x40
 80049c2:	2000      	movs	r0, #0
 80049c4:	6023      	str	r3, [r4, #0]
 80049c6:	b016      	add	sp, #88	; 0x58
 80049c8:	bd70      	pop	{r4, r5, r6, pc}
	...

080049cc <__smakebuf_r>:
 80049cc:	898b      	ldrh	r3, [r1, #12]
 80049ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80049d0:	079d      	lsls	r5, r3, #30
 80049d2:	4606      	mov	r6, r0
 80049d4:	460c      	mov	r4, r1
 80049d6:	d507      	bpl.n	80049e8 <__smakebuf_r+0x1c>
 80049d8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80049dc:	6023      	str	r3, [r4, #0]
 80049de:	6123      	str	r3, [r4, #16]
 80049e0:	2301      	movs	r3, #1
 80049e2:	6163      	str	r3, [r4, #20]
 80049e4:	b002      	add	sp, #8
 80049e6:	bd70      	pop	{r4, r5, r6, pc}
 80049e8:	ab01      	add	r3, sp, #4
 80049ea:	466a      	mov	r2, sp
 80049ec:	f7ff ffc8 	bl	8004980 <__swhatbuf_r>
 80049f0:	9900      	ldr	r1, [sp, #0]
 80049f2:	4605      	mov	r5, r0
 80049f4:	4630      	mov	r0, r6
 80049f6:	f7ff fa57 	bl	8003ea8 <_malloc_r>
 80049fa:	b948      	cbnz	r0, 8004a10 <__smakebuf_r+0x44>
 80049fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a00:	059a      	lsls	r2, r3, #22
 8004a02:	d4ef      	bmi.n	80049e4 <__smakebuf_r+0x18>
 8004a04:	f023 0303 	bic.w	r3, r3, #3
 8004a08:	f043 0302 	orr.w	r3, r3, #2
 8004a0c:	81a3      	strh	r3, [r4, #12]
 8004a0e:	e7e3      	b.n	80049d8 <__smakebuf_r+0xc>
 8004a10:	4b0d      	ldr	r3, [pc, #52]	; (8004a48 <__smakebuf_r+0x7c>)
 8004a12:	62b3      	str	r3, [r6, #40]	; 0x28
 8004a14:	89a3      	ldrh	r3, [r4, #12]
 8004a16:	6020      	str	r0, [r4, #0]
 8004a18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a1c:	81a3      	strh	r3, [r4, #12]
 8004a1e:	9b00      	ldr	r3, [sp, #0]
 8004a20:	6163      	str	r3, [r4, #20]
 8004a22:	9b01      	ldr	r3, [sp, #4]
 8004a24:	6120      	str	r0, [r4, #16]
 8004a26:	b15b      	cbz	r3, 8004a40 <__smakebuf_r+0x74>
 8004a28:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004a2c:	4630      	mov	r0, r6
 8004a2e:	f000 f889 	bl	8004b44 <_isatty_r>
 8004a32:	b128      	cbz	r0, 8004a40 <__smakebuf_r+0x74>
 8004a34:	89a3      	ldrh	r3, [r4, #12]
 8004a36:	f023 0303 	bic.w	r3, r3, #3
 8004a3a:	f043 0301 	orr.w	r3, r3, #1
 8004a3e:	81a3      	strh	r3, [r4, #12]
 8004a40:	89a0      	ldrh	r0, [r4, #12]
 8004a42:	4305      	orrs	r5, r0
 8004a44:	81a5      	strh	r5, [r4, #12]
 8004a46:	e7cd      	b.n	80049e4 <__smakebuf_r+0x18>
 8004a48:	08003cc1 	.word	0x08003cc1

08004a4c <__malloc_lock>:
 8004a4c:	4801      	ldr	r0, [pc, #4]	; (8004a54 <__malloc_lock+0x8>)
 8004a4e:	f7ff ba09 	b.w	8003e64 <__retarget_lock_acquire_recursive>
 8004a52:	bf00      	nop
 8004a54:	20000178 	.word	0x20000178

08004a58 <__malloc_unlock>:
 8004a58:	4801      	ldr	r0, [pc, #4]	; (8004a60 <__malloc_unlock+0x8>)
 8004a5a:	f7ff ba04 	b.w	8003e66 <__retarget_lock_release_recursive>
 8004a5e:	bf00      	nop
 8004a60:	20000178 	.word	0x20000178

08004a64 <_free_r>:
 8004a64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004a66:	2900      	cmp	r1, #0
 8004a68:	d044      	beq.n	8004af4 <_free_r+0x90>
 8004a6a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a6e:	9001      	str	r0, [sp, #4]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	f1a1 0404 	sub.w	r4, r1, #4
 8004a76:	bfb8      	it	lt
 8004a78:	18e4      	addlt	r4, r4, r3
 8004a7a:	f7ff ffe7 	bl	8004a4c <__malloc_lock>
 8004a7e:	4a1e      	ldr	r2, [pc, #120]	; (8004af8 <_free_r+0x94>)
 8004a80:	9801      	ldr	r0, [sp, #4]
 8004a82:	6813      	ldr	r3, [r2, #0]
 8004a84:	b933      	cbnz	r3, 8004a94 <_free_r+0x30>
 8004a86:	6063      	str	r3, [r4, #4]
 8004a88:	6014      	str	r4, [r2, #0]
 8004a8a:	b003      	add	sp, #12
 8004a8c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004a90:	f7ff bfe2 	b.w	8004a58 <__malloc_unlock>
 8004a94:	42a3      	cmp	r3, r4
 8004a96:	d908      	bls.n	8004aaa <_free_r+0x46>
 8004a98:	6825      	ldr	r5, [r4, #0]
 8004a9a:	1961      	adds	r1, r4, r5
 8004a9c:	428b      	cmp	r3, r1
 8004a9e:	bf01      	itttt	eq
 8004aa0:	6819      	ldreq	r1, [r3, #0]
 8004aa2:	685b      	ldreq	r3, [r3, #4]
 8004aa4:	1949      	addeq	r1, r1, r5
 8004aa6:	6021      	streq	r1, [r4, #0]
 8004aa8:	e7ed      	b.n	8004a86 <_free_r+0x22>
 8004aaa:	461a      	mov	r2, r3
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	b10b      	cbz	r3, 8004ab4 <_free_r+0x50>
 8004ab0:	42a3      	cmp	r3, r4
 8004ab2:	d9fa      	bls.n	8004aaa <_free_r+0x46>
 8004ab4:	6811      	ldr	r1, [r2, #0]
 8004ab6:	1855      	adds	r5, r2, r1
 8004ab8:	42a5      	cmp	r5, r4
 8004aba:	d10b      	bne.n	8004ad4 <_free_r+0x70>
 8004abc:	6824      	ldr	r4, [r4, #0]
 8004abe:	4421      	add	r1, r4
 8004ac0:	1854      	adds	r4, r2, r1
 8004ac2:	42a3      	cmp	r3, r4
 8004ac4:	6011      	str	r1, [r2, #0]
 8004ac6:	d1e0      	bne.n	8004a8a <_free_r+0x26>
 8004ac8:	681c      	ldr	r4, [r3, #0]
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	6053      	str	r3, [r2, #4]
 8004ace:	4421      	add	r1, r4
 8004ad0:	6011      	str	r1, [r2, #0]
 8004ad2:	e7da      	b.n	8004a8a <_free_r+0x26>
 8004ad4:	d902      	bls.n	8004adc <_free_r+0x78>
 8004ad6:	230c      	movs	r3, #12
 8004ad8:	6003      	str	r3, [r0, #0]
 8004ada:	e7d6      	b.n	8004a8a <_free_r+0x26>
 8004adc:	6825      	ldr	r5, [r4, #0]
 8004ade:	1961      	adds	r1, r4, r5
 8004ae0:	428b      	cmp	r3, r1
 8004ae2:	bf04      	itt	eq
 8004ae4:	6819      	ldreq	r1, [r3, #0]
 8004ae6:	685b      	ldreq	r3, [r3, #4]
 8004ae8:	6063      	str	r3, [r4, #4]
 8004aea:	bf04      	itt	eq
 8004aec:	1949      	addeq	r1, r1, r5
 8004aee:	6021      	streq	r1, [r4, #0]
 8004af0:	6054      	str	r4, [r2, #4]
 8004af2:	e7ca      	b.n	8004a8a <_free_r+0x26>
 8004af4:	b003      	add	sp, #12
 8004af6:	bd30      	pop	{r4, r5, pc}
 8004af8:	2000017c 	.word	0x2000017c

08004afc <_read_r>:
 8004afc:	b538      	push	{r3, r4, r5, lr}
 8004afe:	4d07      	ldr	r5, [pc, #28]	; (8004b1c <_read_r+0x20>)
 8004b00:	4604      	mov	r4, r0
 8004b02:	4608      	mov	r0, r1
 8004b04:	4611      	mov	r1, r2
 8004b06:	2200      	movs	r2, #0
 8004b08:	602a      	str	r2, [r5, #0]
 8004b0a:	461a      	mov	r2, r3
 8004b0c:	f7fc f9b4 	bl	8000e78 <_read>
 8004b10:	1c43      	adds	r3, r0, #1
 8004b12:	d102      	bne.n	8004b1a <_read_r+0x1e>
 8004b14:	682b      	ldr	r3, [r5, #0]
 8004b16:	b103      	cbz	r3, 8004b1a <_read_r+0x1e>
 8004b18:	6023      	str	r3, [r4, #0]
 8004b1a:	bd38      	pop	{r3, r4, r5, pc}
 8004b1c:	20000184 	.word	0x20000184

08004b20 <_fstat_r>:
 8004b20:	b538      	push	{r3, r4, r5, lr}
 8004b22:	4d07      	ldr	r5, [pc, #28]	; (8004b40 <_fstat_r+0x20>)
 8004b24:	2300      	movs	r3, #0
 8004b26:	4604      	mov	r4, r0
 8004b28:	4608      	mov	r0, r1
 8004b2a:	4611      	mov	r1, r2
 8004b2c:	602b      	str	r3, [r5, #0]
 8004b2e:	f7fc f9e8 	bl	8000f02 <_fstat>
 8004b32:	1c43      	adds	r3, r0, #1
 8004b34:	d102      	bne.n	8004b3c <_fstat_r+0x1c>
 8004b36:	682b      	ldr	r3, [r5, #0]
 8004b38:	b103      	cbz	r3, 8004b3c <_fstat_r+0x1c>
 8004b3a:	6023      	str	r3, [r4, #0]
 8004b3c:	bd38      	pop	{r3, r4, r5, pc}
 8004b3e:	bf00      	nop
 8004b40:	20000184 	.word	0x20000184

08004b44 <_isatty_r>:
 8004b44:	b538      	push	{r3, r4, r5, lr}
 8004b46:	4d06      	ldr	r5, [pc, #24]	; (8004b60 <_isatty_r+0x1c>)
 8004b48:	2300      	movs	r3, #0
 8004b4a:	4604      	mov	r4, r0
 8004b4c:	4608      	mov	r0, r1
 8004b4e:	602b      	str	r3, [r5, #0]
 8004b50:	f7fc f9e7 	bl	8000f22 <_isatty>
 8004b54:	1c43      	adds	r3, r0, #1
 8004b56:	d102      	bne.n	8004b5e <_isatty_r+0x1a>
 8004b58:	682b      	ldr	r3, [r5, #0]
 8004b5a:	b103      	cbz	r3, 8004b5e <_isatty_r+0x1a>
 8004b5c:	6023      	str	r3, [r4, #0]
 8004b5e:	bd38      	pop	{r3, r4, r5, pc}
 8004b60:	20000184 	.word	0x20000184

08004b64 <_init>:
 8004b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b66:	bf00      	nop
 8004b68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b6a:	bc08      	pop	{r3}
 8004b6c:	469e      	mov	lr, r3
 8004b6e:	4770      	bx	lr

08004b70 <_fini>:
 8004b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b72:	bf00      	nop
 8004b74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b76:	bc08      	pop	{r3}
 8004b78:	469e      	mov	lr, r3
 8004b7a:	4770      	bx	lr
